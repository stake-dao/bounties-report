{"id":"85013f3504edb666b7464177ebc0dc15","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/interfaces/IERC1363.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"},"@openzeppelin/contracts/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"},"@openzeppelin/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert Errors.FailedCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            assembly (\"memory-safe\") {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/Hashes.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library of standard hash functions.\n *\n * _Available since v5.1._\n */\nlibrary Hashes {\n    /**\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n     *\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n     */\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\n        return a < b ? _efficientKeccak256(a, b) : _efficientKeccak256(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function _efficientKeccak256(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MerkleProof.sol)\n// This file was procedurally generated from scripts/generate/templates/MerkleProof.js.\n\npragma solidity ^0.8.20;\n\nimport {Hashes} from \"./Hashes.sol\";\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the Merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\n * against this attack out of the box.\n *\n * IMPORTANT: Consider memory side-effects when using custom hashing functions\n * that access memory in an unsafe way.\n *\n * NOTE: This library supports proof verification for merkle trees built using\n * custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n * leaf inclusion in trees built using non-commutative hashing functions requires\n * additional logic that is not supported by this library.\n */\nlibrary MerkleProof {\n    /**\n     *@dev The multiproof provided is not valid.\n     */\n    error MerkleProofInvalidMultiproof();\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProof(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function processProof(\n        bytes32[] memory proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProofCalldata(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function processProofCalldata(\n        bytes32[] calldata proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Errors.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"contracts/MultiMerkleStash.sol":{"content":"// SPDX-License-Identifier: MIT\n// Merkle Stash\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"./Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n\ncontract MultiMerkleStash is Ownable {\n  using SafeERC20 for IERC20;\n\n  struct claimParam {\n      address token;\n      uint256 index;\n      uint256 amount;\n      bytes32[] merkleProof;\n  }\n\n  // environment variables for updateable merkle\n  mapping(address => bytes32) public merkleRoot;\n  mapping(address => uint256) public update;\n\n  // This is a packed array of booleans.\n  mapping(address => mapping(uint256 => mapping(uint256 => uint256))) private claimedBitMap;\n\n  function isClaimed(address token, uint256 index) public view returns (bool) {\n    uint256 claimedWordIndex = index / 256;\n    uint256 claimedBitIndex = index % 256;\n    uint256 claimedWord = claimedBitMap[token][update[token]][claimedWordIndex];\n    uint256 mask = (1 << claimedBitIndex);\n    return claimedWord & mask == mask;\n  }\n\n  function _setClaimed(address token, uint256 index) private {\n    uint256 claimedWordIndex = index / 256;\n    uint256 claimedBitIndex = index % 256;\n    claimedBitMap[token][update[token]][claimedWordIndex] = claimedBitMap[token][update[token]][claimedWordIndex] | (1 << claimedBitIndex);\n  }\n\n  function claim(address token, uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) public {\n    require(merkleRoot[token] != 0, 'frozen');\n    require(!isClaimed(token, index), 'Drop already claimed.');\n\n    // Verify the merkle proof.\n    bytes32 node = keccak256(abi.encodePacked(index, account, amount));\n    require(MerkleProof.verify(merkleProof, merkleRoot[token], node), 'Invalid proof.');\n\n    _setClaimed(token, index);\n    IERC20(token).safeTransfer(account, amount);\n\n    emit Claimed(token, index, amount, account, update[token]);\n  }\n\n  function claimMulti(address account, claimParam[] calldata claims) external {\n    for(uint256 i=0;i<claims.length;++i) {\n      claim(claims[i].token, claims[i].index, account, claims[i].amount, claims[i].merkleProof);\n    }\n  }\n\n  // MULTI SIG FUNCTIONS //\n\n  function updateMerkleRoot(address token, bytes32 _merkleRoot) public onlyOwner {\n\n    // Increment the update (simulates the clearing of the claimedBitMap)\n    update[token] += 1;\n    // Set the new merkle root\n    merkleRoot[token] = _merkleRoot;\n\n    emit MerkleRootUpdated(token, _merkleRoot, update[token]);\n  }\n\n  // EVENTS //\n  event Claimed(address indexed token, uint256 index, uint256 amount, address indexed account, uint256 indexed update);\n  event MerkleRootUpdated(address indexed token, bytes32 indexed merkleRoot, uint256 indexed update);\n}"},"contracts/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner = 0xF930EBBd05eF8b25B1797b9b2109DDC9B0d43063; // Stake DAO multisig\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"}},"settings":{"optimizer":{"enabled":true,"runs":100000},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"sources":{"@openzeppelin/contracts/interfaces/IERC1363.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC1363.sol","exportedSymbols":{"IERC1363":[81],"IERC165":[2014],"IERC20":[167]},"id":82,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:0"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","file":"./IERC20.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":82,"sourceUnit":90,"src":"133:36:0","symbolAliases":[{"foreign":{"id":2,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"141:6:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","file":"./IERC165.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":82,"sourceUnit":86,"src":"170:38:0","symbolAliases":[{"foreign":{"id":4,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2014,"src":"178:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":7,"name":"IERC20","nameLocations":["590:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":167,"src":"590:6:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"590:6:0"},{"baseName":{"id":9,"name":"IERC165","nameLocations":["598:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":2014,"src":"598:7:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"598:7:0"}],"canonicalName":"IERC1363","contractDependencies":[],"contractKind":"interface","documentation":{"id":6,"nodeType":"StructuredDocumentation","src":"210:357:0","text":" @title IERC1363\n @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction."},"fullyImplemented":false,"id":81,"linearizedBaseContracts":[81,2014,167],"name":"IERC1363","nameLocation":"578:8:0","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":11,"nodeType":"StructuredDocumentation","src":"1148:370:0","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"1296ee62","id":20,"implemented":false,"kind":"function","modifiers":[],"name":"transferAndCall","nameLocation":"1532:15:0","nodeType":"FunctionDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13,"mutability":"mutable","name":"to","nameLocation":"1556:2:0","nodeType":"VariableDeclaration","scope":20,"src":"1548:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12,"name":"address","nodeType":"ElementaryTypeName","src":"1548:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":15,"mutability":"mutable","name":"value","nameLocation":"1568:5:0","nodeType":"VariableDeclaration","scope":20,"src":"1560:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":14,"name":"uint256","nodeType":"ElementaryTypeName","src":"1560:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1547:27:0"},"returnParameters":{"id":19,"nodeType":"ParameterList","parameters":[{"constant":false,"id":18,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":20,"src":"1593:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":17,"name":"bool","nodeType":"ElementaryTypeName","src":"1593:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1592:6:0"},"scope":81,"src":"1523:76:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":21,"nodeType":"StructuredDocumentation","src":"1605:453:0","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"4000aea0","id":32,"implemented":false,"kind":"function","modifiers":[],"name":"transferAndCall","nameLocation":"2072:15:0","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":23,"mutability":"mutable","name":"to","nameLocation":"2096:2:0","nodeType":"VariableDeclaration","scope":32,"src":"2088:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":22,"name":"address","nodeType":"ElementaryTypeName","src":"2088:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":25,"mutability":"mutable","name":"value","nameLocation":"2108:5:0","nodeType":"VariableDeclaration","scope":32,"src":"2100:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":24,"name":"uint256","nodeType":"ElementaryTypeName","src":"2100:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":27,"mutability":"mutable","name":"data","nameLocation":"2130:4:0","nodeType":"VariableDeclaration","scope":32,"src":"2115:19:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":26,"name":"bytes","nodeType":"ElementaryTypeName","src":"2115:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2087:48:0"},"returnParameters":{"id":31,"nodeType":"ParameterList","parameters":[{"constant":false,"id":30,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":32,"src":"2154:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":29,"name":"bool","nodeType":"ElementaryTypeName","src":"2154:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2153:6:0"},"scope":81,"src":"2063:97:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":33,"nodeType":"StructuredDocumentation","src":"2166:453:0","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"d8fbe994","id":44,"implemented":false,"kind":"function","modifiers":[],"name":"transferFromAndCall","nameLocation":"2633:19:0","nodeType":"FunctionDefinition","parameters":{"id":40,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"from","nameLocation":"2661:4:0","nodeType":"VariableDeclaration","scope":44,"src":"2653:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"2653:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":37,"mutability":"mutable","name":"to","nameLocation":"2675:2:0","nodeType":"VariableDeclaration","scope":44,"src":"2667:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":36,"name":"address","nodeType":"ElementaryTypeName","src":"2667:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":39,"mutability":"mutable","name":"value","nameLocation":"2687:5:0","nodeType":"VariableDeclaration","scope":44,"src":"2679:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":38,"name":"uint256","nodeType":"ElementaryTypeName","src":"2679:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2652:41:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":44,"src":"2712:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":41,"name":"bool","nodeType":"ElementaryTypeName","src":"2712:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2711:6:0"},"scope":81,"src":"2624:94:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":45,"nodeType":"StructuredDocumentation","src":"2724:536:0","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"c1d34b89","id":58,"implemented":false,"kind":"function","modifiers":[],"name":"transferFromAndCall","nameLocation":"3274:19:0","nodeType":"FunctionDefinition","parameters":{"id":54,"nodeType":"ParameterList","parameters":[{"constant":false,"id":47,"mutability":"mutable","name":"from","nameLocation":"3302:4:0","nodeType":"VariableDeclaration","scope":58,"src":"3294:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":46,"name":"address","nodeType":"ElementaryTypeName","src":"3294:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":49,"mutability":"mutable","name":"to","nameLocation":"3316:2:0","nodeType":"VariableDeclaration","scope":58,"src":"3308:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":48,"name":"address","nodeType":"ElementaryTypeName","src":"3308:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":51,"mutability":"mutable","name":"value","nameLocation":"3328:5:0","nodeType":"VariableDeclaration","scope":58,"src":"3320:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":50,"name":"uint256","nodeType":"ElementaryTypeName","src":"3320:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":53,"mutability":"mutable","name":"data","nameLocation":"3350:4:0","nodeType":"VariableDeclaration","scope":58,"src":"3335:19:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":52,"name":"bytes","nodeType":"ElementaryTypeName","src":"3335:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3293:62:0"},"returnParameters":{"id":57,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":58,"src":"3374:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":55,"name":"bool","nodeType":"ElementaryTypeName","src":"3374:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3373:6:0"},"scope":81,"src":"3265:115:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":59,"nodeType":"StructuredDocumentation","src":"3386:390:0","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"3177029f","id":68,"implemented":false,"kind":"function","modifiers":[],"name":"approveAndCall","nameLocation":"3790:14:0","nodeType":"FunctionDefinition","parameters":{"id":64,"nodeType":"ParameterList","parameters":[{"constant":false,"id":61,"mutability":"mutable","name":"spender","nameLocation":"3813:7:0","nodeType":"VariableDeclaration","scope":68,"src":"3805:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":60,"name":"address","nodeType":"ElementaryTypeName","src":"3805:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":63,"mutability":"mutable","name":"value","nameLocation":"3830:5:0","nodeType":"VariableDeclaration","scope":68,"src":"3822:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":62,"name":"uint256","nodeType":"ElementaryTypeName","src":"3822:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3804:32:0"},"returnParameters":{"id":67,"nodeType":"ParameterList","parameters":[{"constant":false,"id":66,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":68,"src":"3855:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":65,"name":"bool","nodeType":"ElementaryTypeName","src":"3855:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3854:6:0"},"scope":81,"src":"3781:80:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"3867:478:0","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @param data Additional data with no specified format, sent in call to `spender`.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"cae9ca51","id":80,"implemented":false,"kind":"function","modifiers":[],"name":"approveAndCall","nameLocation":"4359:14:0","nodeType":"FunctionDefinition","parameters":{"id":76,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"mutability":"mutable","name":"spender","nameLocation":"4382:7:0","nodeType":"VariableDeclaration","scope":80,"src":"4374:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"4374:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":73,"mutability":"mutable","name":"value","nameLocation":"4399:5:0","nodeType":"VariableDeclaration","scope":80,"src":"4391:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":72,"name":"uint256","nodeType":"ElementaryTypeName","src":"4391:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":75,"mutability":"mutable","name":"data","nameLocation":"4421:4:0","nodeType":"VariableDeclaration","scope":80,"src":"4406:19:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":74,"name":"bytes","nodeType":"ElementaryTypeName","src":"4406:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4373:53:0"},"returnParameters":{"id":79,"nodeType":"ParameterList","parameters":[{"constant":false,"id":78,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":80,"src":"4445:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":77,"name":"bool","nodeType":"ElementaryTypeName","src":"4445:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4444:6:0"},"scope":81,"src":"4350:101:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":82,"src":"568:3885:0","usedErrors":[],"usedEvents":[101,110]}],"src":"107:4347:0"},"id":0},"@openzeppelin/contracts/interfaces/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[2014]},"id":86,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":83,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:1"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../utils/introspection/IERC165.sol","id":85,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":86,"sourceUnit":2015,"src":"132:59:1","symbolAliases":[{"foreign":{"id":84,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2014,"src":"140:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""}],"src":"106:86:1"},"id":1},"@openzeppelin/contracts/interfaces/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","exportedSymbols":{"IERC20":[167]},"id":90,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":87,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"105:24:2"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../token/ERC20/IERC20.sol","id":89,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":90,"sourceUnit":168,"src":"131:49:2","symbolAliases":[{"foreign":{"id":88,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"139:6:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""}],"src":"105:76:2"},"id":2},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[167]},"id":168,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":91,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":92,"nodeType":"StructuredDocumentation","src":"132:71:3","text":" @dev Interface of the ERC-20 standard as defined in the ERC."},"fullyImplemented":false,"id":167,"linearizedBaseContracts":[167],"name":"IERC20","nameLocation":"214:6:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":93,"nodeType":"StructuredDocumentation","src":"227:158:3","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":101,"name":"Transfer","nameLocation":"396:8:3","nodeType":"EventDefinition","parameters":{"id":100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":95,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"421:4:3","nodeType":"VariableDeclaration","scope":101,"src":"405:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":94,"name":"address","nodeType":"ElementaryTypeName","src":"405:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":97,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"443:2:3","nodeType":"VariableDeclaration","scope":101,"src":"427:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":96,"name":"address","nodeType":"ElementaryTypeName","src":"427:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":99,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"455:5:3","nodeType":"VariableDeclaration","scope":101,"src":"447:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":98,"name":"uint256","nodeType":"ElementaryTypeName","src":"447:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"404:57:3"},"src":"390:72:3"},{"anonymous":false,"documentation":{"id":102,"nodeType":"StructuredDocumentation","src":"468:148:3","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":110,"name":"Approval","nameLocation":"627:8:3","nodeType":"EventDefinition","parameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":104,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"652:5:3","nodeType":"VariableDeclaration","scope":110,"src":"636:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":103,"name":"address","nodeType":"ElementaryTypeName","src":"636:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":106,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"675:7:3","nodeType":"VariableDeclaration","scope":110,"src":"659:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":105,"name":"address","nodeType":"ElementaryTypeName","src":"659:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":108,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"692:5:3","nodeType":"VariableDeclaration","scope":110,"src":"684:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":107,"name":"uint256","nodeType":"ElementaryTypeName","src":"684:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"635:63:3"},"src":"621:78:3"},{"documentation":{"id":111,"nodeType":"StructuredDocumentation","src":"705:65:3","text":" @dev Returns the value of tokens in existence."},"functionSelector":"18160ddd","id":116,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"784:11:3","nodeType":"FunctionDefinition","parameters":{"id":112,"nodeType":"ParameterList","parameters":[],"src":"795:2:3"},"returnParameters":{"id":115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":114,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":116,"src":"821:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":113,"name":"uint256","nodeType":"ElementaryTypeName","src":"821:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"820:9:3"},"scope":167,"src":"775:55:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":117,"nodeType":"StructuredDocumentation","src":"836:71:3","text":" @dev Returns the value of tokens owned by `account`."},"functionSelector":"70a08231","id":124,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:3","nodeType":"FunctionDefinition","parameters":{"id":120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":119,"mutability":"mutable","name":"account","nameLocation":"939:7:3","nodeType":"VariableDeclaration","scope":124,"src":"931:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":118,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:3"},"returnParameters":{"id":123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":122,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":124,"src":"971:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":121,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:3"},"scope":167,"src":"912:68:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":125,"nodeType":"StructuredDocumentation","src":"986:213:3","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":134,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:3","nodeType":"FunctionDefinition","parameters":{"id":130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":127,"mutability":"mutable","name":"to","nameLocation":"1230:2:3","nodeType":"VariableDeclaration","scope":134,"src":"1222:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":126,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":129,"mutability":"mutable","name":"value","nameLocation":"1242:5:3","nodeType":"VariableDeclaration","scope":134,"src":"1234:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":128,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:27:3"},"returnParameters":{"id":133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":132,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":134,"src":"1267:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":131,"name":"bool","nodeType":"ElementaryTypeName","src":"1267:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1266:6:3"},"scope":167,"src":"1204:69:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":135,"nodeType":"StructuredDocumentation","src":"1279:264:3","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":144,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1557:9:3","nodeType":"FunctionDefinition","parameters":{"id":140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":137,"mutability":"mutable","name":"owner","nameLocation":"1575:5:3","nodeType":"VariableDeclaration","scope":144,"src":"1567:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":136,"name":"address","nodeType":"ElementaryTypeName","src":"1567:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":139,"mutability":"mutable","name":"spender","nameLocation":"1590:7:3","nodeType":"VariableDeclaration","scope":144,"src":"1582:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":138,"name":"address","nodeType":"ElementaryTypeName","src":"1582:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1566:32:3"},"returnParameters":{"id":143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":142,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":144,"src":"1622:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":141,"name":"uint256","nodeType":"ElementaryTypeName","src":"1622:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1621:9:3"},"scope":167,"src":"1548:83:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":145,"nodeType":"StructuredDocumentation","src":"1637:667:3","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":154,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2318:7:3","nodeType":"FunctionDefinition","parameters":{"id":150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":147,"mutability":"mutable","name":"spender","nameLocation":"2334:7:3","nodeType":"VariableDeclaration","scope":154,"src":"2326:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":146,"name":"address","nodeType":"ElementaryTypeName","src":"2326:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":149,"mutability":"mutable","name":"value","nameLocation":"2351:5:3","nodeType":"VariableDeclaration","scope":154,"src":"2343:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":148,"name":"uint256","nodeType":"ElementaryTypeName","src":"2343:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2325:32:3"},"returnParameters":{"id":153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":152,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":154,"src":"2376:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":151,"name":"bool","nodeType":"ElementaryTypeName","src":"2376:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2375:6:3"},"scope":167,"src":"2309:73:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":155,"nodeType":"StructuredDocumentation","src":"2388:297:3","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":166,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2699:12:3","nodeType":"FunctionDefinition","parameters":{"id":162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":157,"mutability":"mutable","name":"from","nameLocation":"2720:4:3","nodeType":"VariableDeclaration","scope":166,"src":"2712:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":156,"name":"address","nodeType":"ElementaryTypeName","src":"2712:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":159,"mutability":"mutable","name":"to","nameLocation":"2734:2:3","nodeType":"VariableDeclaration","scope":166,"src":"2726:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":158,"name":"address","nodeType":"ElementaryTypeName","src":"2726:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":161,"mutability":"mutable","name":"value","nameLocation":"2746:5:3","nodeType":"VariableDeclaration","scope":166,"src":"2738:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":160,"name":"uint256","nodeType":"ElementaryTypeName","src":"2738:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2711:41:3"},"returnParameters":{"id":165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":164,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":166,"src":"2771:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":163,"name":"bool","nodeType":"ElementaryTypeName","src":"2771:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2770:6:3"},"scope":167,"src":"2690:87:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":168,"src":"204:2575:3","usedErrors":[],"usedEvents":[101,110]}],"src":"106:2674:3"},"id":3},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"Address":[837],"IERC1363":[81],"IERC20":[167],"SafeERC20":[578]},"id":579,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":169,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:4"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":171,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":579,"sourceUnit":168,"src":"141:37:4","symbolAliases":[{"foreign":{"id":170,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"149:6:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC1363.sol","file":"../../../interfaces/IERC1363.sol","id":173,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":579,"sourceUnit":82,"src":"179:58:4","symbolAliases":[{"foreign":{"id":172,"name":"IERC1363","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":81,"src":"187:8:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../../utils/Address.sol","id":175,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":579,"sourceUnit":838,"src":"238:51:4","symbolAliases":[{"foreign":{"id":174,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"246:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":176,"nodeType":"StructuredDocumentation","src":"291:458:4","text":" @title SafeERC20\n @dev Wrappers around ERC-20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":578,"linearizedBaseContracts":[578],"name":"SafeERC20","nameLocation":"758:9:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":177,"nodeType":"StructuredDocumentation","src":"774:65:4","text":" @dev An operation with an ERC-20 token failed."},"errorSelector":"5274afe7","id":181,"name":"SafeERC20FailedOperation","nameLocation":"850:24:4","nodeType":"ErrorDefinition","parameters":{"id":180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":179,"mutability":"mutable","name":"token","nameLocation":"883:5:4","nodeType":"VariableDeclaration","scope":181,"src":"875:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":178,"name":"address","nodeType":"ElementaryTypeName","src":"875:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"874:15:4"},"src":"844:46:4"},{"documentation":{"id":182,"nodeType":"StructuredDocumentation","src":"896:71:4","text":" @dev Indicates a failed `decreaseAllowance` request."},"errorSelector":"e570110f","id":190,"name":"SafeERC20FailedDecreaseAllowance","nameLocation":"978:32:4","nodeType":"ErrorDefinition","parameters":{"id":189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":184,"mutability":"mutable","name":"spender","nameLocation":"1019:7:4","nodeType":"VariableDeclaration","scope":190,"src":"1011:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":183,"name":"address","nodeType":"ElementaryTypeName","src":"1011:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":186,"mutability":"mutable","name":"currentAllowance","nameLocation":"1036:16:4","nodeType":"VariableDeclaration","scope":190,"src":"1028:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":185,"name":"uint256","nodeType":"ElementaryTypeName","src":"1028:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":188,"mutability":"mutable","name":"requestedDecrease","nameLocation":"1062:17:4","nodeType":"VariableDeclaration","scope":190,"src":"1054:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":187,"name":"uint256","nodeType":"ElementaryTypeName","src":"1054:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1010:70:4"},"src":"972:109:4"},{"body":{"id":213,"nodeType":"Block","src":"1343:88:4","statements":[{"expression":{"arguments":[{"id":202,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"1373:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}},{"arguments":[{"expression":{"id":205,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"1395:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1401:8:4","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":134,"src":"1395:14:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},{"components":[{"id":207,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":196,"src":"1412:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":208,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"1416:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":209,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1411:11:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}],"expression":{"id":203,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1380:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":204,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1384:10:4","memberName":"encodeCall","nodeType":"MemberAccess","src":"1380:14:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1380:43:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":201,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"1353:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1353:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":212,"nodeType":"ExpressionStatement","src":"1353:71:4"}]},"documentation":{"id":191,"nodeType":"StructuredDocumentation","src":"1087:179:4","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":214,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"1280:12:4","nodeType":"FunctionDefinition","parameters":{"id":199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":194,"mutability":"mutable","name":"token","nameLocation":"1300:5:4","nodeType":"VariableDeclaration","scope":214,"src":"1293:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"},"typeName":{"id":193,"nodeType":"UserDefinedTypeName","pathNode":{"id":192,"name":"IERC20","nameLocations":["1293:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":167,"src":"1293:6:4"},"referencedDeclaration":167,"src":"1293:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":196,"mutability":"mutable","name":"to","nameLocation":"1315:2:4","nodeType":"VariableDeclaration","scope":214,"src":"1307:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":195,"name":"address","nodeType":"ElementaryTypeName","src":"1307:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":198,"mutability":"mutable","name":"value","nameLocation":"1327:5:4","nodeType":"VariableDeclaration","scope":214,"src":"1319:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":197,"name":"uint256","nodeType":"ElementaryTypeName","src":"1319:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1292:41:4"},"returnParameters":{"id":200,"nodeType":"ParameterList","parameters":[],"src":"1343:0:4"},"scope":578,"src":"1271:160:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":240,"nodeType":"Block","src":"1760:98:4","statements":[{"expression":{"arguments":[{"id":228,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"1790:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}},{"arguments":[{"expression":{"id":231,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"1812:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}},"id":232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1818:12:4","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":166,"src":"1812:18:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},{"components":[{"id":233,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"1833:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":234,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"1839:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":235,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"1843:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":236,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1832:17:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$_t_uint256_$","typeString":"tuple(address,address,uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_address_$_t_uint256_$","typeString":"tuple(address,address,uint256)"}],"expression":{"id":229,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1797:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1801:10:4","memberName":"encodeCall","nodeType":"MemberAccess","src":"1797:14:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1797:53:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":227,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"1770:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1770:81:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":239,"nodeType":"ExpressionStatement","src":"1770:81:4"}]},"documentation":{"id":215,"nodeType":"StructuredDocumentation","src":"1437:228:4","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":241,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1679:16:4","nodeType":"FunctionDefinition","parameters":{"id":225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":218,"mutability":"mutable","name":"token","nameLocation":"1703:5:4","nodeType":"VariableDeclaration","scope":241,"src":"1696:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"},"typeName":{"id":217,"nodeType":"UserDefinedTypeName","pathNode":{"id":216,"name":"IERC20","nameLocations":["1696:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":167,"src":"1696:6:4"},"referencedDeclaration":167,"src":"1696:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":220,"mutability":"mutable","name":"from","nameLocation":"1718:4:4","nodeType":"VariableDeclaration","scope":241,"src":"1710:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":219,"name":"address","nodeType":"ElementaryTypeName","src":"1710:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":222,"mutability":"mutable","name":"to","nameLocation":"1732:2:4","nodeType":"VariableDeclaration","scope":241,"src":"1724:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":221,"name":"address","nodeType":"ElementaryTypeName","src":"1724:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":224,"mutability":"mutable","name":"value","nameLocation":"1744:5:4","nodeType":"VariableDeclaration","scope":241,"src":"1736:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":223,"name":"uint256","nodeType":"ElementaryTypeName","src":"1736:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1695:55:4"},"returnParameters":{"id":226,"nodeType":"ParameterList","parameters":[],"src":"1760:0:4"},"scope":578,"src":"1670:188:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":271,"nodeType":"Block","src":"2600:139:4","statements":[{"assignments":[253],"declarations":[{"constant":false,"id":253,"mutability":"mutable","name":"oldAllowance","nameLocation":"2618:12:4","nodeType":"VariableDeclaration","scope":271,"src":"2610:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":252,"name":"uint256","nodeType":"ElementaryTypeName","src":"2610:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":262,"initialValue":{"arguments":[{"arguments":[{"id":258,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2657:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$578","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$578","typeString":"library SafeERC20"}],"id":257,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2649:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":256,"name":"address","nodeType":"ElementaryTypeName","src":"2649:7:4","typeDescriptions":{}}},"id":259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2649:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":260,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"2664:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":254,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":245,"src":"2633:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}},"id":255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2639:9:4","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":144,"src":"2633:15:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2633:39:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2610:62:4"},{"expression":{"arguments":[{"id":264,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":245,"src":"2695:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}},{"id":265,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"2702:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":266,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"2711:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":267,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":249,"src":"2726:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2711:20:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":263,"name":"forceApprove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":362,"src":"2682:12:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2682:50:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":270,"nodeType":"ExpressionStatement","src":"2682:50:4"}]},"documentation":{"id":242,"nodeType":"StructuredDocumentation","src":"1864:645:4","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."},"id":272,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2523:21:4","nodeType":"FunctionDefinition","parameters":{"id":250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":245,"mutability":"mutable","name":"token","nameLocation":"2552:5:4","nodeType":"VariableDeclaration","scope":272,"src":"2545:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"},"typeName":{"id":244,"nodeType":"UserDefinedTypeName","pathNode":{"id":243,"name":"IERC20","nameLocations":["2545:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":167,"src":"2545:6:4"},"referencedDeclaration":167,"src":"2545:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":247,"mutability":"mutable","name":"spender","nameLocation":"2567:7:4","nodeType":"VariableDeclaration","scope":272,"src":"2559:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":246,"name":"address","nodeType":"ElementaryTypeName","src":"2559:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":249,"mutability":"mutable","name":"value","nameLocation":"2584:5:4","nodeType":"VariableDeclaration","scope":272,"src":"2576:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":248,"name":"uint256","nodeType":"ElementaryTypeName","src":"2576:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2544:46:4"},"returnParameters":{"id":251,"nodeType":"ParameterList","parameters":[],"src":"2600:0:4"},"scope":578,"src":"2514:225:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":314,"nodeType":"Block","src":"3505:370:4","statements":[{"id":313,"nodeType":"UncheckedBlock","src":"3515:354:4","statements":[{"assignments":[284],"declarations":[{"constant":false,"id":284,"mutability":"mutable","name":"currentAllowance","nameLocation":"3547:16:4","nodeType":"VariableDeclaration","scope":313,"src":"3539:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":283,"name":"uint256","nodeType":"ElementaryTypeName","src":"3539:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":293,"initialValue":{"arguments":[{"arguments":[{"id":289,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3590:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$578","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$578","typeString":"library SafeERC20"}],"id":288,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3582:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":287,"name":"address","nodeType":"ElementaryTypeName","src":"3582:7:4","typeDescriptions":{}}},"id":290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3582:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":291,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"3597:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":285,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"3566:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}},"id":286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3572:9:4","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":144,"src":"3566:15:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3566:39:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3539:66:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":294,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"3623:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":295,"name":"requestedDecrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"3642:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3623:36:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":304,"nodeType":"IfStatement","src":"3619:160:4","trueBody":{"id":303,"nodeType":"Block","src":"3661:118:4","statements":[{"errorCall":{"arguments":[{"id":298,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"3719:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":299,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"3728:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":300,"name":"requestedDecrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"3746:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":297,"name":"SafeERC20FailedDecreaseAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"3686:32:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) pure"}},"id":301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3686:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":302,"nodeType":"RevertStatement","src":"3679:85:4"}]}},{"expression":{"arguments":[{"id":306,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"3805:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}},{"id":307,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"3812:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":308,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"3821:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":309,"name":"requestedDecrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"3840:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3821:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":305,"name":"forceApprove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":362,"src":"3792:12:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3792:66:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":312,"nodeType":"ExpressionStatement","src":"3792:66:4"}]}]},"documentation":{"id":273,"nodeType":"StructuredDocumentation","src":"2745:657:4","text":" @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n value, non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."},"id":315,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3416:21:4","nodeType":"FunctionDefinition","parameters":{"id":281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":276,"mutability":"mutable","name":"token","nameLocation":"3445:5:4","nodeType":"VariableDeclaration","scope":315,"src":"3438:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"},"typeName":{"id":275,"nodeType":"UserDefinedTypeName","pathNode":{"id":274,"name":"IERC20","nameLocations":["3438:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":167,"src":"3438:6:4"},"referencedDeclaration":167,"src":"3438:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":278,"mutability":"mutable","name":"spender","nameLocation":"3460:7:4","nodeType":"VariableDeclaration","scope":315,"src":"3452:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":277,"name":"address","nodeType":"ElementaryTypeName","src":"3452:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":280,"mutability":"mutable","name":"requestedDecrease","nameLocation":"3477:17:4","nodeType":"VariableDeclaration","scope":315,"src":"3469:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":279,"name":"uint256","nodeType":"ElementaryTypeName","src":"3469:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3437:58:4"},"returnParameters":{"id":282,"nodeType":"ParameterList","parameters":[],"src":"3505:0:4"},"scope":578,"src":"3407:468:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":361,"nodeType":"Block","src":"4529:303:4","statements":[{"assignments":[327],"declarations":[{"constant":false,"id":327,"mutability":"mutable","name":"approvalCall","nameLocation":"4552:12:4","nodeType":"VariableDeclaration","scope":361,"src":"4539:25:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":326,"name":"bytes","nodeType":"ElementaryTypeName","src":"4539:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":336,"initialValue":{"arguments":[{"expression":{"id":330,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"4582:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}},"id":331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4588:7:4","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":154,"src":"4582:13:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},{"components":[{"id":332,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":321,"src":"4598:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":333,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"4607:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":334,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4597:16:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}],"expression":{"id":328,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4567:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":329,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4571:10:4","memberName":"encodeCall","nodeType":"MemberAccess","src":"4567:14:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4567:47:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4539:75:4"},{"condition":{"id":341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4629:45:4","subExpression":{"arguments":[{"id":338,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"4654:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}},{"id":339,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"4661:12:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":337,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"4630:23:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20,bytes memory) returns (bool)"}},"id":340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4630:44:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":360,"nodeType":"IfStatement","src":"4625:201:4","trueBody":{"id":359,"nodeType":"Block","src":"4676:150:4","statements":[{"expression":{"arguments":[{"id":343,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"4710:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}},{"arguments":[{"expression":{"id":346,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"4732:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4738:7:4","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":154,"src":"4732:13:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},{"components":[{"id":348,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":321,"src":"4748:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4757:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":350,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4747:12:4","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_rational_0_by_1_$","typeString":"tuple(address,int_const 0)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_rational_0_by_1_$","typeString":"tuple(address,int_const 0)"}],"expression":{"id":344,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4717:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":345,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4721:10:4","memberName":"encodeCall","nodeType":"MemberAccess","src":"4717:14:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4717:43:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":342,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"4690:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4690:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":353,"nodeType":"ExpressionStatement","src":"4690:71:4"},{"expression":{"arguments":[{"id":355,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"4795:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}},{"id":356,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"4802:12:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":354,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"4775:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4775:40:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":358,"nodeType":"ExpressionStatement","src":"4775:40:4"}]}}]},"documentation":{"id":316,"nodeType":"StructuredDocumentation","src":"3881:566:4","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT.\n NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n set here."},"id":362,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"4461:12:4","nodeType":"FunctionDefinition","parameters":{"id":324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":319,"mutability":"mutable","name":"token","nameLocation":"4481:5:4","nodeType":"VariableDeclaration","scope":362,"src":"4474:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"},"typeName":{"id":318,"nodeType":"UserDefinedTypeName","pathNode":{"id":317,"name":"IERC20","nameLocations":["4474:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":167,"src":"4474:6:4"},"referencedDeclaration":167,"src":"4474:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":321,"mutability":"mutable","name":"spender","nameLocation":"4496:7:4","nodeType":"VariableDeclaration","scope":362,"src":"4488:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":320,"name":"address","nodeType":"ElementaryTypeName","src":"4488:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":323,"mutability":"mutable","name":"value","nameLocation":"4513:5:4","nodeType":"VariableDeclaration","scope":362,"src":"4505:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":322,"name":"uint256","nodeType":"ElementaryTypeName","src":"4505:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4473:46:4"},"returnParameters":{"id":325,"nodeType":"ParameterList","parameters":[],"src":"4529:0:4"},"scope":578,"src":"4452:380:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":404,"nodeType":"Block","src":"5279:219:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":375,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"5293:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5296:4:4","memberName":"code","nodeType":"MemberAccess","src":"5293:7:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5301:6:4","memberName":"length","nodeType":"MemberAccess","src":"5293:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5311:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5293:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"id":393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5379:39:4","subExpression":{"arguments":[{"id":389,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"5402:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":390,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"5406:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":391,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"5413:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":387,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"5380:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$81","typeString":"contract IERC1363"}},"id":388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5386:15:4","memberName":"transferAndCall","nodeType":"MemberAccess","referencedDeclaration":32,"src":"5380:21:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory) external returns (bool)"}},"id":392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5380:38:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":402,"nodeType":"IfStatement","src":"5375:117:4","trueBody":{"id":401,"nodeType":"Block","src":"5420:72:4","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":397,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"5474:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$81","typeString":"contract IERC1363"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$81","typeString":"contract IERC1363"}],"id":396,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5466:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":395,"name":"address","nodeType":"ElementaryTypeName","src":"5466:7:4","typeDescriptions":{}}},"id":398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5466:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":394,"name":"SafeERC20FailedOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"5441:24:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5441:40:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":400,"nodeType":"RevertStatement","src":"5434:47:4"}]}},"id":403,"nodeType":"IfStatement","src":"5289:203:4","trueBody":{"id":386,"nodeType":"Block","src":"5314:55:4","statements":[{"expression":{"arguments":[{"id":381,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"5341:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$81","typeString":"contract IERC1363"}},{"id":382,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"5348:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":383,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"5352:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$81","typeString":"contract IERC1363"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":380,"name":"safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"5328:12:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5328:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":385,"nodeType":"ExpressionStatement","src":"5328:30:4"}]}}]},"documentation":{"id":363,"nodeType":"StructuredDocumentation","src":"4838:333:4","text":" @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."},"id":405,"implemented":true,"kind":"function","modifiers":[],"name":"transferAndCallRelaxed","nameLocation":"5185:22:4","nodeType":"FunctionDefinition","parameters":{"id":373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":366,"mutability":"mutable","name":"token","nameLocation":"5217:5:4","nodeType":"VariableDeclaration","scope":405,"src":"5208:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$81","typeString":"contract IERC1363"},"typeName":{"id":365,"nodeType":"UserDefinedTypeName","pathNode":{"id":364,"name":"IERC1363","nameLocations":["5208:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":81,"src":"5208:8:4"},"referencedDeclaration":81,"src":"5208:8:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$81","typeString":"contract IERC1363"}},"visibility":"internal"},{"constant":false,"id":368,"mutability":"mutable","name":"to","nameLocation":"5232:2:4","nodeType":"VariableDeclaration","scope":405,"src":"5224:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":367,"name":"address","nodeType":"ElementaryTypeName","src":"5224:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":370,"mutability":"mutable","name":"value","nameLocation":"5244:5:4","nodeType":"VariableDeclaration","scope":405,"src":"5236:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":369,"name":"uint256","nodeType":"ElementaryTypeName","src":"5236:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":372,"mutability":"mutable","name":"data","nameLocation":"5264:4:4","nodeType":"VariableDeclaration","scope":405,"src":"5251:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":371,"name":"bytes","nodeType":"ElementaryTypeName","src":"5251:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5207:62:4"},"returnParameters":{"id":374,"nodeType":"ParameterList","parameters":[],"src":"5279:0:4"},"scope":578,"src":"5176:322:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":451,"nodeType":"Block","src":"6017:239:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":420,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"6031:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6034:4:4","memberName":"code","nodeType":"MemberAccess","src":"6031:7:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6039:6:4","memberName":"length","nodeType":"MemberAccess","src":"6031:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6049:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6031:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"id":440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6127:49:4","subExpression":{"arguments":[{"id":435,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"6154:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":436,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"6160:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":437,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"6164:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":438,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":417,"src":"6171:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":433,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"6128:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$81","typeString":"contract IERC1363"}},"id":434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6134:19:4","memberName":"transferFromAndCall","nodeType":"MemberAccess","referencedDeclaration":58,"src":"6128:25:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) external returns (bool)"}},"id":439,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6128:48:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":449,"nodeType":"IfStatement","src":"6123:127:4","trueBody":{"id":448,"nodeType":"Block","src":"6178:72:4","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":444,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"6232:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$81","typeString":"contract IERC1363"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$81","typeString":"contract IERC1363"}],"id":443,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6224:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":442,"name":"address","nodeType":"ElementaryTypeName","src":"6224:7:4","typeDescriptions":{}}},"id":445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6224:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":441,"name":"SafeERC20FailedOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"6199:24:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6199:40:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":447,"nodeType":"RevertStatement","src":"6192:47:4"}]}},"id":450,"nodeType":"IfStatement","src":"6027:223:4","trueBody":{"id":432,"nodeType":"Block","src":"6052:65:4","statements":[{"expression":{"arguments":[{"id":426,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"6083:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$81","typeString":"contract IERC1363"}},{"id":427,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"6090:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":428,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"6096:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":429,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"6100:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$81","typeString":"contract IERC1363"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":425,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"6066:16:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6066:40:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":431,"nodeType":"ExpressionStatement","src":"6066:40:4"}]}}]},"documentation":{"id":406,"nodeType":"StructuredDocumentation","src":"5504:341:4","text":" @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."},"id":452,"implemented":true,"kind":"function","modifiers":[],"name":"transferFromAndCallRelaxed","nameLocation":"5859:26:4","nodeType":"FunctionDefinition","parameters":{"id":418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":409,"mutability":"mutable","name":"token","nameLocation":"5904:5:4","nodeType":"VariableDeclaration","scope":452,"src":"5895:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$81","typeString":"contract IERC1363"},"typeName":{"id":408,"nodeType":"UserDefinedTypeName","pathNode":{"id":407,"name":"IERC1363","nameLocations":["5895:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":81,"src":"5895:8:4"},"referencedDeclaration":81,"src":"5895:8:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$81","typeString":"contract IERC1363"}},"visibility":"internal"},{"constant":false,"id":411,"mutability":"mutable","name":"from","nameLocation":"5927:4:4","nodeType":"VariableDeclaration","scope":452,"src":"5919:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":410,"name":"address","nodeType":"ElementaryTypeName","src":"5919:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":413,"mutability":"mutable","name":"to","nameLocation":"5949:2:4","nodeType":"VariableDeclaration","scope":452,"src":"5941:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":412,"name":"address","nodeType":"ElementaryTypeName","src":"5941:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":415,"mutability":"mutable","name":"value","nameLocation":"5969:5:4","nodeType":"VariableDeclaration","scope":452,"src":"5961:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":414,"name":"uint256","nodeType":"ElementaryTypeName","src":"5961:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":417,"mutability":"mutable","name":"data","nameLocation":"5997:4:4","nodeType":"VariableDeclaration","scope":452,"src":"5984:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":416,"name":"bytes","nodeType":"ElementaryTypeName","src":"5984:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5885:122:4"},"returnParameters":{"id":419,"nodeType":"ParameterList","parameters":[],"src":"6017:0:4"},"scope":578,"src":"5850:406:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":494,"nodeType":"Block","src":"7023:218:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":465,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"7037:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7040:4:4","memberName":"code","nodeType":"MemberAccess","src":"7037:7:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7045:6:4","memberName":"length","nodeType":"MemberAccess","src":"7037:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7055:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7037:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"id":483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7123:38:4","subExpression":{"arguments":[{"id":479,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"7145:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":480,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":460,"src":"7149:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":481,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"7156:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":477,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"7124:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$81","typeString":"contract IERC1363"}},"id":478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7130:14:4","memberName":"approveAndCall","nodeType":"MemberAccess","referencedDeclaration":80,"src":"7124:20:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory) external returns (bool)"}},"id":482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7124:37:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":492,"nodeType":"IfStatement","src":"7119:116:4","trueBody":{"id":491,"nodeType":"Block","src":"7163:72:4","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":487,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"7217:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$81","typeString":"contract IERC1363"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$81","typeString":"contract IERC1363"}],"id":486,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7209:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":485,"name":"address","nodeType":"ElementaryTypeName","src":"7209:7:4","typeDescriptions":{}}},"id":488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7209:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":484,"name":"SafeERC20FailedOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"7184:24:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7184:40:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":490,"nodeType":"RevertStatement","src":"7177:47:4"}]}},"id":493,"nodeType":"IfStatement","src":"7033:202:4","trueBody":{"id":476,"nodeType":"Block","src":"7058:55:4","statements":[{"expression":{"arguments":[{"id":471,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"7085:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$81","typeString":"contract IERC1363"}},{"id":472,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"7092:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":473,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":460,"src":"7096:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$81","typeString":"contract IERC1363"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":470,"name":"forceApprove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":362,"src":"7072:12:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7072:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":475,"nodeType":"ExpressionStatement","src":"7072:30:4"}]}}]},"documentation":{"id":453,"nodeType":"StructuredDocumentation","src":"6262:654:4","text":" @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n once without retrying, and relies on the returned value to be true.\n Reverts if the returned value is other than `true`."},"id":495,"implemented":true,"kind":"function","modifiers":[],"name":"approveAndCallRelaxed","nameLocation":"6930:21:4","nodeType":"FunctionDefinition","parameters":{"id":463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":456,"mutability":"mutable","name":"token","nameLocation":"6961:5:4","nodeType":"VariableDeclaration","scope":495,"src":"6952:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$81","typeString":"contract IERC1363"},"typeName":{"id":455,"nodeType":"UserDefinedTypeName","pathNode":{"id":454,"name":"IERC1363","nameLocations":["6952:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":81,"src":"6952:8:4"},"referencedDeclaration":81,"src":"6952:8:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$81","typeString":"contract IERC1363"}},"visibility":"internal"},{"constant":false,"id":458,"mutability":"mutable","name":"to","nameLocation":"6976:2:4","nodeType":"VariableDeclaration","scope":495,"src":"6968:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":457,"name":"address","nodeType":"ElementaryTypeName","src":"6968:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":460,"mutability":"mutable","name":"value","nameLocation":"6988:5:4","nodeType":"VariableDeclaration","scope":495,"src":"6980:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":459,"name":"uint256","nodeType":"ElementaryTypeName","src":"6980:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":462,"mutability":"mutable","name":"data","nameLocation":"7008:4:4","nodeType":"VariableDeclaration","scope":495,"src":"6995:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":461,"name":"bytes","nodeType":"ElementaryTypeName","src":"6995:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6951:62:4"},"returnParameters":{"id":464,"nodeType":"ParameterList","parameters":[],"src":"7023:0:4"},"scope":578,"src":"6921:320:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":535,"nodeType":"Block","src":"7808:650:4","statements":[{"assignments":[505],"declarations":[{"constant":false,"id":505,"mutability":"mutable","name":"returnSize","nameLocation":"7826:10:4","nodeType":"VariableDeclaration","scope":535,"src":"7818:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":504,"name":"uint256","nodeType":"ElementaryTypeName","src":"7818:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":506,"nodeType":"VariableDeclarationStatement","src":"7818:18:4"},{"assignments":[508],"declarations":[{"constant":false,"id":508,"mutability":"mutable","name":"returnValue","nameLocation":"7854:11:4","nodeType":"VariableDeclaration","scope":535,"src":"7846:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":507,"name":"uint256","nodeType":"ElementaryTypeName","src":"7846:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":509,"nodeType":"VariableDeclarationStatement","src":"7846:19:4"},{"AST":{"nodeType":"YulBlock","src":"7900:396:4","statements":[{"nodeType":"YulVariableDeclaration","src":"7914:75:4","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"7934:3:4"},"nodeType":"YulFunctionCall","src":"7934:5:4"},{"name":"token","nodeType":"YulIdentifier","src":"7941:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"7948:1:4","type":"","value":"0"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7955:4:4"},{"kind":"number","nodeType":"YulLiteral","src":"7961:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7951:3:4"},"nodeType":"YulFunctionCall","src":"7951:15:4"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7974:4:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7968:5:4"},"nodeType":"YulFunctionCall","src":"7968:11:4"},{"kind":"number","nodeType":"YulLiteral","src":"7981:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7984:4:4","type":"","value":"0x20"}],"functionName":{"name":"call","nodeType":"YulIdentifier","src":"7929:4:4"},"nodeType":"YulFunctionCall","src":"7929:60:4"},"variables":[{"name":"success","nodeType":"YulTypedName","src":"7918:7:4","type":""}]},{"body":{"nodeType":"YulBlock","src":"8050:157:4","statements":[{"nodeType":"YulVariableDeclaration","src":"8068:22:4","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8085:4:4","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8079:5:4"},"nodeType":"YulFunctionCall","src":"8079:11:4"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"8072:3:4","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8122:3:4"},{"kind":"number","nodeType":"YulLiteral","src":"8127:1:4","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"8130:14:4"},"nodeType":"YulFunctionCall","src":"8130:16:4"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"8107:14:4"},"nodeType":"YulFunctionCall","src":"8107:40:4"},"nodeType":"YulExpressionStatement","src":"8107:40:4"},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8171:3:4"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"8176:14:4"},"nodeType":"YulFunctionCall","src":"8176:16:4"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8164:6:4"},"nodeType":"YulFunctionCall","src":"8164:29:4"},"nodeType":"YulExpressionStatement","src":"8164:29:4"}]},"condition":{"arguments":[{"name":"success","nodeType":"YulIdentifier","src":"8041:7:4"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8034:6:4"},"nodeType":"YulFunctionCall","src":"8034:15:4"},"nodeType":"YulIf","src":"8031:176:4"},{"nodeType":"YulAssignment","src":"8220:30:4","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"8234:14:4"},"nodeType":"YulFunctionCall","src":"8234:16:4"},"variableNames":[{"name":"returnSize","nodeType":"YulIdentifier","src":"8220:10:4"}]},{"nodeType":"YulAssignment","src":"8263:23:4","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8284:1:4","type":"","value":"0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8278:5:4"},"nodeType":"YulFunctionCall","src":"8278:8:4"},"variableNames":[{"name":"returnValue","nodeType":"YulIdentifier","src":"8263:11:4"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":501,"isOffset":false,"isSlot":false,"src":"7955:4:4","valueSize":1},{"declaration":501,"isOffset":false,"isSlot":false,"src":"7974:4:4","valueSize":1},{"declaration":505,"isOffset":false,"isSlot":false,"src":"8220:10:4","valueSize":1},{"declaration":508,"isOffset":false,"isSlot":false,"src":"8263:11:4","valueSize":1},{"declaration":499,"isOffset":false,"isSlot":false,"src":"7941:5:4","valueSize":1}],"flags":["memory-safe"],"id":510,"nodeType":"InlineAssembly","src":"7875:421:4"},{"condition":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":511,"name":"returnSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"8310:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8324:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8310:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":522,"name":"returnValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"8362:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"31","id":523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8377:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8362:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8310:68:4","trueExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"arguments":[{"id":516,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":499,"src":"8336:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}],"id":515,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8328:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":514,"name":"address","nodeType":"ElementaryTypeName","src":"8328:7:4","typeDescriptions":{}}},"id":517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8328:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8343:4:4","memberName":"code","nodeType":"MemberAccess","src":"8328:19:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8348:6:4","memberName":"length","nodeType":"MemberAccess","src":"8328:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8358:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8328:31:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":534,"nodeType":"IfStatement","src":"8306:146:4","trueBody":{"id":533,"nodeType":"Block","src":"8380:72:4","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":529,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":499,"src":"8434:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}],"id":528,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8426:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":527,"name":"address","nodeType":"ElementaryTypeName","src":"8426:7:4","typeDescriptions":{}}},"id":530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8426:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":526,"name":"SafeERC20FailedOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"8401:24:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8401:40:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":532,"nodeType":"RevertStatement","src":"8394:47:4"}]}}]},"documentation":{"id":496,"nodeType":"StructuredDocumentation","src":"7247:486:4","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements."},"id":536,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"7747:19:4","nodeType":"FunctionDefinition","parameters":{"id":502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":499,"mutability":"mutable","name":"token","nameLocation":"7774:5:4","nodeType":"VariableDeclaration","scope":536,"src":"7767:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"},"typeName":{"id":498,"nodeType":"UserDefinedTypeName","pathNode":{"id":497,"name":"IERC20","nameLocations":["7767:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":167,"src":"7767:6:4"},"referencedDeclaration":167,"src":"7767:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":501,"mutability":"mutable","name":"data","nameLocation":"7794:4:4","nodeType":"VariableDeclaration","scope":536,"src":"7781:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":500,"name":"bytes","nodeType":"ElementaryTypeName","src":"7781:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7766:33:4"},"returnParameters":{"id":503,"nodeType":"ParameterList","parameters":[],"src":"7808:0:4"},"scope":578,"src":"7738:720:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":576,"nodeType":"Block","src":"9049:391:4","statements":[{"assignments":[548],"declarations":[{"constant":false,"id":548,"mutability":"mutable","name":"success","nameLocation":"9064:7:4","nodeType":"VariableDeclaration","scope":576,"src":"9059:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":547,"name":"bool","nodeType":"ElementaryTypeName","src":"9059:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":549,"nodeType":"VariableDeclarationStatement","src":"9059:12:4"},{"assignments":[551],"declarations":[{"constant":false,"id":551,"mutability":"mutable","name":"returnSize","nameLocation":"9089:10:4","nodeType":"VariableDeclaration","scope":576,"src":"9081:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":550,"name":"uint256","nodeType":"ElementaryTypeName","src":"9081:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":552,"nodeType":"VariableDeclarationStatement","src":"9081:18:4"},{"assignments":[554],"declarations":[{"constant":false,"id":554,"mutability":"mutable","name":"returnValue","nameLocation":"9117:11:4","nodeType":"VariableDeclaration","scope":576,"src":"9109:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":553,"name":"uint256","nodeType":"ElementaryTypeName","src":"9109:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":555,"nodeType":"VariableDeclarationStatement","src":"9109:19:4"},{"AST":{"nodeType":"YulBlock","src":"9163:174:4","statements":[{"nodeType":"YulAssignment","src":"9177:71:4","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"9193:3:4"},"nodeType":"YulFunctionCall","src":"9193:5:4"},{"name":"token","nodeType":"YulIdentifier","src":"9200:5:4"},{"kind":"number","nodeType":"YulLiteral","src":"9207:1:4","type":"","value":"0"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"9214:4:4"},{"kind":"number","nodeType":"YulLiteral","src":"9220:4:4","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9210:3:4"},"nodeType":"YulFunctionCall","src":"9210:15:4"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"9233:4:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9227:5:4"},"nodeType":"YulFunctionCall","src":"9227:11:4"},{"kind":"number","nodeType":"YulLiteral","src":"9240:1:4","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9243:4:4","type":"","value":"0x20"}],"functionName":{"name":"call","nodeType":"YulIdentifier","src":"9188:4:4"},"nodeType":"YulFunctionCall","src":"9188:60:4"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"9177:7:4"}]},{"nodeType":"YulAssignment","src":"9261:30:4","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"9275:14:4"},"nodeType":"YulFunctionCall","src":"9275:16:4"},"variableNames":[{"name":"returnSize","nodeType":"YulIdentifier","src":"9261:10:4"}]},{"nodeType":"YulAssignment","src":"9304:23:4","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9325:1:4","type":"","value":"0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9319:5:4"},"nodeType":"YulFunctionCall","src":"9319:8:4"},"variableNames":[{"name":"returnValue","nodeType":"YulIdentifier","src":"9304:11:4"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":542,"isOffset":false,"isSlot":false,"src":"9214:4:4","valueSize":1},{"declaration":542,"isOffset":false,"isSlot":false,"src":"9233:4:4","valueSize":1},{"declaration":551,"isOffset":false,"isSlot":false,"src":"9261:10:4","valueSize":1},{"declaration":554,"isOffset":false,"isSlot":false,"src":"9304:11:4","valueSize":1},{"declaration":548,"isOffset":false,"isSlot":false,"src":"9177:7:4","valueSize":1},{"declaration":540,"isOffset":false,"isSlot":false,"src":"9200:5:4","valueSize":1}],"flags":["memory-safe"],"id":556,"nodeType":"InlineAssembly","src":"9138:199:4"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":557,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":548,"src":"9353:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":558,"name":"returnSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":551,"src":"9365:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9379:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9365:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":569,"name":"returnValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"9416:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9431:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9416:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9365:67:4","trueExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"arguments":[{"id":563,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"9391:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}],"id":562,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9383:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":561,"name":"address","nodeType":"ElementaryTypeName","src":"9383:7:4","typeDescriptions":{}}},"id":564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9383:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9398:4:4","memberName":"code","nodeType":"MemberAccess","src":"9383:19:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9403:6:4","memberName":"length","nodeType":"MemberAccess","src":"9383:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9383:30:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":573,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9364:69:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9353:80:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":546,"id":575,"nodeType":"Return","src":"9346:87:4"}]},"documentation":{"id":537,"nodeType":"StructuredDocumentation","src":"8464:491:4","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead."},"id":577,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"8969:23:4","nodeType":"FunctionDefinition","parameters":{"id":543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":540,"mutability":"mutable","name":"token","nameLocation":"9000:5:4","nodeType":"VariableDeclaration","scope":577,"src":"8993:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"},"typeName":{"id":539,"nodeType":"UserDefinedTypeName","pathNode":{"id":538,"name":"IERC20","nameLocations":["8993:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":167,"src":"8993:6:4"},"referencedDeclaration":167,"src":"8993:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":542,"mutability":"mutable","name":"data","nameLocation":"9020:4:4","nodeType":"VariableDeclaration","scope":577,"src":"9007:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":541,"name":"bytes","nodeType":"ElementaryTypeName","src":"9007:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8992:33:4"},"returnParameters":{"id":546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":545,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":577,"src":"9043:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":544,"name":"bool","nodeType":"ElementaryTypeName","src":"9043:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9042:6:4"},"scope":578,"src":"8960:480:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":579,"src":"750:8692:4","usedErrors":[181,190],"usedEvents":[]}],"src":"115:9328:4"},"id":4},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[837],"Errors":[889]},"id":838,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":580,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:5"},{"absolutePath":"@openzeppelin/contracts/utils/Errors.sol","file":"./Errors.sol","id":582,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":838,"sourceUnit":890,"src":"127:36:5","symbolAliases":[{"foreign":{"id":581,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"135:6:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":583,"nodeType":"StructuredDocumentation","src":"165:67:5","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":837,"linearizedBaseContracts":[837],"name":"Address","nameLocation":"241:7:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":584,"nodeType":"StructuredDocumentation","src":"255:75:5","text":" @dev There's no code at `target` (it is not a contract)."},"errorSelector":"9996b315","id":588,"name":"AddressEmptyCode","nameLocation":"341:16:5","nodeType":"ErrorDefinition","parameters":{"id":587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":586,"mutability":"mutable","name":"target","nameLocation":"366:6:5","nodeType":"VariableDeclaration","scope":588,"src":"358:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":585,"name":"address","nodeType":"ElementaryTypeName","src":"358:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"357:16:5"},"src":"335:39:5"},{"body":{"id":634,"nodeType":"Block","src":"1361:278:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":598,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1383:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$837","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$837","typeString":"library Address"}],"id":597,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1375:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":596,"name":"address","nodeType":"ElementaryTypeName","src":"1375:7:5","typeDescriptions":{}}},"id":599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1375:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1389:7:5","memberName":"balance","nodeType":"MemberAccess","src":"1375:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":601,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"1399:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1375:30:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":615,"nodeType":"IfStatement","src":"1371:125:5","trueBody":{"id":614,"nodeType":"Block","src":"1407:89:5","statements":[{"errorCall":{"arguments":[{"expression":{"arguments":[{"id":608,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1463:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$837","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$837","typeString":"library Address"}],"id":607,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1455:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":606,"name":"address","nodeType":"ElementaryTypeName","src":"1455:7:5","typeDescriptions":{}}},"id":609,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1455:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1469:7:5","memberName":"balance","nodeType":"MemberAccess","src":"1455:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":611,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"1478:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":603,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"1428:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Errors_$889_$","typeString":"type(library Errors)"}},"id":605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1435:19:5","memberName":"InsufficientBalance","nodeType":"MemberAccess","referencedDeclaration":877,"src":"1428:26:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1428:57:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":613,"nodeType":"RevertStatement","src":"1421:64:5"}]}},{"assignments":[617,null],"declarations":[{"constant":false,"id":617,"mutability":"mutable","name":"success","nameLocation":"1512:7:5","nodeType":"VariableDeclaration","scope":634,"src":"1507:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":616,"name":"bool","nodeType":"ElementaryTypeName","src":"1507:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":624,"initialValue":{"arguments":[{"hexValue":"","id":622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1555:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":618,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"1525:9:5","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1535:4:5","memberName":"call","nodeType":"MemberAccess","src":"1525:14:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":620,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"1547:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"1525:29:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1525:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1506:52:5"},{"condition":{"id":626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1572:8:5","subExpression":{"id":625,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"1573:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":633,"nodeType":"IfStatement","src":"1568:65:5","trueBody":{"id":632,"nodeType":"Block","src":"1582:51:5","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":627,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"1603:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Errors_$889_$","typeString":"type(library Errors)"}},"id":629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1610:10:5","memberName":"FailedCall","nodeType":"MemberAccess","referencedDeclaration":880,"src":"1603:17:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1603:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":631,"nodeType":"RevertStatement","src":"1596:26:5"}]}}]},"documentation":{"id":589,"nodeType":"StructuredDocumentation","src":"380:905:5","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":635,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"1299:9:5","nodeType":"FunctionDefinition","parameters":{"id":594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":591,"mutability":"mutable","name":"recipient","nameLocation":"1325:9:5","nodeType":"VariableDeclaration","scope":635,"src":"1309:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":590,"name":"address","nodeType":"ElementaryTypeName","src":"1309:15:5","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":593,"mutability":"mutable","name":"amount","nameLocation":"1344:6:5","nodeType":"VariableDeclaration","scope":635,"src":"1336:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":592,"name":"uint256","nodeType":"ElementaryTypeName","src":"1336:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1308:43:5"},"returnParameters":{"id":595,"nodeType":"ParameterList","parameters":[],"src":"1361:0:5"},"scope":837,"src":"1290:349:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":651,"nodeType":"Block","src":"2573:62:5","statements":[{"expression":{"arguments":[{"id":646,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"2612:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":647,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"2620:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2626:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":645,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"2590:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256) returns (bytes memory)"}},"id":649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2590:38:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":644,"id":650,"nodeType":"Return","src":"2583:45:5"}]},"documentation":{"id":636,"nodeType":"StructuredDocumentation","src":"1645:834:5","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason or custom error, it is bubbled\n up by this function (like regular Solidity function calls). However, if\n the call reverted with no returned reason, this function reverts with a\n {Errors.FailedCall} error.\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert."},"id":652,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"2493:12:5","nodeType":"FunctionDefinition","parameters":{"id":641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":638,"mutability":"mutable","name":"target","nameLocation":"2514:6:5","nodeType":"VariableDeclaration","scope":652,"src":"2506:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":637,"name":"address","nodeType":"ElementaryTypeName","src":"2506:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":640,"mutability":"mutable","name":"data","nameLocation":"2535:4:5","nodeType":"VariableDeclaration","scope":652,"src":"2522:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":639,"name":"bytes","nodeType":"ElementaryTypeName","src":"2522:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2505:35:5"},"returnParameters":{"id":644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":643,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":652,"src":"2559:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":642,"name":"bytes","nodeType":"ElementaryTypeName","src":"2559:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2558:14:5"},"scope":837,"src":"2484:151:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":701,"nodeType":"Block","src":"3072:294:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":666,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3094:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$837","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$837","typeString":"library Address"}],"id":665,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3086:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":664,"name":"address","nodeType":"ElementaryTypeName","src":"3086:7:5","typeDescriptions":{}}},"id":667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3086:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3100:7:5","memberName":"balance","nodeType":"MemberAccess","src":"3086:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":669,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"3110:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3086:29:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":683,"nodeType":"IfStatement","src":"3082:123:5","trueBody":{"id":682,"nodeType":"Block","src":"3117:88:5","statements":[{"errorCall":{"arguments":[{"expression":{"arguments":[{"id":676,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3173:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$837","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$837","typeString":"library Address"}],"id":675,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3165:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":674,"name":"address","nodeType":"ElementaryTypeName","src":"3165:7:5","typeDescriptions":{}}},"id":677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3165:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3179:7:5","memberName":"balance","nodeType":"MemberAccess","src":"3165:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":679,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"3188:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":671,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"3138:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Errors_$889_$","typeString":"type(library Errors)"}},"id":673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3145:19:5","memberName":"InsufficientBalance","nodeType":"MemberAccess","referencedDeclaration":877,"src":"3138:26:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3138:56:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":681,"nodeType":"RevertStatement","src":"3131:63:5"}]}},{"assignments":[685,687],"declarations":[{"constant":false,"id":685,"mutability":"mutable","name":"success","nameLocation":"3220:7:5","nodeType":"VariableDeclaration","scope":701,"src":"3215:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":684,"name":"bool","nodeType":"ElementaryTypeName","src":"3215:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":687,"mutability":"mutable","name":"returndata","nameLocation":"3242:10:5","nodeType":"VariableDeclaration","scope":701,"src":"3229:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":686,"name":"bytes","nodeType":"ElementaryTypeName","src":"3229:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":694,"initialValue":{"arguments":[{"id":692,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"3282:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":688,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":655,"src":"3256:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3263:4:5","memberName":"call","nodeType":"MemberAccess","src":"3256:11:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":690,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"3275:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3256:25:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3256:31:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3214:73:5"},{"expression":{"arguments":[{"id":696,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":655,"src":"3331:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":697,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"3339:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":698,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"3348:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":695,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"3304:26:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3304:55:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":663,"id":700,"nodeType":"Return","src":"3297:62:5"}]},"documentation":{"id":653,"nodeType":"StructuredDocumentation","src":"2641:313:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`."},"id":702,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"2968:21:5","nodeType":"FunctionDefinition","parameters":{"id":660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":655,"mutability":"mutable","name":"target","nameLocation":"2998:6:5","nodeType":"VariableDeclaration","scope":702,"src":"2990:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":654,"name":"address","nodeType":"ElementaryTypeName","src":"2990:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":657,"mutability":"mutable","name":"data","nameLocation":"3019:4:5","nodeType":"VariableDeclaration","scope":702,"src":"3006:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":656,"name":"bytes","nodeType":"ElementaryTypeName","src":"3006:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":659,"mutability":"mutable","name":"value","nameLocation":"3033:5:5","nodeType":"VariableDeclaration","scope":702,"src":"3025:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":658,"name":"uint256","nodeType":"ElementaryTypeName","src":"3025:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2989:50:5"},"returnParameters":{"id":663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":662,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":702,"src":"3058:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":661,"name":"bytes","nodeType":"ElementaryTypeName","src":"3058:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3057:14:5"},"scope":837,"src":"2959:407:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":727,"nodeType":"Block","src":"3605:154:5","statements":[{"assignments":[713,715],"declarations":[{"constant":false,"id":713,"mutability":"mutable","name":"success","nameLocation":"3621:7:5","nodeType":"VariableDeclaration","scope":727,"src":"3616:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":712,"name":"bool","nodeType":"ElementaryTypeName","src":"3616:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":715,"mutability":"mutable","name":"returndata","nameLocation":"3643:10:5","nodeType":"VariableDeclaration","scope":727,"src":"3630:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":714,"name":"bytes","nodeType":"ElementaryTypeName","src":"3630:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":720,"initialValue":{"arguments":[{"id":718,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":707,"src":"3675:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":716,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":705,"src":"3657:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3664:10:5","memberName":"staticcall","nodeType":"MemberAccess","src":"3657:17:5","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3657:23:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3615:65:5"},{"expression":{"arguments":[{"id":722,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":705,"src":"3724:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":723,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"3732:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":724,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"3741:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":721,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"3697:26:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3697:55:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":711,"id":726,"nodeType":"Return","src":"3690:62:5"}]},"documentation":{"id":703,"nodeType":"StructuredDocumentation","src":"3372:128:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call."},"id":728,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"3514:18:5","nodeType":"FunctionDefinition","parameters":{"id":708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":705,"mutability":"mutable","name":"target","nameLocation":"3541:6:5","nodeType":"VariableDeclaration","scope":728,"src":"3533:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":704,"name":"address","nodeType":"ElementaryTypeName","src":"3533:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":707,"mutability":"mutable","name":"data","nameLocation":"3562:4:5","nodeType":"VariableDeclaration","scope":728,"src":"3549:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":706,"name":"bytes","nodeType":"ElementaryTypeName","src":"3549:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3532:35:5"},"returnParameters":{"id":711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":710,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":728,"src":"3591:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":709,"name":"bytes","nodeType":"ElementaryTypeName","src":"3591:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3590:14:5"},"scope":837,"src":"3505:254:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":753,"nodeType":"Block","src":"3997:156:5","statements":[{"assignments":[739,741],"declarations":[{"constant":false,"id":739,"mutability":"mutable","name":"success","nameLocation":"4013:7:5","nodeType":"VariableDeclaration","scope":753,"src":"4008:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":738,"name":"bool","nodeType":"ElementaryTypeName","src":"4008:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":741,"mutability":"mutable","name":"returndata","nameLocation":"4035:10:5","nodeType":"VariableDeclaration","scope":753,"src":"4022:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":740,"name":"bytes","nodeType":"ElementaryTypeName","src":"4022:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":746,"initialValue":{"arguments":[{"id":744,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"4069:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":742,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":731,"src":"4049:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4056:12:5","memberName":"delegatecall","nodeType":"MemberAccess","src":"4049:19:5","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4049:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4007:67:5"},{"expression":{"arguments":[{"id":748,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":731,"src":"4118:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":749,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":739,"src":"4126:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":750,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"4135:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":747,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"4091:26:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4091:55:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":737,"id":752,"nodeType":"Return","src":"4084:62:5"}]},"documentation":{"id":729,"nodeType":"StructuredDocumentation","src":"3765:130:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call."},"id":754,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"3909:20:5","nodeType":"FunctionDefinition","parameters":{"id":734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":731,"mutability":"mutable","name":"target","nameLocation":"3938:6:5","nodeType":"VariableDeclaration","scope":754,"src":"3930:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":730,"name":"address","nodeType":"ElementaryTypeName","src":"3930:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":733,"mutability":"mutable","name":"data","nameLocation":"3959:4:5","nodeType":"VariableDeclaration","scope":754,"src":"3946:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":732,"name":"bytes","nodeType":"ElementaryTypeName","src":"3946:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3929:35:5"},"returnParameters":{"id":737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":736,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":754,"src":"3983:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":735,"name":"bytes","nodeType":"ElementaryTypeName","src":"3983:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3982:14:5"},"scope":837,"src":"3900:253:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":793,"nodeType":"Block","src":"4579:424:5","statements":[{"condition":{"id":767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4593:8:5","subExpression":{"id":766,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":759,"src":"4594:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":791,"nodeType":"Block","src":"4653:344:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":773,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":761,"src":"4841:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4852:6:5","memberName":"length","nodeType":"MemberAccess","src":"4841:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4862:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4841:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":777,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"4867:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4874:4:5","memberName":"code","nodeType":"MemberAccess","src":"4867:11:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4879:6:5","memberName":"length","nodeType":"MemberAccess","src":"4867:18:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4889:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4867:23:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4841:49:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":788,"nodeType":"IfStatement","src":"4837:119:5","trueBody":{"id":787,"nodeType":"Block","src":"4892:64:5","statements":[{"errorCall":{"arguments":[{"id":784,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"4934:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":783,"name":"AddressEmptyCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":588,"src":"4917:16:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4917:24:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":786,"nodeType":"RevertStatement","src":"4910:31:5"}]}},{"expression":{"id":789,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":761,"src":"4976:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":765,"id":790,"nodeType":"Return","src":"4969:17:5"}]},"id":792,"nodeType":"IfStatement","src":"4589:408:5","trueBody":{"id":772,"nodeType":"Block","src":"4603:44:5","statements":[{"expression":{"arguments":[{"id":769,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":761,"src":"4625:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":768,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"4617:7:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4617:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":771,"nodeType":"ExpressionStatement","src":"4617:19:5"}]}}]},"documentation":{"id":755,"nodeType":"StructuredDocumentation","src":"4159:257:5","text":" @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n of an unsuccessful call."},"id":794,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"4430:26:5","nodeType":"FunctionDefinition","parameters":{"id":762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":757,"mutability":"mutable","name":"target","nameLocation":"4474:6:5","nodeType":"VariableDeclaration","scope":794,"src":"4466:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":756,"name":"address","nodeType":"ElementaryTypeName","src":"4466:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":759,"mutability":"mutable","name":"success","nameLocation":"4495:7:5","nodeType":"VariableDeclaration","scope":794,"src":"4490:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":758,"name":"bool","nodeType":"ElementaryTypeName","src":"4490:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":761,"mutability":"mutable","name":"returndata","nameLocation":"4525:10:5","nodeType":"VariableDeclaration","scope":794,"src":"4512:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":760,"name":"bytes","nodeType":"ElementaryTypeName","src":"4512:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4456:85:5"},"returnParameters":{"id":765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":764,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":794,"src":"4565:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":763,"name":"bytes","nodeType":"ElementaryTypeName","src":"4565:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4564:14:5"},"scope":837,"src":"4421:582:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":815,"nodeType":"Block","src":"5307:122:5","statements":[{"condition":{"id":805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5321:8:5","subExpression":{"id":804,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":797,"src":"5322:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":813,"nodeType":"Block","src":"5381:42:5","statements":[{"expression":{"id":811,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"5402:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":803,"id":812,"nodeType":"Return","src":"5395:17:5"}]},"id":814,"nodeType":"IfStatement","src":"5317:106:5","trueBody":{"id":810,"nodeType":"Block","src":"5331:44:5","statements":[{"expression":{"arguments":[{"id":807,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"5353:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":806,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"5345:7:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5345:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":809,"nodeType":"ExpressionStatement","src":"5345:19:5"}]}}]},"documentation":{"id":795,"nodeType":"StructuredDocumentation","src":"5009:191:5","text":" @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n revert reason or with a default {Errors.FailedCall} error."},"id":816,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"5214:16:5","nodeType":"FunctionDefinition","parameters":{"id":800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":797,"mutability":"mutable","name":"success","nameLocation":"5236:7:5","nodeType":"VariableDeclaration","scope":816,"src":"5231:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":796,"name":"bool","nodeType":"ElementaryTypeName","src":"5231:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":799,"mutability":"mutable","name":"returndata","nameLocation":"5258:10:5","nodeType":"VariableDeclaration","scope":816,"src":"5245:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":798,"name":"bytes","nodeType":"ElementaryTypeName","src":"5245:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5230:39:5"},"returnParameters":{"id":803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":802,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":816,"src":"5293:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":801,"name":"bytes","nodeType":"ElementaryTypeName","src":"5293:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5292:14:5"},"scope":837,"src":"5205:224:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":835,"nodeType":"Block","src":"5598:432:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":822,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"5674:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5685:6:5","memberName":"length","nodeType":"MemberAccess","src":"5674:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5694:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5674:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":833,"nodeType":"Block","src":"5973:51:5","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":828,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"5994:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Errors_$889_$","typeString":"type(library Errors)"}},"id":830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6001:10:5","memberName":"FailedCall","nodeType":"MemberAccess","referencedDeclaration":880,"src":"5994:17:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5994:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":832,"nodeType":"RevertStatement","src":"5987:26:5"}]},"id":834,"nodeType":"IfStatement","src":"5670:354:5","trueBody":{"id":827,"nodeType":"Block","src":"5697:270:5","statements":[{"AST":{"nodeType":"YulBlock","src":"5824:133:5","statements":[{"nodeType":"YulVariableDeclaration","src":"5842:40:5","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"5871:10:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5865:5:5"},"nodeType":"YulFunctionCall","src":"5865:17:5"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"5846:15:5","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5910:2:5","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"5914:10:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5906:3:5"},"nodeType":"YulFunctionCall","src":"5906:19:5"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"5927:15:5"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5899:6:5"},"nodeType":"YulFunctionCall","src":"5899:44:5"},"nodeType":"YulExpressionStatement","src":"5899:44:5"}]},"evmVersion":"paris","externalReferences":[{"declaration":819,"isOffset":false,"isSlot":false,"src":"5871:10:5","valueSize":1},{"declaration":819,"isOffset":false,"isSlot":false,"src":"5914:10:5","valueSize":1}],"flags":["memory-safe"],"id":826,"nodeType":"InlineAssembly","src":"5799:158:5"}]}}]},"documentation":{"id":817,"nodeType":"StructuredDocumentation","src":"5435:103:5","text":" @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}."},"id":836,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"5552:7:5","nodeType":"FunctionDefinition","parameters":{"id":820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":819,"mutability":"mutable","name":"returndata","nameLocation":"5573:10:5","nodeType":"VariableDeclaration","scope":836,"src":"5560:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":818,"name":"bytes","nodeType":"ElementaryTypeName","src":"5560:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5559:25:5"},"returnParameters":{"id":821,"nodeType":"ParameterList","parameters":[],"src":"5598:0:5"},"scope":837,"src":"5543:487:5","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":838,"src":"233:5799:5","usedErrors":[588],"usedEvents":[]}],"src":"101:5932:5"},"id":5},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[867]},"id":868,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":839,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:6"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":840,"nodeType":"StructuredDocumentation","src":"127:496:6","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":867,"linearizedBaseContracts":[867],"name":"Context","nameLocation":"642:7:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":848,"nodeType":"Block","src":"718:34:6","statements":[{"expression":{"expression":{"id":845,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:6","memberName":"sender","nodeType":"MemberAccess","src":"735:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":844,"id":847,"nodeType":"Return","src":"728:17:6"}]},"id":849,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:6","nodeType":"FunctionDefinition","parameters":{"id":841,"nodeType":"ParameterList","parameters":[],"src":"675:2:6"},"returnParameters":{"id":844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":843,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":849,"src":"709:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":842,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:6"},"scope":867,"src":"656:96:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":857,"nodeType":"Block","src":"825:32:6","statements":[{"expression":{"expression":{"id":854,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:6","memberName":"data","nodeType":"MemberAccess","src":"842:8:6","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":853,"id":856,"nodeType":"Return","src":"835:15:6"}]},"id":858,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:6","nodeType":"FunctionDefinition","parameters":{"id":850,"nodeType":"ParameterList","parameters":[],"src":"775:2:6"},"returnParameters":{"id":853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":852,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":858,"src":"809:14:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":851,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:6"},"scope":867,"src":"758:99:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":865,"nodeType":"Block","src":"935:25:6","statements":[{"expression":{"hexValue":"30","id":863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":862,"id":864,"nodeType":"Return","src":"945:8:6"}]},"id":866,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:6","nodeType":"FunctionDefinition","parameters":{"id":859,"nodeType":"ParameterList","parameters":[],"src":"892:2:6"},"returnParameters":{"id":862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":861,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":866,"src":"926:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":860,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:6"},"scope":867,"src":"863:97:6","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":868,"src":"624:338:6","usedErrors":[],"usedEvents":[]}],"src":"101:862:6"},"id":6},"@openzeppelin/contracts/utils/Errors.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Errors.sol","exportedSymbols":{"Errors":[889]},"id":890,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":869,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"100:24:7"},{"abstract":false,"baseContracts":[],"canonicalName":"Errors","contractDependencies":[],"contractKind":"library","documentation":{"id":870,"nodeType":"StructuredDocumentation","src":"126:284:7","text":" @dev Collection of common custom errors used in multiple contracts\n IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n It is recommended to avoid relying on the error API for critical functionality.\n _Available since v5.1._"},"fullyImplemented":true,"id":889,"linearizedBaseContracts":[889],"name":"Errors","nameLocation":"419:6:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":871,"nodeType":"StructuredDocumentation","src":"432:94:7","text":" @dev The ETH balance of the account is not enough to perform the operation."},"errorSelector":"cf479181","id":877,"name":"InsufficientBalance","nameLocation":"537:19:7","nodeType":"ErrorDefinition","parameters":{"id":876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":873,"mutability":"mutable","name":"balance","nameLocation":"565:7:7","nodeType":"VariableDeclaration","scope":877,"src":"557:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":872,"name":"uint256","nodeType":"ElementaryTypeName","src":"557:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":875,"mutability":"mutable","name":"needed","nameLocation":"582:6:7","nodeType":"VariableDeclaration","scope":877,"src":"574:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":874,"name":"uint256","nodeType":"ElementaryTypeName","src":"574:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"556:33:7"},"src":"531:59:7"},{"documentation":{"id":878,"nodeType":"StructuredDocumentation","src":"596:89:7","text":" @dev A call to an address target failed. The target may have reverted."},"errorSelector":"d6bda275","id":880,"name":"FailedCall","nameLocation":"696:10:7","nodeType":"ErrorDefinition","parameters":{"id":879,"nodeType":"ParameterList","parameters":[],"src":"706:2:7"},"src":"690:19:7"},{"documentation":{"id":881,"nodeType":"StructuredDocumentation","src":"715:46:7","text":" @dev The deployment failed."},"errorSelector":"b06ebf3d","id":883,"name":"FailedDeployment","nameLocation":"772:16:7","nodeType":"ErrorDefinition","parameters":{"id":882,"nodeType":"ParameterList","parameters":[],"src":"788:2:7"},"src":"766:25:7"},{"documentation":{"id":884,"nodeType":"StructuredDocumentation","src":"797:58:7","text":" @dev A necessary precompile is missing."},"errorSelector":"42b01bce","id":888,"name":"MissingPrecompile","nameLocation":"866:17:7","nodeType":"ErrorDefinition","parameters":{"id":887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":886,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":888,"src":"884:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":885,"name":"address","nodeType":"ElementaryTypeName","src":"884:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"883:9:7"},"src":"860:33:7"}],"scope":890,"src":"411:484:7","usedErrors":[877,880,883,888],"usedEvents":[]}],"src":"100:796:7"},"id":7},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/Hashes.sol","exportedSymbols":{"Hashes":[929]},"id":930,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":891,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"113:24:8"},{"abstract":false,"baseContracts":[],"canonicalName":"Hashes","contractDependencies":[],"contractKind":"library","documentation":{"id":892,"nodeType":"StructuredDocumentation","src":"139:81:8","text":" @dev Library of standard hash functions.\n _Available since v5.1._"},"fullyImplemented":true,"id":929,"linearizedBaseContracts":[929],"name":"Hashes","nameLocation":"229:6:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":915,"nodeType":"Block","src":"588:85:8","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":902,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":895,"src":"605:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":903,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"609:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"605:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":910,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"661:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":911,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":895,"src":"664:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":909,"name":"_efficientKeccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"641:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"641:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"605:61:8","trueExpression":{"arguments":[{"id":906,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":895,"src":"633:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":907,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"636:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":905,"name":"_efficientKeccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"613:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":908,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"613:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":901,"id":914,"nodeType":"Return","src":"598:68:8"}]},"documentation":{"id":893,"nodeType":"StructuredDocumentation","src":"242:257:8","text":" @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]."},"id":916,"implemented":true,"kind":"function","modifiers":[],"name":"commutativeKeccak256","nameLocation":"513:20:8","nodeType":"FunctionDefinition","parameters":{"id":898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":895,"mutability":"mutable","name":"a","nameLocation":"542:1:8","nodeType":"VariableDeclaration","scope":916,"src":"534:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":894,"name":"bytes32","nodeType":"ElementaryTypeName","src":"534:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":897,"mutability":"mutable","name":"b","nameLocation":"553:1:8","nodeType":"VariableDeclaration","scope":916,"src":"545:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":896,"name":"bytes32","nodeType":"ElementaryTypeName","src":"545:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"533:22:8"},"returnParameters":{"id":901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":900,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":916,"src":"579:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":899,"name":"bytes32","nodeType":"ElementaryTypeName","src":"579:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"578:9:8"},"scope":929,"src":"504:169:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":927,"nodeType":"Block","src":"881:151:8","statements":[{"AST":{"nodeType":"YulBlock","src":"916:110:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"937:4:8","type":"","value":"0x00"},{"name":"a","nodeType":"YulIdentifier","src":"943:1:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"930:6:8"},"nodeType":"YulFunctionCall","src":"930:15:8"},"nodeType":"YulExpressionStatement","src":"930:15:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"965:4:8","type":"","value":"0x20"},{"name":"b","nodeType":"YulIdentifier","src":"971:1:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"958:6:8"},"nodeType":"YulFunctionCall","src":"958:15:8"},"nodeType":"YulExpressionStatement","src":"958:15:8"},{"nodeType":"YulAssignment","src":"986:30:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1005:4:8","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"1011:4:8","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"995:9:8"},"nodeType":"YulFunctionCall","src":"995:21:8"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"986:5:8"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":919,"isOffset":false,"isSlot":false,"src":"943:1:8","valueSize":1},{"declaration":921,"isOffset":false,"isSlot":false,"src":"971:1:8","valueSize":1},{"declaration":924,"isOffset":false,"isSlot":false,"src":"986:5:8","valueSize":1}],"flags":["memory-safe"],"id":926,"nodeType":"InlineAssembly","src":"891:135:8"}]},"documentation":{"id":917,"nodeType":"StructuredDocumentation","src":"679:109:8","text":" @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory."},"id":928,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientKeccak256","nameLocation":"802:19:8","nodeType":"FunctionDefinition","parameters":{"id":922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":919,"mutability":"mutable","name":"a","nameLocation":"830:1:8","nodeType":"VariableDeclaration","scope":928,"src":"822:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":918,"name":"bytes32","nodeType":"ElementaryTypeName","src":"822:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":921,"mutability":"mutable","name":"b","nameLocation":"841:1:8","nodeType":"VariableDeclaration","scope":928,"src":"833:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":920,"name":"bytes32","nodeType":"ElementaryTypeName","src":"833:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"821:22:8"},"returnParameters":{"id":925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":924,"mutability":"mutable","name":"value","nameLocation":"874:5:8","nodeType":"VariableDeclaration","scope":928,"src":"866:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":923,"name":"bytes32","nodeType":"ElementaryTypeName","src":"866:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"865:15:8"},"scope":929,"src":"793:239:8","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":930,"src":"221:813:8","usedErrors":[],"usedEvents":[]}],"src":"113:922:8"},"id":8},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"Hashes":[929],"MerkleProof":[2002]},"id":2003,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":931,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"206:24:9"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/Hashes.sol","file":"./Hashes.sol","id":933,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2003,"sourceUnit":930,"src":"232:36:9","symbolAliases":[{"foreign":{"id":932,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"240:6:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":934,"nodeType":"StructuredDocumentation","src":"270:1082:9","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the Merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates Merkle trees that are safe\n against this attack out of the box.\n IMPORTANT: Consider memory side-effects when using custom hashing functions\n that access memory in an unsafe way.\n NOTE: This library supports proof verification for merkle trees built using\n custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n leaf inclusion in trees built using non-commutative hashing functions requires\n additional logic that is not supported by this library."},"fullyImplemented":true,"id":2002,"linearizedBaseContracts":[2002],"name":"MerkleProof","nameLocation":"1361:11:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":935,"nodeType":"StructuredDocumentation","src":"1379:60:9","text":"@dev The multiproof provided is not valid."},"errorSelector":"35140492","id":937,"name":"MerkleProofInvalidMultiproof","nameLocation":"1450:28:9","nodeType":"ErrorDefinition","parameters":{"id":936,"nodeType":"ParameterList","parameters":[],"src":"1478:2:9"},"src":"1444:37:9"},{"body":{"id":957,"nodeType":"Block","src":"1999:57:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":951,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"2029:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":952,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":945,"src":"2036:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":950,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[999,1081],"referencedDeclaration":999,"src":"2016:12:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":953,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2016:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":954,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"2045:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2016:33:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":949,"id":956,"nodeType":"Return","src":"2009:40:9"}]},"documentation":{"id":938,"nodeType":"StructuredDocumentation","src":"1487:410:9","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."},"id":958,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1911:6:9","nodeType":"FunctionDefinition","parameters":{"id":946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":941,"mutability":"mutable","name":"proof","nameLocation":"1935:5:9","nodeType":"VariableDeclaration","scope":958,"src":"1918:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":939,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1918:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":940,"nodeType":"ArrayTypeName","src":"1918:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":943,"mutability":"mutable","name":"root","nameLocation":"1950:4:9","nodeType":"VariableDeclaration","scope":958,"src":"1942:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":942,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1942:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":945,"mutability":"mutable","name":"leaf","nameLocation":"1964:4:9","nodeType":"VariableDeclaration","scope":958,"src":"1956:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":944,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1956:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1917:52:9"},"returnParameters":{"id":949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":948,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":958,"src":"1993:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":947,"name":"bool","nodeType":"ElementaryTypeName","src":"1993:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1992:6:9"},"scope":2002,"src":"1902:154:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":998,"nodeType":"Block","src":"2549:216:9","statements":[{"assignments":[970],"declarations":[{"constant":false,"id":970,"mutability":"mutable","name":"computedHash","nameLocation":"2567:12:9","nodeType":"VariableDeclaration","scope":998,"src":"2559:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":969,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2559:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":972,"initialValue":{"id":971,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"2582:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2559:27:9"},{"body":{"id":994,"nodeType":"Block","src":"2639:91:9","statements":[{"expression":{"id":992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":984,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"2653:12:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":987,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"2696:12:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":988,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"2710:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":990,"indexExpression":{"id":989,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"2716:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2710:8:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":985,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"2668:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$929_$","typeString":"type(library Hashes)"}},"id":986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2675:20:9","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":916,"src":"2668:27:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2668:51:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2653:66:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":993,"nodeType":"ExpressionStatement","src":"2653:66:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":977,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"2616:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":978,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"2620:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2626:6:9","memberName":"length","nodeType":"MemberAccess","src":"2620:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2616:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":995,"initializationExpression":{"assignments":[974],"declarations":[{"constant":false,"id":974,"mutability":"mutable","name":"i","nameLocation":"2609:1:9","nodeType":"VariableDeclaration","scope":995,"src":"2601:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":973,"name":"uint256","nodeType":"ElementaryTypeName","src":"2601:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":976,"initialValue":{"hexValue":"30","id":975,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2613:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2601:13:9"},"loopExpression":{"expression":{"id":982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2634:3:9","subExpression":{"id":981,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"2634:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":983,"nodeType":"ExpressionStatement","src":"2634:3:9"},"nodeType":"ForStatement","src":"2596:134:9"},{"expression":{"id":996,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"2746:12:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":968,"id":997,"nodeType":"Return","src":"2739:19:9"}]},"documentation":{"id":959,"nodeType":"StructuredDocumentation","src":"2062:390:9","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."},"id":999,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"2466:12:9","nodeType":"FunctionDefinition","parameters":{"id":965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":962,"mutability":"mutable","name":"proof","nameLocation":"2496:5:9","nodeType":"VariableDeclaration","scope":999,"src":"2479:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":960,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2479:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":961,"nodeType":"ArrayTypeName","src":"2479:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":964,"mutability":"mutable","name":"leaf","nameLocation":"2511:4:9","nodeType":"VariableDeclaration","scope":999,"src":"2503:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":963,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2503:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2478:38:9"},"returnParameters":{"id":968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":967,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":999,"src":"2540:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":966,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2540:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2539:9:9"},"scope":2002,"src":"2457:308:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1030,"nodeType":"Block","src":"3376:65:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1023,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"3406:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1024,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"3413:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1025,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1017,"src":"3419:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":1022,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[999,1081],"referencedDeclaration":1081,"src":"3393:12:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":1026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3393:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1027,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1005,"src":"3430:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3393:41:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1021,"id":1029,"nodeType":"Return","src":"3386:48:9"}]},"documentation":{"id":1000,"nodeType":"StructuredDocumentation","src":"2771:407:9","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."},"id":1031,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"3192:6:9","nodeType":"FunctionDefinition","parameters":{"id":1018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1003,"mutability":"mutable","name":"proof","nameLocation":"3225:5:9","nodeType":"VariableDeclaration","scope":1031,"src":"3208:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1001,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3208:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1002,"nodeType":"ArrayTypeName","src":"3208:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1005,"mutability":"mutable","name":"root","nameLocation":"3248:4:9","nodeType":"VariableDeclaration","scope":1031,"src":"3240:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1004,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3240:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1007,"mutability":"mutable","name":"leaf","nameLocation":"3270:4:9","nodeType":"VariableDeclaration","scope":1031,"src":"3262:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1006,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3262:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1017,"mutability":"mutable","name":"hasher","nameLocation":"3334:6:9","nodeType":"VariableDeclaration","scope":1031,"src":"3284:56:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1016,"nodeType":"FunctionTypeName","parameterTypes":{"id":1012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1009,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1016,"src":"3293:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1008,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3293:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1011,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1016,"src":"3302:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1010,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3302:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3292:18:9"},"returnParameterTypes":{"id":1015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1014,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1016,"src":"3325:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1013,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3325:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3324:9:9"},"src":"3284:56:9","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"3198:148:9"},"returnParameters":{"id":1021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1020,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1031,"src":"3370:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1019,"name":"bool","nodeType":"ElementaryTypeName","src":"3370:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3369:6:9"},"scope":2002,"src":"3183:258:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1080,"nodeType":"Block","src":"4019:195:9","statements":[{"assignments":[1053],"declarations":[{"constant":false,"id":1053,"mutability":"mutable","name":"computedHash","nameLocation":"4037:12:9","nodeType":"VariableDeclaration","scope":1080,"src":"4029:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1052,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4029:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1055,"initialValue":{"id":1054,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"4052:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4029:27:9"},{"body":{"id":1076,"nodeType":"Block","src":"4109:70:9","statements":[{"expression":{"id":1074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1067,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"4123:12:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1069,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"4145:12:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":1070,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"4159:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1072,"indexExpression":{"id":1071,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"4165:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4159:8:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1068,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1047,"src":"4138:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4138:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4123:45:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1075,"nodeType":"ExpressionStatement","src":"4123:45:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1060,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"4086:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1061,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"4090:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:6:9","memberName":"length","nodeType":"MemberAccess","src":"4090:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4086:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1077,"initializationExpression":{"assignments":[1057],"declarations":[{"constant":false,"id":1057,"mutability":"mutable","name":"i","nameLocation":"4079:1:9","nodeType":"VariableDeclaration","scope":1077,"src":"4071:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1056,"name":"uint256","nodeType":"ElementaryTypeName","src":"4071:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1059,"initialValue":{"hexValue":"30","id":1058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4083:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4071:13:9"},"loopExpression":{"expression":{"id":1065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4104:3:9","subExpression":{"id":1064,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"4104:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1066,"nodeType":"ExpressionStatement","src":"4104:3:9"},"nodeType":"ForStatement","src":"4066:113:9"},{"expression":{"id":1078,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"4195:12:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1051,"id":1079,"nodeType":"Return","src":"4188:19:9"}]},"documentation":{"id":1032,"nodeType":"StructuredDocumentation","src":"3447:387:9","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."},"id":1081,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"3848:12:9","nodeType":"FunctionDefinition","parameters":{"id":1048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1035,"mutability":"mutable","name":"proof","nameLocation":"3887:5:9","nodeType":"VariableDeclaration","scope":1081,"src":"3870:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1033,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3870:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1034,"nodeType":"ArrayTypeName","src":"3870:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1037,"mutability":"mutable","name":"leaf","nameLocation":"3910:4:9","nodeType":"VariableDeclaration","scope":1081,"src":"3902:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1036,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3902:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1047,"mutability":"mutable","name":"hasher","nameLocation":"3974:6:9","nodeType":"VariableDeclaration","scope":1081,"src":"3924:56:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1046,"nodeType":"FunctionTypeName","parameterTypes":{"id":1042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1039,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1046,"src":"3933:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1038,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3933:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1041,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1046,"src":"3942:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1040,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3942:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3932:18:9"},"returnParameterTypes":{"id":1045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1044,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1046,"src":"3965:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1043,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3965:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3964:9:9"},"src":"3924:56:9","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"3860:126:9"},"returnParameters":{"id":1051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1050,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1081,"src":"4010:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1049,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4010:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4009:9:9"},"scope":2002,"src":"3839:375:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1101,"nodeType":"Block","src":"4744:65:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1095,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"4782:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1096,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1089,"src":"4789:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1094,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[1143,1225],"referencedDeclaration":1143,"src":"4761:20:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4761:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1098,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1087,"src":"4798:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4761:41:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1093,"id":1100,"nodeType":"Return","src":"4754:48:9"}]},"documentation":{"id":1082,"nodeType":"StructuredDocumentation","src":"4220:412:9","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."},"id":1102,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"4646:14:9","nodeType":"FunctionDefinition","parameters":{"id":1090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1085,"mutability":"mutable","name":"proof","nameLocation":"4680:5:9","nodeType":"VariableDeclaration","scope":1102,"src":"4661:24:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1083,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4661:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1084,"nodeType":"ArrayTypeName","src":"4661:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1087,"mutability":"mutable","name":"root","nameLocation":"4695:4:9","nodeType":"VariableDeclaration","scope":1102,"src":"4687:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1086,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4687:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1089,"mutability":"mutable","name":"leaf","nameLocation":"4709:4:9","nodeType":"VariableDeclaration","scope":1102,"src":"4701:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1088,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4701:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4660:54:9"},"returnParameters":{"id":1093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1092,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1102,"src":"4738:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1091,"name":"bool","nodeType":"ElementaryTypeName","src":"4738:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4737:6:9"},"scope":2002,"src":"4637:172:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1142,"nodeType":"Block","src":"5314:216:9","statements":[{"assignments":[1114],"declarations":[{"constant":false,"id":1114,"mutability":"mutable","name":"computedHash","nameLocation":"5332:12:9","nodeType":"VariableDeclaration","scope":1142,"src":"5324:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1113,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5324:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1116,"initialValue":{"id":1115,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"5347:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5324:27:9"},{"body":{"id":1138,"nodeType":"Block","src":"5404:91:9","statements":[{"expression":{"id":1136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1128,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1114,"src":"5418:12:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1131,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1114,"src":"5461:12:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":1132,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1106,"src":"5475:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1134,"indexExpression":{"id":1133,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"5481:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5475:8:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1129,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"5433:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$929_$","typeString":"type(library Hashes)"}},"id":1130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5440:20:9","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":916,"src":"5433:27:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5433:51:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5418:66:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1137,"nodeType":"ExpressionStatement","src":"5418:66:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1121,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"5381:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1122,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1106,"src":"5385:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5391:6:9","memberName":"length","nodeType":"MemberAccess","src":"5385:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5381:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1139,"initializationExpression":{"assignments":[1118],"declarations":[{"constant":false,"id":1118,"mutability":"mutable","name":"i","nameLocation":"5374:1:9","nodeType":"VariableDeclaration","scope":1139,"src":"5366:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1117,"name":"uint256","nodeType":"ElementaryTypeName","src":"5366:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1120,"initialValue":{"hexValue":"30","id":1119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5378:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5366:13:9"},"loopExpression":{"expression":{"id":1126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5399:3:9","subExpression":{"id":1125,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"5399:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1127,"nodeType":"ExpressionStatement","src":"5399:3:9"},"nodeType":"ForStatement","src":"5361:134:9"},{"expression":{"id":1140,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1114,"src":"5511:12:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1112,"id":1141,"nodeType":"Return","src":"5504:19:9"}]},"documentation":{"id":1103,"nodeType":"StructuredDocumentation","src":"4815:392:9","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."},"id":1143,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"5221:20:9","nodeType":"FunctionDefinition","parameters":{"id":1109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1106,"mutability":"mutable","name":"proof","nameLocation":"5261:5:9","nodeType":"VariableDeclaration","scope":1143,"src":"5242:24:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1104,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5242:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1105,"nodeType":"ArrayTypeName","src":"5242:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1108,"mutability":"mutable","name":"leaf","nameLocation":"5276:4:9","nodeType":"VariableDeclaration","scope":1143,"src":"5268:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1107,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5268:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5241:40:9"},"returnParameters":{"id":1112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1111,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1143,"src":"5305:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1110,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5305:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5304:9:9"},"scope":2002,"src":"5212:318:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1174,"nodeType":"Block","src":"6153:73:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1167,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"6191:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1168,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"6198:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1169,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1161,"src":"6204:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":1166,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[1143,1225],"referencedDeclaration":1225,"src":"6170:20:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":1170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6170:41:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1171,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1149,"src":"6215:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6170:49:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1165,"id":1173,"nodeType":"Return","src":"6163:56:9"}]},"documentation":{"id":1144,"nodeType":"StructuredDocumentation","src":"5536:409:9","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."},"id":1175,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"5959:14:9","nodeType":"FunctionDefinition","parameters":{"id":1162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1147,"mutability":"mutable","name":"proof","nameLocation":"6002:5:9","nodeType":"VariableDeclaration","scope":1175,"src":"5983:24:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1145,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5983:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1146,"nodeType":"ArrayTypeName","src":"5983:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1149,"mutability":"mutable","name":"root","nameLocation":"6025:4:9","nodeType":"VariableDeclaration","scope":1175,"src":"6017:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1148,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6017:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1151,"mutability":"mutable","name":"leaf","nameLocation":"6047:4:9","nodeType":"VariableDeclaration","scope":1175,"src":"6039:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1150,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6039:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1161,"mutability":"mutable","name":"hasher","nameLocation":"6111:6:9","nodeType":"VariableDeclaration","scope":1175,"src":"6061:56:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1160,"nodeType":"FunctionTypeName","parameterTypes":{"id":1156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1153,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1160,"src":"6070:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1152,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6070:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1155,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1160,"src":"6079:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1154,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6079:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6069:18:9"},"returnParameterTypes":{"id":1159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1158,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1160,"src":"6102:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1157,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6102:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6101:9:9"},"src":"6061:56:9","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"5973:150:9"},"returnParameters":{"id":1165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1164,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1175,"src":"6147:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1163,"name":"bool","nodeType":"ElementaryTypeName","src":"6147:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6146:6:9"},"scope":2002,"src":"5950:276:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1224,"nodeType":"Block","src":"6816:195:9","statements":[{"assignments":[1197],"declarations":[{"constant":false,"id":1197,"mutability":"mutable","name":"computedHash","nameLocation":"6834:12:9","nodeType":"VariableDeclaration","scope":1224,"src":"6826:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1196,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6826:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1199,"initialValue":{"id":1198,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"6849:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6826:27:9"},{"body":{"id":1220,"nodeType":"Block","src":"6906:70:9","statements":[{"expression":{"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1211,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"6920:12:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1213,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"6942:12:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":1214,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"6956:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1216,"indexExpression":{"id":1215,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1201,"src":"6962:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6956:8:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1212,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"6935:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":1217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6935:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6920:45:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1219,"nodeType":"ExpressionStatement","src":"6920:45:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1204,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1201,"src":"6883:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1205,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"6887:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6893:6:9","memberName":"length","nodeType":"MemberAccess","src":"6887:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6883:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1221,"initializationExpression":{"assignments":[1201],"declarations":[{"constant":false,"id":1201,"mutability":"mutable","name":"i","nameLocation":"6876:1:9","nodeType":"VariableDeclaration","scope":1221,"src":"6868:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1200,"name":"uint256","nodeType":"ElementaryTypeName","src":"6868:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1203,"initialValue":{"hexValue":"30","id":1202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6880:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6868:13:9"},"loopExpression":{"expression":{"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6901:3:9","subExpression":{"id":1208,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1201,"src":"6901:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1210,"nodeType":"ExpressionStatement","src":"6901:3:9"},"nodeType":"ForStatement","src":"6863:113:9"},{"expression":{"id":1222,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"6992:12:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1195,"id":1223,"nodeType":"Return","src":"6985:19:9"}]},"documentation":{"id":1176,"nodeType":"StructuredDocumentation","src":"6232:389:9","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."},"id":1225,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"6635:20:9","nodeType":"FunctionDefinition","parameters":{"id":1192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1179,"mutability":"mutable","name":"proof","nameLocation":"6684:5:9","nodeType":"VariableDeclaration","scope":1225,"src":"6665:24:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1177,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6665:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1178,"nodeType":"ArrayTypeName","src":"6665:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1181,"mutability":"mutable","name":"leaf","nameLocation":"6707:4:9","nodeType":"VariableDeclaration","scope":1225,"src":"6699:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1180,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6699:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1191,"mutability":"mutable","name":"hasher","nameLocation":"6771:6:9","nodeType":"VariableDeclaration","scope":1225,"src":"6721:56:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1190,"nodeType":"FunctionTypeName","parameterTypes":{"id":1186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1183,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1190,"src":"6730:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1182,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6730:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1185,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1190,"src":"6739:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1184,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6739:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6729:18:9"},"returnParameterTypes":{"id":1189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1188,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1190,"src":"6762:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1187,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6762:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6761:9:9"},"src":"6721:56:9","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"6655:128:9"},"returnParameters":{"id":1195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1194,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1225,"src":"6807:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1193,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6807:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6806:9:9"},"scope":2002,"src":"6626:385:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1250,"nodeType":"Block","src":"7797:76:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1243,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1229,"src":"7832:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1244,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"7839:10:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":1245,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"7851:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":1242,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[1409,1613],"referencedDeclaration":1409,"src":"7814:17:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":1246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7814:44:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1247,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1234,"src":"7862:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7814:52:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1241,"id":1249,"nodeType":"Return","src":"7807:59:9"}]},"documentation":{"id":1226,"nodeType":"StructuredDocumentation","src":"7017:593:9","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."},"id":1251,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"7624:16:9","nodeType":"FunctionDefinition","parameters":{"id":1238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1229,"mutability":"mutable","name":"proof","nameLocation":"7667:5:9","nodeType":"VariableDeclaration","scope":1251,"src":"7650:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1227,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7650:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1228,"nodeType":"ArrayTypeName","src":"7650:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1232,"mutability":"mutable","name":"proofFlags","nameLocation":"7696:10:9","nodeType":"VariableDeclaration","scope":1251,"src":"7682:24:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1230,"name":"bool","nodeType":"ElementaryTypeName","src":"7682:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1231,"nodeType":"ArrayTypeName","src":"7682:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1234,"mutability":"mutable","name":"root","nameLocation":"7724:4:9","nodeType":"VariableDeclaration","scope":1251,"src":"7716:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1233,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7716:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1237,"mutability":"mutable","name":"leaves","nameLocation":"7755:6:9","nodeType":"VariableDeclaration","scope":1251,"src":"7738:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1235,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7738:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1236,"nodeType":"ArrayTypeName","src":"7738:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7640:127:9"},"returnParameters":{"id":1241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1240,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1251,"src":"7791:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1239,"name":"bool","nodeType":"ElementaryTypeName","src":"7791:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7790:6:9"},"scope":2002,"src":"7615:258:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1408,"nodeType":"Block","src":"9159:2104:9","statements":[{"assignments":[1267],"declarations":[{"constant":false,"id":1267,"mutability":"mutable","name":"leavesLen","nameLocation":"9551:9:9","nodeType":"VariableDeclaration","scope":1408,"src":"9543:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1266,"name":"uint256","nodeType":"ElementaryTypeName","src":"9543:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1270,"initialValue":{"expression":{"id":1268,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"9563:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9570:6:9","memberName":"length","nodeType":"MemberAccess","src":"9563:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9543:33:9"},{"assignments":[1272],"declarations":[{"constant":false,"id":1272,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"9594:13:9","nodeType":"VariableDeclaration","scope":1408,"src":"9586:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1271,"name":"uint256","nodeType":"ElementaryTypeName","src":"9586:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1275,"initialValue":{"expression":{"id":1273,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1258,"src":"9610:10:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9621:6:9","memberName":"length","nodeType":"MemberAccess","src":"9610:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9586:41:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1276,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1267,"src":"9675:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1277,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"9687:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9693:6:9","memberName":"length","nodeType":"MemberAccess","src":"9687:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9675:24:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1280,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"9703:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9703:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9675:45:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1288,"nodeType":"IfStatement","src":"9671:113:9","trueBody":{"id":1287,"nodeType":"Block","src":"9722:62:9","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1284,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"9743:28:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9743:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1286,"nodeType":"RevertStatement","src":"9736:37:9"}]}},{"assignments":[1293],"declarations":[{"constant":false,"id":1293,"mutability":"mutable","name":"hashes","nameLocation":"10045:6:9","nodeType":"VariableDeclaration","scope":1408,"src":"10028:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1291,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10028:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1292,"nodeType":"ArrayTypeName","src":"10028:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1299,"initialValue":{"arguments":[{"id":1297,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"10068:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1296,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"10054:13:9","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1294,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10058:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1295,"nodeType":"ArrayTypeName","src":"10058:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10054:28:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10028:54:9"},{"assignments":[1301],"declarations":[{"constant":false,"id":1301,"mutability":"mutable","name":"leafPos","nameLocation":"10100:7:9","nodeType":"VariableDeclaration","scope":1408,"src":"10092:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1300,"name":"uint256","nodeType":"ElementaryTypeName","src":"10092:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1303,"initialValue":{"hexValue":"30","id":1302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10110:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10092:19:9"},{"assignments":[1305],"declarations":[{"constant":false,"id":1305,"mutability":"mutable","name":"hashPos","nameLocation":"10129:7:9","nodeType":"VariableDeclaration","scope":1408,"src":"10121:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1304,"name":"uint256","nodeType":"ElementaryTypeName","src":"10121:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1307,"initialValue":{"hexValue":"30","id":1306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10139:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10121:19:9"},{"assignments":[1309],"declarations":[{"constant":false,"id":1309,"mutability":"mutable","name":"proofPos","nameLocation":"10158:8:9","nodeType":"VariableDeclaration","scope":1408,"src":"10150:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1308,"name":"uint256","nodeType":"ElementaryTypeName","src":"10150:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1311,"initialValue":{"hexValue":"30","id":1310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10169:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10150:20:9"},{"body":{"id":1371,"nodeType":"Block","src":"10590:310:9","statements":[{"assignments":[1323],"declarations":[{"constant":false,"id":1323,"mutability":"mutable","name":"a","nameLocation":"10612:1:9","nodeType":"VariableDeclaration","scope":1371,"src":"10604:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1322,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10604:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1336,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1324,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"10616:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1325,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1267,"src":"10626:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10616:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1331,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"10658:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1334,"indexExpression":{"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10665:9:9","subExpression":{"id":1332,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"10665:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10658:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10616:59:9","trueExpression":{"baseExpression":{"id":1327,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"10638:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1330,"indexExpression":{"id":1329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10645:9:9","subExpression":{"id":1328,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"10645:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10638:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10604:71:9"},{"assignments":[1338],"declarations":[{"constant":false,"id":1338,"mutability":"mutable","name":"b","nameLocation":"10697:1:9","nodeType":"VariableDeclaration","scope":1371,"src":"10689:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1337,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10689:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1360,"initialValue":{"condition":{"baseExpression":{"id":1339,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1258,"src":"10701:10:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1341,"indexExpression":{"id":1340,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"10712:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10701:13:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1355,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"10813:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1358,"indexExpression":{"id":1357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10819:10:9","subExpression":{"id":1356,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1309,"src":"10819:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10813:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10701:129:9","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1342,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"10734:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1343,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1267,"src":"10744:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10734:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1349,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"10776:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1352,"indexExpression":{"id":1351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10783:9:9","subExpression":{"id":1350,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"10783:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10776:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10734:59:9","trueExpression":{"baseExpression":{"id":1345,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"10756:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1348,"indexExpression":{"id":1347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10763:9:9","subExpression":{"id":1346,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"10763:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10756:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1354,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10733:61:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10689:141:9"},{"expression":{"id":1369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1361,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"10844:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1363,"indexExpression":{"id":1362,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"10851:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10844:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1366,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1323,"src":"10884:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1367,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1338,"src":"10887:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1364,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"10856:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$929_$","typeString":"type(library Hashes)"}},"id":1365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10863:20:9","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":916,"src":"10856:27:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10856:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"10844:45:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1370,"nodeType":"ExpressionStatement","src":"10844:45:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1316,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"10566:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1317,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"10570:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10566:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1372,"initializationExpression":{"assignments":[1313],"declarations":[{"constant":false,"id":1313,"mutability":"mutable","name":"i","nameLocation":"10559:1:9","nodeType":"VariableDeclaration","scope":1372,"src":"10551:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1312,"name":"uint256","nodeType":"ElementaryTypeName","src":"10551:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1315,"initialValue":{"hexValue":"30","id":1314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10563:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10551:13:9"},"loopExpression":{"expression":{"id":1320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10585:3:9","subExpression":{"id":1319,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"10585:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1321,"nodeType":"ExpressionStatement","src":"10585:3:9"},"nodeType":"ForStatement","src":"10546:354:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1373,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"10914:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10930:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10914:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1393,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1267,"src":"11155:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11167:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11155:13:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1405,"nodeType":"Block","src":"11217:40:9","statements":[{"expression":{"baseExpression":{"id":1401,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"11238:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1403,"indexExpression":{"hexValue":"30","id":1402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11244:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11238:8:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1265,"id":1404,"nodeType":"Return","src":"11231:15:9"}]},"id":1406,"nodeType":"IfStatement","src":"11151:106:9","trueBody":{"id":1400,"nodeType":"Block","src":"11170:41:9","statements":[{"expression":{"baseExpression":{"id":1396,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"11191:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1398,"indexExpression":{"hexValue":"30","id":1397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11198:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11191:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1265,"id":1399,"nodeType":"Return","src":"11184:16:9"}]}},"id":1407,"nodeType":"IfStatement","src":"10910:347:9","trueBody":{"id":1392,"nodeType":"Block","src":"10933:212:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1376,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1309,"src":"10951:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1377,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"10963:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10969:6:9","memberName":"length","nodeType":"MemberAccess","src":"10963:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10951:24:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1384,"nodeType":"IfStatement","src":"10947:100:9","trueBody":{"id":1383,"nodeType":"Block","src":"10977:70:9","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1380,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"11002:28:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11002:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1382,"nodeType":"RevertStatement","src":"10995:37:9"}]}},{"id":1391,"nodeType":"UncheckedBlock","src":"11060:75:9","statements":[{"expression":{"baseExpression":{"id":1385,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"11095:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1389,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1386,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"11102:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11118:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11102:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11095:25:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1265,"id":1390,"nodeType":"Return","src":"11088:32:9"}]}]}}]},"documentation":{"id":1252,"nodeType":"StructuredDocumentation","src":"7879:1100:9","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":1409,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"8993:17:9","nodeType":"FunctionDefinition","parameters":{"id":1262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1255,"mutability":"mutable","name":"proof","nameLocation":"9037:5:9","nodeType":"VariableDeclaration","scope":1409,"src":"9020:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1253,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9020:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1254,"nodeType":"ArrayTypeName","src":"9020:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1258,"mutability":"mutable","name":"proofFlags","nameLocation":"9066:10:9","nodeType":"VariableDeclaration","scope":1409,"src":"9052:24:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1256,"name":"bool","nodeType":"ElementaryTypeName","src":"9052:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1257,"nodeType":"ArrayTypeName","src":"9052:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1261,"mutability":"mutable","name":"leaves","nameLocation":"9103:6:9","nodeType":"VariableDeclaration","scope":1409,"src":"9086:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1259,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9086:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1260,"nodeType":"ArrayTypeName","src":"9086:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"9010:105:9"},"returnParameters":{"id":1265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1264,"mutability":"mutable","name":"merkleRoot","nameLocation":"9147:10:9","nodeType":"VariableDeclaration","scope":1409,"src":"9139:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1263,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9139:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9138:20:9"},"scope":2002,"src":"8984:2279:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1445,"nodeType":"Block","src":"12112:84:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1437,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1413,"src":"12147:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1438,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1416,"src":"12154:10:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":1439,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"12166:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1440,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"12174:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":1436,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[1409,1613],"referencedDeclaration":1613,"src":"12129:17:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":1441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12129:52:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1442,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"12185:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"12129:60:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1435,"id":1444,"nodeType":"Return","src":"12122:67:9"}]},"documentation":{"id":1410,"nodeType":"StructuredDocumentation","src":"11269:590:9","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."},"id":1446,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"11873:16:9","nodeType":"FunctionDefinition","parameters":{"id":1432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1413,"mutability":"mutable","name":"proof","nameLocation":"11916:5:9","nodeType":"VariableDeclaration","scope":1446,"src":"11899:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1411,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11899:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1412,"nodeType":"ArrayTypeName","src":"11899:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1416,"mutability":"mutable","name":"proofFlags","nameLocation":"11945:10:9","nodeType":"VariableDeclaration","scope":1446,"src":"11931:24:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1414,"name":"bool","nodeType":"ElementaryTypeName","src":"11931:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1415,"nodeType":"ArrayTypeName","src":"11931:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1418,"mutability":"mutable","name":"root","nameLocation":"11973:4:9","nodeType":"VariableDeclaration","scope":1446,"src":"11965:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1417,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11965:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1421,"mutability":"mutable","name":"leaves","nameLocation":"12004:6:9","nodeType":"VariableDeclaration","scope":1446,"src":"11987:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1419,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11987:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1420,"nodeType":"ArrayTypeName","src":"11987:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1431,"mutability":"mutable","name":"hasher","nameLocation":"12070:6:9","nodeType":"VariableDeclaration","scope":1446,"src":"12020:56:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1430,"nodeType":"FunctionTypeName","parameterTypes":{"id":1426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1423,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1430,"src":"12029:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1422,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12029:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1425,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1430,"src":"12038:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1424,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12038:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12028:18:9"},"returnParameterTypes":{"id":1429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1428,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1430,"src":"12061:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1427,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12061:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12060:9:9"},"src":"12020:56:9","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"11889:193:9"},"returnParameters":{"id":1435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1434,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1446,"src":"12106:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1433,"name":"bool","nodeType":"ElementaryTypeName","src":"12106:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12105:6:9"},"scope":2002,"src":"11864:332:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1612,"nodeType":"Block","src":"13545:2083:9","statements":[{"assignments":[1472],"declarations":[{"constant":false,"id":1472,"mutability":"mutable","name":"leavesLen","nameLocation":"13937:9:9","nodeType":"VariableDeclaration","scope":1612,"src":"13929:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1471,"name":"uint256","nodeType":"ElementaryTypeName","src":"13929:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1475,"initialValue":{"expression":{"id":1473,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"13949:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13956:6:9","memberName":"length","nodeType":"MemberAccess","src":"13949:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13929:33:9"},{"assignments":[1477],"declarations":[{"constant":false,"id":1477,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"13980:13:9","nodeType":"VariableDeclaration","scope":1612,"src":"13972:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1476,"name":"uint256","nodeType":"ElementaryTypeName","src":"13972:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1480,"initialValue":{"expression":{"id":1478,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1453,"src":"13996:10:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14007:6:9","memberName":"length","nodeType":"MemberAccess","src":"13996:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13972:41:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1481,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1472,"src":"14061:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1482,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"14073:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14079:6:9","memberName":"length","nodeType":"MemberAccess","src":"14073:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14061:24:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1485,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"14089:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14105:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14089:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14061:45:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1493,"nodeType":"IfStatement","src":"14057:113:9","trueBody":{"id":1492,"nodeType":"Block","src":"14108:62:9","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1489,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"14129:28:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1490,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14129:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1491,"nodeType":"RevertStatement","src":"14122:37:9"}]}},{"assignments":[1498],"declarations":[{"constant":false,"id":1498,"mutability":"mutable","name":"hashes","nameLocation":"14431:6:9","nodeType":"VariableDeclaration","scope":1612,"src":"14414:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1496,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14414:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1497,"nodeType":"ArrayTypeName","src":"14414:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1504,"initialValue":{"arguments":[{"id":1502,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"14454:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1501,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"14440:13:9","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1499,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14444:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1500,"nodeType":"ArrayTypeName","src":"14444:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14440:28:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"14414:54:9"},{"assignments":[1506],"declarations":[{"constant":false,"id":1506,"mutability":"mutable","name":"leafPos","nameLocation":"14486:7:9","nodeType":"VariableDeclaration","scope":1612,"src":"14478:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1505,"name":"uint256","nodeType":"ElementaryTypeName","src":"14478:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1508,"initialValue":{"hexValue":"30","id":1507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14496:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14478:19:9"},{"assignments":[1510],"declarations":[{"constant":false,"id":1510,"mutability":"mutable","name":"hashPos","nameLocation":"14515:7:9","nodeType":"VariableDeclaration","scope":1612,"src":"14507:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1509,"name":"uint256","nodeType":"ElementaryTypeName","src":"14507:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1512,"initialValue":{"hexValue":"30","id":1511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14525:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14507:19:9"},{"assignments":[1514],"declarations":[{"constant":false,"id":1514,"mutability":"mutable","name":"proofPos","nameLocation":"14544:8:9","nodeType":"VariableDeclaration","scope":1612,"src":"14536:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1513,"name":"uint256","nodeType":"ElementaryTypeName","src":"14536:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1516,"initialValue":{"hexValue":"30","id":1515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14555:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14536:20:9"},{"body":{"id":1575,"nodeType":"Block","src":"14976:289:9","statements":[{"assignments":[1528],"declarations":[{"constant":false,"id":1528,"mutability":"mutable","name":"a","nameLocation":"14998:1:9","nodeType":"VariableDeclaration","scope":1575,"src":"14990:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1527,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14990:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1541,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1529,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"15002:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1530,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1472,"src":"15012:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15002:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1536,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"15044:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1539,"indexExpression":{"id":1538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15051:9:9","subExpression":{"id":1537,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"15051:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15044:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15002:59:9","trueExpression":{"baseExpression":{"id":1532,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"15024:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1535,"indexExpression":{"id":1534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15031:9:9","subExpression":{"id":1533,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"15031:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15024:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"14990:71:9"},{"assignments":[1543],"declarations":[{"constant":false,"id":1543,"mutability":"mutable","name":"b","nameLocation":"15083:1:9","nodeType":"VariableDeclaration","scope":1575,"src":"15075:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1542,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15075:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1565,"initialValue":{"condition":{"baseExpression":{"id":1544,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1453,"src":"15087:10:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1546,"indexExpression":{"id":1545,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"15098:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15087:13:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1560,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"15199:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1563,"indexExpression":{"id":1562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15205:10:9","subExpression":{"id":1561,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"15205:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15199:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15087:129:9","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1547,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"15120:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1548,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1472,"src":"15130:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15120:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1554,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"15162:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1557,"indexExpression":{"id":1556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15169:9:9","subExpression":{"id":1555,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"15169:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15162:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15120:59:9","trueExpression":{"baseExpression":{"id":1550,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"15142:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1553,"indexExpression":{"id":1552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15149:9:9","subExpression":{"id":1551,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"15149:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15142:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1559,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15119:61:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"15075:141:9"},{"expression":{"id":1573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1566,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"15230:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1568,"indexExpression":{"id":1567,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"15237:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15230:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1570,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"15249:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1571,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1543,"src":"15252:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1569,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"15242:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":1572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15242:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"15230:24:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1574,"nodeType":"ExpressionStatement","src":"15230:24:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1521,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"14952:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1522,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"14956:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14952:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1576,"initializationExpression":{"assignments":[1518],"declarations":[{"constant":false,"id":1518,"mutability":"mutable","name":"i","nameLocation":"14945:1:9","nodeType":"VariableDeclaration","scope":1576,"src":"14937:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1517,"name":"uint256","nodeType":"ElementaryTypeName","src":"14937:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1520,"initialValue":{"hexValue":"30","id":1519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14949:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14937:13:9"},"loopExpression":{"expression":{"id":1525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"14971:3:9","subExpression":{"id":1524,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"14971:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1526,"nodeType":"ExpressionStatement","src":"14971:3:9"},"nodeType":"ForStatement","src":"14932:333:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1577,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"15279:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15295:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15279:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1597,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1472,"src":"15520:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15532:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15520:13:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1609,"nodeType":"Block","src":"15582:40:9","statements":[{"expression":{"baseExpression":{"id":1605,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"15603:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1607,"indexExpression":{"hexValue":"30","id":1606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15609:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15603:8:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1470,"id":1608,"nodeType":"Return","src":"15596:15:9"}]},"id":1610,"nodeType":"IfStatement","src":"15516:106:9","trueBody":{"id":1604,"nodeType":"Block","src":"15535:41:9","statements":[{"expression":{"baseExpression":{"id":1600,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"15556:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1602,"indexExpression":{"hexValue":"30","id":1601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15563:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15556:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1470,"id":1603,"nodeType":"Return","src":"15549:16:9"}]}},"id":1611,"nodeType":"IfStatement","src":"15275:347:9","trueBody":{"id":1596,"nodeType":"Block","src":"15298:212:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1580,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"15316:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1581,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"15328:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15334:6:9","memberName":"length","nodeType":"MemberAccess","src":"15328:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15316:24:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1588,"nodeType":"IfStatement","src":"15312:100:9","trueBody":{"id":1587,"nodeType":"Block","src":"15342:70:9","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1584,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"15367:28:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15367:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1586,"nodeType":"RevertStatement","src":"15360:37:9"}]}},{"id":1595,"nodeType":"UncheckedBlock","src":"15425:75:9","statements":[{"expression":{"baseExpression":{"id":1589,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"15460:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1593,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1590,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"15467:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15483:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15467:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15460:25:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1470,"id":1594,"nodeType":"Return","src":"15453:32:9"}]}]}}]},"documentation":{"id":1447,"nodeType":"StructuredDocumentation","src":"12202:1097:9","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":1613,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"13313:17:9","nodeType":"FunctionDefinition","parameters":{"id":1467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1450,"mutability":"mutable","name":"proof","nameLocation":"13357:5:9","nodeType":"VariableDeclaration","scope":1613,"src":"13340:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1448,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13340:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1449,"nodeType":"ArrayTypeName","src":"13340:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1453,"mutability":"mutable","name":"proofFlags","nameLocation":"13386:10:9","nodeType":"VariableDeclaration","scope":1613,"src":"13372:24:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1451,"name":"bool","nodeType":"ElementaryTypeName","src":"13372:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1452,"nodeType":"ArrayTypeName","src":"13372:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1456,"mutability":"mutable","name":"leaves","nameLocation":"13423:6:9","nodeType":"VariableDeclaration","scope":1613,"src":"13406:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1454,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13406:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1455,"nodeType":"ArrayTypeName","src":"13406:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1466,"mutability":"mutable","name":"hasher","nameLocation":"13489:6:9","nodeType":"VariableDeclaration","scope":1613,"src":"13439:56:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1465,"nodeType":"FunctionTypeName","parameterTypes":{"id":1461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1458,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1465,"src":"13448:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1457,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13448:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1460,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1465,"src":"13457:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1459,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13457:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13447:18:9"},"returnParameterTypes":{"id":1464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1463,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1465,"src":"13480:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1462,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13480:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13479:9:9"},"src":"13439:56:9","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"13330:171:9"},"returnParameters":{"id":1470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1469,"mutability":"mutable","name":"merkleRoot","nameLocation":"13533:10:9","nodeType":"VariableDeclaration","scope":1613,"src":"13525:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1468,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13525:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13524:20:9"},"scope":2002,"src":"13304:2324:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1638,"nodeType":"Block","src":"16436:84:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1631,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"16479:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1632,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1620,"src":"16486:10:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":1633,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1625,"src":"16498:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":1630,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[1797,2001],"referencedDeclaration":1797,"src":"16453:25:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":1634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16453:52:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1635,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1622,"src":"16509:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"16453:60:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1629,"id":1637,"nodeType":"Return","src":"16446:67:9"}]},"documentation":{"id":1614,"nodeType":"StructuredDocumentation","src":"15634:603:9","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."},"id":1639,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"16251:24:9","nodeType":"FunctionDefinition","parameters":{"id":1626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1617,"mutability":"mutable","name":"proof","nameLocation":"16304:5:9","nodeType":"VariableDeclaration","scope":1639,"src":"16285:24:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1615,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16285:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1616,"nodeType":"ArrayTypeName","src":"16285:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1620,"mutability":"mutable","name":"proofFlags","nameLocation":"16335:10:9","nodeType":"VariableDeclaration","scope":1639,"src":"16319:26:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1618,"name":"bool","nodeType":"ElementaryTypeName","src":"16319:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1619,"nodeType":"ArrayTypeName","src":"16319:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1622,"mutability":"mutable","name":"root","nameLocation":"16363:4:9","nodeType":"VariableDeclaration","scope":1639,"src":"16355:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1621,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16355:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1625,"mutability":"mutable","name":"leaves","nameLocation":"16394:6:9","nodeType":"VariableDeclaration","scope":1639,"src":"16377:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1623,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16377:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1624,"nodeType":"ArrayTypeName","src":"16377:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"16275:131:9"},"returnParameters":{"id":1629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1628,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1639,"src":"16430:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1627,"name":"bool","nodeType":"ElementaryTypeName","src":"16430:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16429:6:9"},"scope":2002,"src":"16242:278:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1796,"nodeType":"Block","src":"17820:2104:9","statements":[{"assignments":[1655],"declarations":[{"constant":false,"id":1655,"mutability":"mutable","name":"leavesLen","nameLocation":"18212:9:9","nodeType":"VariableDeclaration","scope":1796,"src":"18204:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1654,"name":"uint256","nodeType":"ElementaryTypeName","src":"18204:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1658,"initialValue":{"expression":{"id":1656,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"18224:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18231:6:9","memberName":"length","nodeType":"MemberAccess","src":"18224:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18204:33:9"},{"assignments":[1660],"declarations":[{"constant":false,"id":1660,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"18255:13:9","nodeType":"VariableDeclaration","scope":1796,"src":"18247:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1659,"name":"uint256","nodeType":"ElementaryTypeName","src":"18247:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1663,"initialValue":{"expression":{"id":1661,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"18271:10:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18282:6:9","memberName":"length","nodeType":"MemberAccess","src":"18271:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18247:41:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1664,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1655,"src":"18336:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1665,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1643,"src":"18348:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18354:6:9","memberName":"length","nodeType":"MemberAccess","src":"18348:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18336:24:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1668,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"18364:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18380:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"18364:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18336:45:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1676,"nodeType":"IfStatement","src":"18332:113:9","trueBody":{"id":1675,"nodeType":"Block","src":"18383:62:9","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1672,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"18404:28:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18404:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1674,"nodeType":"RevertStatement","src":"18397:37:9"}]}},{"assignments":[1681],"declarations":[{"constant":false,"id":1681,"mutability":"mutable","name":"hashes","nameLocation":"18706:6:9","nodeType":"VariableDeclaration","scope":1796,"src":"18689:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1679,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18689:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1680,"nodeType":"ArrayTypeName","src":"18689:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1687,"initialValue":{"arguments":[{"id":1685,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"18729:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1684,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"18715:13:9","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1682,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18719:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1683,"nodeType":"ArrayTypeName","src":"18719:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18715:28:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"18689:54:9"},{"assignments":[1689],"declarations":[{"constant":false,"id":1689,"mutability":"mutable","name":"leafPos","nameLocation":"18761:7:9","nodeType":"VariableDeclaration","scope":1796,"src":"18753:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1688,"name":"uint256","nodeType":"ElementaryTypeName","src":"18753:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1691,"initialValue":{"hexValue":"30","id":1690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18771:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18753:19:9"},{"assignments":[1693],"declarations":[{"constant":false,"id":1693,"mutability":"mutable","name":"hashPos","nameLocation":"18790:7:9","nodeType":"VariableDeclaration","scope":1796,"src":"18782:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1692,"name":"uint256","nodeType":"ElementaryTypeName","src":"18782:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1695,"initialValue":{"hexValue":"30","id":1694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18800:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18782:19:9"},{"assignments":[1697],"declarations":[{"constant":false,"id":1697,"mutability":"mutable","name":"proofPos","nameLocation":"18819:8:9","nodeType":"VariableDeclaration","scope":1796,"src":"18811:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1696,"name":"uint256","nodeType":"ElementaryTypeName","src":"18811:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1699,"initialValue":{"hexValue":"30","id":1698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18830:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18811:20:9"},{"body":{"id":1759,"nodeType":"Block","src":"19251:310:9","statements":[{"assignments":[1711],"declarations":[{"constant":false,"id":1711,"mutability":"mutable","name":"a","nameLocation":"19273:1:9","nodeType":"VariableDeclaration","scope":1759,"src":"19265:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1710,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19265:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1724,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1712,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1689,"src":"19277:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1713,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1655,"src":"19287:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19277:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1719,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1681,"src":"19319:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1722,"indexExpression":{"id":1721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19326:9:9","subExpression":{"id":1720,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"19326:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19319:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19277:59:9","trueExpression":{"baseExpression":{"id":1715,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"19299:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1718,"indexExpression":{"id":1717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19306:9:9","subExpression":{"id":1716,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1689,"src":"19306:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19299:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"19265:71:9"},{"assignments":[1726],"declarations":[{"constant":false,"id":1726,"mutability":"mutable","name":"b","nameLocation":"19358:1:9","nodeType":"VariableDeclaration","scope":1759,"src":"19350:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1725,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19350:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1748,"initialValue":{"condition":{"baseExpression":{"id":1727,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"19362:10:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1729,"indexExpression":{"id":1728,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"19373:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19362:13:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1743,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1643,"src":"19474:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1746,"indexExpression":{"id":1745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19480:10:9","subExpression":{"id":1744,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"19480:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19474:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19362:129:9","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1730,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1689,"src":"19395:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1731,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1655,"src":"19405:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19395:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1737,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1681,"src":"19437:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1740,"indexExpression":{"id":1739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19444:9:9","subExpression":{"id":1738,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"19444:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19437:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19395:59:9","trueExpression":{"baseExpression":{"id":1733,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"19417:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1736,"indexExpression":{"id":1735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19424:9:9","subExpression":{"id":1734,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1689,"src":"19424:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19417:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1742,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19394:61:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"19350:141:9"},{"expression":{"id":1757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1749,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1681,"src":"19505:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1751,"indexExpression":{"id":1750,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"19512:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"19505:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1754,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1711,"src":"19545:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1755,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1726,"src":"19548:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1752,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"19517:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$929_$","typeString":"type(library Hashes)"}},"id":1753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19524:20:9","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":916,"src":"19517:27:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19517:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"19505:45:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1758,"nodeType":"ExpressionStatement","src":"19505:45:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1704,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"19227:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1705,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"19231:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19227:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1760,"initializationExpression":{"assignments":[1701],"declarations":[{"constant":false,"id":1701,"mutability":"mutable","name":"i","nameLocation":"19220:1:9","nodeType":"VariableDeclaration","scope":1760,"src":"19212:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1700,"name":"uint256","nodeType":"ElementaryTypeName","src":"19212:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1703,"initialValue":{"hexValue":"30","id":1702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19224:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"19212:13:9"},"loopExpression":{"expression":{"id":1708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19246:3:9","subExpression":{"id":1707,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"19246:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1709,"nodeType":"ExpressionStatement","src":"19246:3:9"},"nodeType":"ForStatement","src":"19207:354:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1761,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"19575:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19591:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19575:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1781,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1655,"src":"19816:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19828:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19816:13:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1793,"nodeType":"Block","src":"19878:40:9","statements":[{"expression":{"baseExpression":{"id":1789,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1643,"src":"19899:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1791,"indexExpression":{"hexValue":"30","id":1790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19905:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19899:8:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1653,"id":1792,"nodeType":"Return","src":"19892:15:9"}]},"id":1794,"nodeType":"IfStatement","src":"19812:106:9","trueBody":{"id":1788,"nodeType":"Block","src":"19831:41:9","statements":[{"expression":{"baseExpression":{"id":1784,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"19852:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1786,"indexExpression":{"hexValue":"30","id":1785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19859:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19852:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1653,"id":1787,"nodeType":"Return","src":"19845:16:9"}]}},"id":1795,"nodeType":"IfStatement","src":"19571:347:9","trueBody":{"id":1780,"nodeType":"Block","src":"19594:212:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1764,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"19612:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1765,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1643,"src":"19624:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19630:6:9","memberName":"length","nodeType":"MemberAccess","src":"19624:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19612:24:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1772,"nodeType":"IfStatement","src":"19608:100:9","trueBody":{"id":1771,"nodeType":"Block","src":"19638:70:9","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1768,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"19663:28:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19663:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1770,"nodeType":"RevertStatement","src":"19656:37:9"}]}},{"id":1779,"nodeType":"UncheckedBlock","src":"19721:75:9","statements":[{"expression":{"baseExpression":{"id":1773,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1681,"src":"19756:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1777,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1774,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"19763:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19779:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"19763:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19756:25:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1653,"id":1778,"nodeType":"Return","src":"19749:32:9"}]}]}}]},"documentation":{"id":1640,"nodeType":"StructuredDocumentation","src":"16526:1102:9","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":1797,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"17642:25:9","nodeType":"FunctionDefinition","parameters":{"id":1650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1643,"mutability":"mutable","name":"proof","nameLocation":"17696:5:9","nodeType":"VariableDeclaration","scope":1797,"src":"17677:24:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1641,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17677:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1642,"nodeType":"ArrayTypeName","src":"17677:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1646,"mutability":"mutable","name":"proofFlags","nameLocation":"17727:10:9","nodeType":"VariableDeclaration","scope":1797,"src":"17711:26:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1644,"name":"bool","nodeType":"ElementaryTypeName","src":"17711:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1645,"nodeType":"ArrayTypeName","src":"17711:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1649,"mutability":"mutable","name":"leaves","nameLocation":"17764:6:9","nodeType":"VariableDeclaration","scope":1797,"src":"17747:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1647,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17747:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1648,"nodeType":"ArrayTypeName","src":"17747:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"17667:109:9"},"returnParameters":{"id":1653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1652,"mutability":"mutable","name":"merkleRoot","nameLocation":"17808:10:9","nodeType":"VariableDeclaration","scope":1797,"src":"17800:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1651,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17800:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"17799:20:9"},"scope":2002,"src":"17633:2291:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1833,"nodeType":"Block","src":"20795:92:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1825,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"20838:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1826,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1804,"src":"20845:10:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":1827,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"20857:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1828,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1819,"src":"20865:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":1824,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[1797,2001],"referencedDeclaration":2001,"src":"20812:25:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":1829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20812:60:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1830,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1806,"src":"20876:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"20812:68:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1823,"id":1832,"nodeType":"Return","src":"20805:75:9"}]},"documentation":{"id":1798,"nodeType":"StructuredDocumentation","src":"19930:600:9","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."},"id":1834,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"20544:24:9","nodeType":"FunctionDefinition","parameters":{"id":1820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1801,"mutability":"mutable","name":"proof","nameLocation":"20597:5:9","nodeType":"VariableDeclaration","scope":1834,"src":"20578:24:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1799,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20578:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1800,"nodeType":"ArrayTypeName","src":"20578:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1804,"mutability":"mutable","name":"proofFlags","nameLocation":"20628:10:9","nodeType":"VariableDeclaration","scope":1834,"src":"20612:26:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1802,"name":"bool","nodeType":"ElementaryTypeName","src":"20612:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1803,"nodeType":"ArrayTypeName","src":"20612:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1806,"mutability":"mutable","name":"root","nameLocation":"20656:4:9","nodeType":"VariableDeclaration","scope":1834,"src":"20648:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1805,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20648:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1809,"mutability":"mutable","name":"leaves","nameLocation":"20687:6:9","nodeType":"VariableDeclaration","scope":1834,"src":"20670:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1807,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20670:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1808,"nodeType":"ArrayTypeName","src":"20670:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1819,"mutability":"mutable","name":"hasher","nameLocation":"20753:6:9","nodeType":"VariableDeclaration","scope":1834,"src":"20703:56:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1818,"nodeType":"FunctionTypeName","parameterTypes":{"id":1814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1811,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1818,"src":"20712:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1810,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20712:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1813,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1818,"src":"20721:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1812,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20721:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"20711:18:9"},"returnParameterTypes":{"id":1817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1816,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1818,"src":"20744:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1815,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20744:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"20743:9:9"},"src":"20703:56:9","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"20568:197:9"},"returnParameters":{"id":1823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1822,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1834,"src":"20789:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1821,"name":"bool","nodeType":"ElementaryTypeName","src":"20789:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"20788:6:9"},"scope":2002,"src":"20535:352:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2000,"nodeType":"Block","src":"22250:2083:9","statements":[{"assignments":[1860],"declarations":[{"constant":false,"id":1860,"mutability":"mutable","name":"leavesLen","nameLocation":"22642:9:9","nodeType":"VariableDeclaration","scope":2000,"src":"22634:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1859,"name":"uint256","nodeType":"ElementaryTypeName","src":"22634:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1863,"initialValue":{"expression":{"id":1861,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1844,"src":"22654:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22661:6:9","memberName":"length","nodeType":"MemberAccess","src":"22654:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22634:33:9"},{"assignments":[1865],"declarations":[{"constant":false,"id":1865,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"22685:13:9","nodeType":"VariableDeclaration","scope":2000,"src":"22677:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1864,"name":"uint256","nodeType":"ElementaryTypeName","src":"22677:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1868,"initialValue":{"expression":{"id":1866,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1841,"src":"22701:10:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22712:6:9","memberName":"length","nodeType":"MemberAccess","src":"22701:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22677:41:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1869,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1860,"src":"22766:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1870,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1838,"src":"22778:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22784:6:9","memberName":"length","nodeType":"MemberAccess","src":"22778:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22766:24:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1873,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"22794:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22810:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22794:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22766:45:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1881,"nodeType":"IfStatement","src":"22762:113:9","trueBody":{"id":1880,"nodeType":"Block","src":"22813:62:9","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1877,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"22834:28:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22834:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1879,"nodeType":"RevertStatement","src":"22827:37:9"}]}},{"assignments":[1886],"declarations":[{"constant":false,"id":1886,"mutability":"mutable","name":"hashes","nameLocation":"23136:6:9","nodeType":"VariableDeclaration","scope":2000,"src":"23119:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1884,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23119:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1885,"nodeType":"ArrayTypeName","src":"23119:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1892,"initialValue":{"arguments":[{"id":1890,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"23159:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1889,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"23145:13:9","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1887,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23149:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1888,"nodeType":"ArrayTypeName","src":"23149:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23145:28:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"23119:54:9"},{"assignments":[1894],"declarations":[{"constant":false,"id":1894,"mutability":"mutable","name":"leafPos","nameLocation":"23191:7:9","nodeType":"VariableDeclaration","scope":2000,"src":"23183:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1893,"name":"uint256","nodeType":"ElementaryTypeName","src":"23183:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1896,"initialValue":{"hexValue":"30","id":1895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23201:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23183:19:9"},{"assignments":[1898],"declarations":[{"constant":false,"id":1898,"mutability":"mutable","name":"hashPos","nameLocation":"23220:7:9","nodeType":"VariableDeclaration","scope":2000,"src":"23212:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1897,"name":"uint256","nodeType":"ElementaryTypeName","src":"23212:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1900,"initialValue":{"hexValue":"30","id":1899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23230:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23212:19:9"},{"assignments":[1902],"declarations":[{"constant":false,"id":1902,"mutability":"mutable","name":"proofPos","nameLocation":"23249:8:9","nodeType":"VariableDeclaration","scope":2000,"src":"23241:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1901,"name":"uint256","nodeType":"ElementaryTypeName","src":"23241:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1904,"initialValue":{"hexValue":"30","id":1903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23260:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23241:20:9"},{"body":{"id":1963,"nodeType":"Block","src":"23681:289:9","statements":[{"assignments":[1916],"declarations":[{"constant":false,"id":1916,"mutability":"mutable","name":"a","nameLocation":"23703:1:9","nodeType":"VariableDeclaration","scope":1963,"src":"23695:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1915,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23695:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1929,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1917,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1894,"src":"23707:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1918,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1860,"src":"23717:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23707:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1924,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"23749:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1927,"indexExpression":{"id":1926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23756:9:9","subExpression":{"id":1925,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"23756:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23749:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23707:59:9","trueExpression":{"baseExpression":{"id":1920,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1844,"src":"23729:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1923,"indexExpression":{"id":1922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23736:9:9","subExpression":{"id":1921,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1894,"src":"23736:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23729:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"23695:71:9"},{"assignments":[1931],"declarations":[{"constant":false,"id":1931,"mutability":"mutable","name":"b","nameLocation":"23788:1:9","nodeType":"VariableDeclaration","scope":1963,"src":"23780:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1930,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23780:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1953,"initialValue":{"condition":{"baseExpression":{"id":1932,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1841,"src":"23792:10:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1934,"indexExpression":{"id":1933,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"23803:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23792:13:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1948,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1838,"src":"23904:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1951,"indexExpression":{"id":1950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23910:10:9","subExpression":{"id":1949,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1902,"src":"23910:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23904:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23792:129:9","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1935,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1894,"src":"23825:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1936,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1860,"src":"23835:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23825:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1942,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"23867:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1945,"indexExpression":{"id":1944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23874:9:9","subExpression":{"id":1943,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"23874:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23867:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23825:59:9","trueExpression":{"baseExpression":{"id":1938,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1844,"src":"23847:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1941,"indexExpression":{"id":1940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23854:9:9","subExpression":{"id":1939,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1894,"src":"23854:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23847:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1947,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"23824:61:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"23780:141:9"},{"expression":{"id":1961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1954,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"23935:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1956,"indexExpression":{"id":1955,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"23942:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23935:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1958,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"23954:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1959,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1931,"src":"23957:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1957,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"23947:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":1960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23947:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"23935:24:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1962,"nodeType":"ExpressionStatement","src":"23935:24:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1909,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"23657:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1910,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"23661:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23657:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1964,"initializationExpression":{"assignments":[1906],"declarations":[{"constant":false,"id":1906,"mutability":"mutable","name":"i","nameLocation":"23650:1:9","nodeType":"VariableDeclaration","scope":1964,"src":"23642:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1905,"name":"uint256","nodeType":"ElementaryTypeName","src":"23642:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1908,"initialValue":{"hexValue":"30","id":1907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23654:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23642:13:9"},"loopExpression":{"expression":{"id":1913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23676:3:9","subExpression":{"id":1912,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"23676:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1914,"nodeType":"ExpressionStatement","src":"23676:3:9"},"nodeType":"ForStatement","src":"23637:333:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1965,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"23984:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24000:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"23984:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1985,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1860,"src":"24225:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24237:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"24225:13:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1997,"nodeType":"Block","src":"24287:40:9","statements":[{"expression":{"baseExpression":{"id":1993,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1838,"src":"24308:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1995,"indexExpression":{"hexValue":"30","id":1994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24314:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24308:8:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1858,"id":1996,"nodeType":"Return","src":"24301:15:9"}]},"id":1998,"nodeType":"IfStatement","src":"24221:106:9","trueBody":{"id":1992,"nodeType":"Block","src":"24240:41:9","statements":[{"expression":{"baseExpression":{"id":1988,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1844,"src":"24261:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1990,"indexExpression":{"hexValue":"30","id":1989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24268:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24261:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1858,"id":1991,"nodeType":"Return","src":"24254:16:9"}]}},"id":1999,"nodeType":"IfStatement","src":"23980:347:9","trueBody":{"id":1984,"nodeType":"Block","src":"24003:212:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1968,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1902,"src":"24021:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1969,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1838,"src":"24033:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24039:6:9","memberName":"length","nodeType":"MemberAccess","src":"24033:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24021:24:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1976,"nodeType":"IfStatement","src":"24017:100:9","trueBody":{"id":1975,"nodeType":"Block","src":"24047:70:9","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1972,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"24072:28:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24072:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1974,"nodeType":"RevertStatement","src":"24065:37:9"}]}},{"id":1983,"nodeType":"UncheckedBlock","src":"24130:75:9","statements":[{"expression":{"baseExpression":{"id":1977,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"24165:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1981,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1978,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"24172:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24188:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24172:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24165:25:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1858,"id":1982,"nodeType":"Return","src":"24158:32:9"}]}]}}]},"documentation":{"id":1835,"nodeType":"StructuredDocumentation","src":"20893:1099:9","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":2001,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"22006:25:9","nodeType":"FunctionDefinition","parameters":{"id":1855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1838,"mutability":"mutable","name":"proof","nameLocation":"22060:5:9","nodeType":"VariableDeclaration","scope":2001,"src":"22041:24:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1836,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22041:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1837,"nodeType":"ArrayTypeName","src":"22041:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1841,"mutability":"mutable","name":"proofFlags","nameLocation":"22091:10:9","nodeType":"VariableDeclaration","scope":2001,"src":"22075:26:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1839,"name":"bool","nodeType":"ElementaryTypeName","src":"22075:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1840,"nodeType":"ArrayTypeName","src":"22075:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1844,"mutability":"mutable","name":"leaves","nameLocation":"22128:6:9","nodeType":"VariableDeclaration","scope":2001,"src":"22111:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1842,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22111:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1843,"nodeType":"ArrayTypeName","src":"22111:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1854,"mutability":"mutable","name":"hasher","nameLocation":"22194:6:9","nodeType":"VariableDeclaration","scope":2001,"src":"22144:56:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1853,"nodeType":"FunctionTypeName","parameterTypes":{"id":1849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1846,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1853,"src":"22153:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1845,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22153:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1848,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1853,"src":"22162:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1847,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22162:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22152:18:9"},"returnParameterTypes":{"id":1852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1851,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1853,"src":"22185:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1850,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22185:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22184:9:9"},"src":"22144:56:9","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"22031:175:9"},"returnParameters":{"id":1858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1857,"mutability":"mutable","name":"merkleRoot","nameLocation":"22238:10:9","nodeType":"VariableDeclaration","scope":2001,"src":"22230:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1856,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22230:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22229:20:9"},"scope":2002,"src":"21997:2336:9","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":2003,"src":"1353:22982:9","usedErrors":[937],"usedEvents":[]}],"src":"206:24130:9"},"id":9},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[2014]},"id":2015,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2004,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:10"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":2005,"nodeType":"StructuredDocumentation","src":"141:280:10","text":" @dev Interface of the ERC-165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[ERC].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":2014,"linearizedBaseContracts":[2014],"name":"IERC165","nameLocation":"432:7:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2006,"nodeType":"StructuredDocumentation","src":"446:340:10","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":2013,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"800:17:10","nodeType":"FunctionDefinition","parameters":{"id":2009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2008,"mutability":"mutable","name":"interfaceId","nameLocation":"825:11:10","nodeType":"VariableDeclaration","scope":2013,"src":"818:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2007,"name":"bytes4","nodeType":"ElementaryTypeName","src":"818:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"817:20:10"},"returnParameters":{"id":2012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2011,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2013,"src":"861:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2010,"name":"bool","nodeType":"ElementaryTypeName","src":"861:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"860:6:10"},"scope":2014,"src":"791:76:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2015,"src":"422:447:10","usedErrors":[],"usedEvents":[]}],"src":"115:755:10"},"id":10},"contracts/MultiMerkleStash.sol":{"ast":{"absolutePath":"contracts/MultiMerkleStash.sol","exportedSymbols":{"Address":[837],"Context":[867],"Hashes":[929],"IERC1363":[81],"IERC20":[167],"MerkleProof":[2002],"MultiMerkleStash":[2317],"Ownable":[2413],"SafeERC20":[578]},"id":2318,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2016,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"49:23:11"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":2017,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2318,"sourceUnit":2003,"src":"74:68:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/Ownable.sol","file":"./Ownable.sol","id":2018,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2318,"sourceUnit":2414,"src":"143:23:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":2019,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2318,"sourceUnit":168,"src":"167:56:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":2020,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2318,"sourceUnit":579,"src":"224:65:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2021,"name":"Ownable","nameLocations":["321:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":2413,"src":"321:7:11"},"id":2022,"nodeType":"InheritanceSpecifier","src":"321:7:11"}],"canonicalName":"MultiMerkleStash","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2317,"linearizedBaseContracts":[2317,2413,867],"name":"MultiMerkleStash","nameLocation":"301:16:11","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2026,"libraryName":{"id":2023,"name":"SafeERC20","nameLocations":["339:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":578,"src":"339:9:11"},"nodeType":"UsingForDirective","src":"333:27:11","typeName":{"id":2025,"nodeType":"UserDefinedTypeName","pathNode":{"id":2024,"name":"IERC20","nameLocations":["353:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":167,"src":"353:6:11"},"referencedDeclaration":167,"src":"353:6:11","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}}},{"canonicalName":"MultiMerkleStash.claimParam","id":2036,"members":[{"constant":false,"id":2028,"mutability":"mutable","name":"token","nameLocation":"398:5:11","nodeType":"VariableDeclaration","scope":2036,"src":"390:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2027,"name":"address","nodeType":"ElementaryTypeName","src":"390:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2030,"mutability":"mutable","name":"index","nameLocation":"419:5:11","nodeType":"VariableDeclaration","scope":2036,"src":"411:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2029,"name":"uint256","nodeType":"ElementaryTypeName","src":"411:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2032,"mutability":"mutable","name":"amount","nameLocation":"440:6:11","nodeType":"VariableDeclaration","scope":2036,"src":"432:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2031,"name":"uint256","nodeType":"ElementaryTypeName","src":"432:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2035,"mutability":"mutable","name":"merkleProof","nameLocation":"464:11:11","nodeType":"VariableDeclaration","scope":2036,"src":"454:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2033,"name":"bytes32","nodeType":"ElementaryTypeName","src":"454:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2034,"nodeType":"ArrayTypeName","src":"454:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"name":"claimParam","nameLocation":"371:10:11","nodeType":"StructDefinition","scope":2317,"src":"364:116:11","visibility":"public"},{"constant":false,"functionSelector":"e2111586","id":2040,"mutability":"mutable","name":"merkleRoot","nameLocation":"568:10:11","nodeType":"VariableDeclaration","scope":2317,"src":"533:45:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bytes32_$","typeString":"mapping(address => bytes32)"},"typeName":{"id":2039,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2037,"name":"address","nodeType":"ElementaryTypeName","src":"541:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"533:27:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bytes32_$","typeString":"mapping(address => bytes32)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2038,"name":"bytes32","nodeType":"ElementaryTypeName","src":"552:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},"visibility":"public"},{"constant":false,"functionSelector":"1c1b8772","id":2044,"mutability":"mutable","name":"update","nameLocation":"617:6:11","nodeType":"VariableDeclaration","scope":2317,"src":"582:41:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2043,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2041,"name":"address","nodeType":"ElementaryTypeName","src":"590:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"582:27:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2042,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"id":2052,"mutability":"mutable","name":"claimedBitMap","nameLocation":"745:13:11","nodeType":"VariableDeclaration","scope":2317,"src":"669:89:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => uint256)))"},"typeName":{"id":2051,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2045,"name":"address","nodeType":"ElementaryTypeName","src":"677:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"669:67:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => uint256)))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2050,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2046,"name":"uint256","nodeType":"ElementaryTypeName","src":"696:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"688:47:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2049,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2047,"name":"uint256","nodeType":"ElementaryTypeName","src":"715:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"707:27:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2048,"name":"uint256","nodeType":"ElementaryTypeName","src":"726:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}}},"visibility":"private"},{"body":{"id":2098,"nodeType":"Block","src":"839:255:11","statements":[{"assignments":[2062],"declarations":[{"constant":false,"id":2062,"mutability":"mutable","name":"claimedWordIndex","nameLocation":"853:16:11","nodeType":"VariableDeclaration","scope":2098,"src":"845:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2061,"name":"uint256","nodeType":"ElementaryTypeName","src":"845:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2066,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2063,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2056,"src":"872:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"323536","id":2064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"880:3:11","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"src":"872:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"845:38:11"},{"assignments":[2068],"declarations":[{"constant":false,"id":2068,"mutability":"mutable","name":"claimedBitIndex","nameLocation":"897:15:11","nodeType":"VariableDeclaration","scope":2098,"src":"889:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2067,"name":"uint256","nodeType":"ElementaryTypeName","src":"889:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2072,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2069,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2056,"src":"915:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"323536","id":2070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"923:3:11","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"src":"915:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"889:37:11"},{"assignments":[2074],"declarations":[{"constant":false,"id":2074,"mutability":"mutable","name":"claimedWord","nameLocation":"940:11:11","nodeType":"VariableDeclaration","scope":2098,"src":"932:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2073,"name":"uint256","nodeType":"ElementaryTypeName","src":"932:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2084,"initialValue":{"baseExpression":{"baseExpression":{"baseExpression":{"id":2075,"name":"claimedBitMap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"954:13:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => uint256)))"}},"id":2077,"indexExpression":{"id":2076,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"968:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"954:20:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"}},"id":2081,"indexExpression":{"baseExpression":{"id":2078,"name":"update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"975:6:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2080,"indexExpression":{"id":2079,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"982:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"975:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"954:35:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2083,"indexExpression":{"id":2082,"name":"claimedWordIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"990:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"954:53:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"932:75:11"},{"assignments":[2086],"declarations":[{"constant":false,"id":2086,"mutability":"mutable","name":"mask","nameLocation":"1021:4:11","nodeType":"VariableDeclaration","scope":2098,"src":"1013:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2085,"name":"uint256","nodeType":"ElementaryTypeName","src":"1013:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2091,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1029:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2088,"name":"claimedBitIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"1034:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1029:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2090,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1028:22:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1013:37:11"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2092,"name":"claimedWord","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"1063:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2093,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"1077:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1063:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2095,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"1085:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1063:26:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2060,"id":2097,"nodeType":"Return","src":"1056:33:11"}]},"functionSelector":"562beba8","id":2099,"implemented":true,"kind":"function","modifiers":[],"name":"isClaimed","nameLocation":"772:9:11","nodeType":"FunctionDefinition","parameters":{"id":2057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2054,"mutability":"mutable","name":"token","nameLocation":"790:5:11","nodeType":"VariableDeclaration","scope":2099,"src":"782:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2053,"name":"address","nodeType":"ElementaryTypeName","src":"782:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2056,"mutability":"mutable","name":"index","nameLocation":"805:5:11","nodeType":"VariableDeclaration","scope":2099,"src":"797:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2055,"name":"uint256","nodeType":"ElementaryTypeName","src":"797:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"781:30:11"},"returnParameters":{"id":2060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2059,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2099,"src":"833:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2058,"name":"bool","nodeType":"ElementaryTypeName","src":"833:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"832:6:11"},"scope":2317,"src":"763:331:11","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":2143,"nodeType":"Block","src":"1157:232:11","statements":[{"assignments":[2107],"declarations":[{"constant":false,"id":2107,"mutability":"mutable","name":"claimedWordIndex","nameLocation":"1171:16:11","nodeType":"VariableDeclaration","scope":2143,"src":"1163:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2106,"name":"uint256","nodeType":"ElementaryTypeName","src":"1163:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2111,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2108,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"1190:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"323536","id":2109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1198:3:11","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"src":"1190:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1163:38:11"},{"assignments":[2113],"declarations":[{"constant":false,"id":2113,"mutability":"mutable","name":"claimedBitIndex","nameLocation":"1215:15:11","nodeType":"VariableDeclaration","scope":2143,"src":"1207:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2112,"name":"uint256","nodeType":"ElementaryTypeName","src":"1207:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2117,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2114,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"1233:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"323536","id":2115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1241:3:11","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"src":"1233:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1207:37:11"},{"expression":{"id":2141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"baseExpression":{"id":2118,"name":"claimedBitMap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"1250:13:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => uint256)))"}},"id":2124,"indexExpression":{"id":2119,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"1264:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1250:20:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"}},"id":2125,"indexExpression":{"baseExpression":{"id":2120,"name":"update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"1271:6:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2122,"indexExpression":{"id":2121,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"1278:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1271:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1250:35:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2126,"indexExpression":{"id":2123,"name":"claimedWordIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"1286:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1250:53:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":2127,"name":"claimedBitMap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"1306:13:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(address => mapping(uint256 => mapping(uint256 => uint256)))"}},"id":2129,"indexExpression":{"id":2128,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"1320:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1306:20:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(uint256 => uint256))"}},"id":2133,"indexExpression":{"baseExpression":{"id":2130,"name":"update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"1327:6:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2132,"indexExpression":{"id":2131,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"1334:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1327:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1306:35:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2135,"indexExpression":{"id":2134,"name":"claimedWordIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"1342:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1306:53:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1363:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2137,"name":"claimedBitIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"1368:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1363:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2139,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1362:22:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1306:78:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1250:134:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2142,"nodeType":"ExpressionStatement","src":"1250:134:11"}]},"id":2144,"implemented":true,"kind":"function","modifiers":[],"name":"_setClaimed","nameLocation":"1107:11:11","nodeType":"FunctionDefinition","parameters":{"id":2104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2101,"mutability":"mutable","name":"token","nameLocation":"1127:5:11","nodeType":"VariableDeclaration","scope":2144,"src":"1119:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2100,"name":"address","nodeType":"ElementaryTypeName","src":"1119:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2103,"mutability":"mutable","name":"index","nameLocation":"1142:5:11","nodeType":"VariableDeclaration","scope":2144,"src":"1134:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2102,"name":"uint256","nodeType":"ElementaryTypeName","src":"1134:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1118:30:11"},"returnParameters":{"id":2105,"nodeType":"ParameterList","parameters":[],"src":"1157:0:11"},"scope":2317,"src":"1098:291:11","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2222,"nodeType":"Block","src":"1510:456:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2159,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2040,"src":"1524:10:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bytes32_$","typeString":"mapping(address => bytes32)"}},"id":2161,"indexExpression":{"id":2160,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"1535:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1524:17:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1545:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1524:22:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"66726f7a656e","id":2164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1548:8:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_d1218620da09f6e7d360a42f242ae4d3ee7430442ec5be1555963e53ec012550","typeString":"literal_string \"frozen\""},"value":"frozen"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d1218620da09f6e7d360a42f242ae4d3ee7430442ec5be1555963e53ec012550","typeString":"literal_string \"frozen\""}],"id":2158,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1516:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1516:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2166,"nodeType":"ExpressionStatement","src":"1516:41:11"},{"expression":{"arguments":[{"id":2172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1571:24:11","subExpression":{"arguments":[{"id":2169,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"1582:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2170,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2148,"src":"1589:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2168,"name":"isClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"1572:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":2171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1572:23:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"44726f7020616c726561647920636c61696d65642e","id":2173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1597:23:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_2d6fef2814860c16d5c1d12c83be9f1147cd08129c4dc625504ae457c4263177","typeString":"literal_string \"Drop already claimed.\""},"value":"Drop already claimed."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2d6fef2814860c16d5c1d12c83be9f1147cd08129c4dc625504ae457c4263177","typeString":"literal_string \"Drop already claimed.\""}],"id":2167,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1563:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1563:58:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2175,"nodeType":"ExpressionStatement","src":"1563:58:11"},{"assignments":[2177],"declarations":[{"constant":false,"id":2177,"mutability":"mutable","name":"node","nameLocation":"1668:4:11","nodeType":"VariableDeclaration","scope":2222,"src":"1660:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2176,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1660:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2186,"initialValue":{"arguments":[{"arguments":[{"id":2181,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2148,"src":"1702:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2182,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2150,"src":"1709:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2183,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2152,"src":"1718:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2179,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1685:3:11","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2180,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1689:12:11","memberName":"encodePacked","nodeType":"MemberAccess","src":"1685:16:11","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1685:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2178,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1675:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1675:51:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1660:66:11"},{"expression":{"arguments":[{"arguments":[{"id":2190,"name":"merkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2155,"src":"1759:11:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"baseExpression":{"id":2191,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2040,"src":"1772:10:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bytes32_$","typeString":"mapping(address => bytes32)"}},"id":2193,"indexExpression":{"id":2192,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"1783:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1772:17:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2194,"name":"node","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2177,"src":"1791:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2188,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"1740:11:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MerkleProof_$2002_$","typeString":"type(library MerkleProof)"}},"id":2189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1752:6:11","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":958,"src":"1740:18:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":2195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1740:56:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69642070726f6f662e","id":2196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1798:16:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_de1f5bb2d20d4a4d49aebff9944173f9fc2479a4c12613a76f6841cd4875ee3a","typeString":"literal_string \"Invalid proof.\""},"value":"Invalid proof."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_de1f5bb2d20d4a4d49aebff9944173f9fc2479a4c12613a76f6841cd4875ee3a","typeString":"literal_string \"Invalid proof.\""}],"id":2187,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1732:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1732:83:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2198,"nodeType":"ExpressionStatement","src":"1732:83:11"},{"expression":{"arguments":[{"id":2200,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"1834:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2201,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2148,"src":"1841:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2199,"name":"_setClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2144,"src":"1822:11:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1822:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2203,"nodeType":"ExpressionStatement","src":"1822:25:11"},{"expression":{"arguments":[{"id":2208,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2150,"src":"1880:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2209,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2152,"src":"1889:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":2205,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"1860:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2204,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"1853:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$167_$","typeString":"type(contract IERC20)"}},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1853:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$167","typeString":"contract IERC20"}},"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1867:12:11","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":214,"src":"1853:26:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$167_$","typeString":"function (contract IERC20,address,uint256)"}},"id":2210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1853:43:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2211,"nodeType":"ExpressionStatement","src":"1853:43:11"},{"eventCall":{"arguments":[{"id":2213,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"1916:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2214,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2148,"src":"1923:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2215,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2152,"src":"1930:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2216,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2150,"src":"1938:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2217,"name":"update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"1947:6:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2219,"indexExpression":{"id":2218,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"1954:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1947:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2212,"name":"Claimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"1908:7:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256,address,uint256)"}},"id":2220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1908:53:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2221,"nodeType":"EmitStatement","src":"1903:58:11"}]},"functionSelector":"12d18ed6","id":2223,"implemented":true,"kind":"function","modifiers":[],"name":"claim","nameLocation":"1402:5:11","nodeType":"FunctionDefinition","parameters":{"id":2156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2146,"mutability":"mutable","name":"token","nameLocation":"1416:5:11","nodeType":"VariableDeclaration","scope":2223,"src":"1408:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2145,"name":"address","nodeType":"ElementaryTypeName","src":"1408:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2148,"mutability":"mutable","name":"index","nameLocation":"1431:5:11","nodeType":"VariableDeclaration","scope":2223,"src":"1423:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2147,"name":"uint256","nodeType":"ElementaryTypeName","src":"1423:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2150,"mutability":"mutable","name":"account","nameLocation":"1446:7:11","nodeType":"VariableDeclaration","scope":2223,"src":"1438:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2149,"name":"address","nodeType":"ElementaryTypeName","src":"1438:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2152,"mutability":"mutable","name":"amount","nameLocation":"1463:6:11","nodeType":"VariableDeclaration","scope":2223,"src":"1455:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2151,"name":"uint256","nodeType":"ElementaryTypeName","src":"1455:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2155,"mutability":"mutable","name":"merkleProof","nameLocation":"1490:11:11","nodeType":"VariableDeclaration","scope":2223,"src":"1471:30:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2153,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1471:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2154,"nodeType":"ArrayTypeName","src":"1471:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"1407:95:11"},"returnParameters":{"id":2157,"nodeType":"ParameterList","parameters":[],"src":"1510:0:11"},"scope":2317,"src":"1393:573:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2265,"nodeType":"Block","src":"2046:151:11","statements":[{"body":{"id":2263,"nodeType":"Block","src":"2089:104:11","statements":[{"expression":{"arguments":[{"expression":{"baseExpression":{"id":2244,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"2103:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_claimParam_$2036_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiMerkleStash.claimParam calldata[] calldata"}},"id":2246,"indexExpression":{"id":2245,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2233,"src":"2110:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2103:9:11","typeDescriptions":{"typeIdentifier":"t_struct$_claimParam_$2036_calldata_ptr","typeString":"struct MultiMerkleStash.claimParam calldata"}},"id":2247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2113:5:11","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":2028,"src":"2103:15:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":2248,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"2120:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_claimParam_$2036_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiMerkleStash.claimParam calldata[] calldata"}},"id":2250,"indexExpression":{"id":2249,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2233,"src":"2127:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2120:9:11","typeDescriptions":{"typeIdentifier":"t_struct$_claimParam_$2036_calldata_ptr","typeString":"struct MultiMerkleStash.claimParam calldata"}},"id":2251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2130:5:11","memberName":"index","nodeType":"MemberAccess","referencedDeclaration":2030,"src":"2120:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2252,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"2137:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":2253,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"2146:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_claimParam_$2036_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiMerkleStash.claimParam calldata[] calldata"}},"id":2255,"indexExpression":{"id":2254,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2233,"src":"2153:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2146:9:11","typeDescriptions":{"typeIdentifier":"t_struct$_claimParam_$2036_calldata_ptr","typeString":"struct MultiMerkleStash.claimParam calldata"}},"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2156:6:11","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":2032,"src":"2146:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"baseExpression":{"id":2257,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"2164:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_claimParam_$2036_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiMerkleStash.claimParam calldata[] calldata"}},"id":2259,"indexExpression":{"id":2258,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2233,"src":"2171:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2164:9:11","typeDescriptions":{"typeIdentifier":"t_struct$_claimParam_$2036_calldata_ptr","typeString":"struct MultiMerkleStash.claimParam calldata"}},"id":2260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2174:11:11","memberName":"merkleProof","nodeType":"MemberAccess","referencedDeclaration":2035,"src":"2164:21:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}],"id":2243,"name":"claim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"2097:5:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_uint256_$_t_array$_t_bytes32_$dyn_calldata_ptr_$returns$__$","typeString":"function (address,uint256,address,uint256,bytes32[] calldata)"}},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2097:89:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2262,"nodeType":"ExpressionStatement","src":"2097:89:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2236,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2233,"src":"2068:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2237,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"2070:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_claimParam_$2036_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiMerkleStash.claimParam calldata[] calldata"}},"id":2238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2077:6:11","memberName":"length","nodeType":"MemberAccess","src":"2070:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2068:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2264,"initializationExpression":{"assignments":[2233],"declarations":[{"constant":false,"id":2233,"mutability":"mutable","name":"i","nameLocation":"2064:1:11","nodeType":"VariableDeclaration","scope":2264,"src":"2056:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2232,"name":"uint256","nodeType":"ElementaryTypeName","src":"2056:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2235,"initialValue":{"hexValue":"30","id":2234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2066:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2056:11:11"},"loopExpression":{"expression":{"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"2084:3:11","subExpression":{"id":2240,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2233,"src":"2086:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2242,"nodeType":"ExpressionStatement","src":"2084:3:11"},"nodeType":"ForStatement","src":"2052:141:11"}]},"functionSelector":"20ce64de","id":2266,"implemented":true,"kind":"function","modifiers":[],"name":"claimMulti","nameLocation":"1979:10:11","nodeType":"FunctionDefinition","parameters":{"id":2230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2225,"mutability":"mutable","name":"account","nameLocation":"1998:7:11","nodeType":"VariableDeclaration","scope":2266,"src":"1990:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2224,"name":"address","nodeType":"ElementaryTypeName","src":"1990:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2229,"mutability":"mutable","name":"claims","nameLocation":"2029:6:11","nodeType":"VariableDeclaration","scope":2266,"src":"2007:28:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_claimParam_$2036_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiMerkleStash.claimParam[]"},"typeName":{"baseType":{"id":2227,"nodeType":"UserDefinedTypeName","pathNode":{"id":2226,"name":"claimParam","nameLocations":["2007:10:11"],"nodeType":"IdentifierPath","referencedDeclaration":2036,"src":"2007:10:11"},"referencedDeclaration":2036,"src":"2007:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_claimParam_$2036_storage_ptr","typeString":"struct MultiMerkleStash.claimParam"}},"id":2228,"nodeType":"ArrayTypeName","src":"2007:12:11","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_claimParam_$2036_storage_$dyn_storage_ptr","typeString":"struct MultiMerkleStash.claimParam[]"}},"visibility":"internal"}],"src":"1989:47:11"},"returnParameters":{"id":2231,"nodeType":"ParameterList","parameters":[],"src":"2046:0:11"},"scope":2317,"src":"1970:227:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2295,"nodeType":"Block","src":"2309:236:11","statements":[{"expression":{"id":2279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2275,"name":"update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"2390:6:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2277,"indexExpression":{"id":2276,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2268,"src":"2397:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2390:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2407:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2390:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2280,"nodeType":"ExpressionStatement","src":"2390:18:11"},{"expression":{"id":2285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2281,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2040,"src":"2445:10:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bytes32_$","typeString":"mapping(address => bytes32)"}},"id":2283,"indexExpression":{"id":2282,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2268,"src":"2456:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2445:17:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2284,"name":"_merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2270,"src":"2465:11:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2445:31:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2286,"nodeType":"ExpressionStatement","src":"2445:31:11"},{"eventCall":{"arguments":[{"id":2288,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2268,"src":"2506:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2289,"name":"_merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2270,"src":"2513:11:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":2290,"name":"update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"2526:6:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2292,"indexExpression":{"id":2291,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2268,"src":"2533:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2526:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2287,"name":"MerkleRootUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2316,"src":"2488:17:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (address,bytes32,uint256)"}},"id":2293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2488:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2294,"nodeType":"EmitStatement","src":"2483:57:11"}]},"functionSelector":"e786818e","id":2296,"implemented":true,"kind":"function","modifiers":[{"id":2273,"kind":"modifierInvocation","modifierName":{"id":2272,"name":"onlyOwner","nameLocations":["2299:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":2355,"src":"2299:9:11"},"nodeType":"ModifierInvocation","src":"2299:9:11"}],"name":"updateMerkleRoot","nameLocation":"2239:16:11","nodeType":"FunctionDefinition","parameters":{"id":2271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2268,"mutability":"mutable","name":"token","nameLocation":"2264:5:11","nodeType":"VariableDeclaration","scope":2296,"src":"2256:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2267,"name":"address","nodeType":"ElementaryTypeName","src":"2256:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2270,"mutability":"mutable","name":"_merkleRoot","nameLocation":"2279:11:11","nodeType":"VariableDeclaration","scope":2296,"src":"2271:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2269,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2271:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2255:36:11"},"returnParameters":{"id":2274,"nodeType":"ParameterList","parameters":[],"src":"2309:0:11"},"scope":2317,"src":"2230:315:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"anonymous":false,"eventSelector":"4766921f5c59646d22d7d266a29164c8e9623684d8dfdbd931731dfdca025238","id":2308,"name":"Claimed","nameLocation":"2570:7:11","nodeType":"EventDefinition","parameters":{"id":2307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2298,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"2594:5:11","nodeType":"VariableDeclaration","scope":2308,"src":"2578:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2297,"name":"address","nodeType":"ElementaryTypeName","src":"2578:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2300,"indexed":false,"mutability":"mutable","name":"index","nameLocation":"2609:5:11","nodeType":"VariableDeclaration","scope":2308,"src":"2601:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2299,"name":"uint256","nodeType":"ElementaryTypeName","src":"2601:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2302,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"2624:6:11","nodeType":"VariableDeclaration","scope":2308,"src":"2616:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2301,"name":"uint256","nodeType":"ElementaryTypeName","src":"2616:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2304,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"2648:7:11","nodeType":"VariableDeclaration","scope":2308,"src":"2632:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2303,"name":"address","nodeType":"ElementaryTypeName","src":"2632:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2306,"indexed":true,"mutability":"mutable","name":"update","nameLocation":"2673:6:11","nodeType":"VariableDeclaration","scope":2308,"src":"2657:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2305,"name":"uint256","nodeType":"ElementaryTypeName","src":"2657:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2577:103:11"},"src":"2564:117:11"},{"anonymous":false,"eventSelector":"bdc375de8a677af383c6ee6f8b2027dbd231c3c47453ce81d1ce8f1bcdb722dc","id":2316,"name":"MerkleRootUpdated","nameLocation":"2690:17:11","nodeType":"EventDefinition","parameters":{"id":2315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2310,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"2724:5:11","nodeType":"VariableDeclaration","scope":2316,"src":"2708:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2309,"name":"address","nodeType":"ElementaryTypeName","src":"2708:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2312,"indexed":true,"mutability":"mutable","name":"merkleRoot","nameLocation":"2747:10:11","nodeType":"VariableDeclaration","scope":2316,"src":"2731:26:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2311,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2731:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2314,"indexed":true,"mutability":"mutable","name":"update","nameLocation":"2775:6:11","nodeType":"VariableDeclaration","scope":2316,"src":"2759:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2313,"name":"uint256","nodeType":"ElementaryTypeName","src":"2759:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2707:75:11"},"src":"2684:99:11"}],"scope":2318,"src":"292:2493:11","usedErrors":[181],"usedEvents":[2308,2316,2332]}],"src":"49:2736:11"},"id":11},"contracts/Ownable.sol":{"ast":{"absolutePath":"contracts/Ownable.sol","exportedSymbols":{"Context":[867],"Ownable":[2413]},"id":2414,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2319,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:12"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":2320,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2414,"sourceUnit":868,"src":"58:51:12","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2322,"name":"Context","nameLocations":["635:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":867,"src":"635:7:12"},"id":2323,"nodeType":"InheritanceSpecifier","src":"635:7:12"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2321,"nodeType":"StructuredDocumentation","src":"111:494:12","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":2413,"linearizedBaseContracts":[2413,867],"name":"Ownable","nameLocation":"624:7:12","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":2326,"mutability":"mutable","name":"_owner","nameLocation":"665:6:12","nodeType":"VariableDeclaration","scope":2413,"src":"649:67:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2324,"name":"address","nodeType":"ElementaryTypeName","src":"649:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307846393330454242643035654638623235423137393762396232313039444443394230643433303633","id":2325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"674:42:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xF930EBBd05eF8b25B1797b9b2109DDC9B0d43063"},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":2332,"name":"OwnershipTransferred","nameLocation":"751:20:12","nodeType":"EventDefinition","parameters":{"id":2331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2328,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"788:13:12","nodeType":"VariableDeclaration","scope":2332,"src":"772:29:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2327,"name":"address","nodeType":"ElementaryTypeName","src":"772:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2330,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"819:8:12","nodeType":"VariableDeclaration","scope":2332,"src":"803:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2329,"name":"address","nodeType":"ElementaryTypeName","src":"803:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"771:57:12"},"src":"745:84:12"},{"body":{"id":2340,"nodeType":"Block","src":"960:30:12","statements":[{"expression":{"id":2338,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"977:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2337,"id":2339,"nodeType":"Return","src":"970:13:12"}]},"documentation":{"id":2333,"nodeType":"StructuredDocumentation","src":"835:65:12","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":2341,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"914:5:12","nodeType":"FunctionDefinition","parameters":{"id":2334,"nodeType":"ParameterList","parameters":[],"src":"919:2:12"},"returnParameters":{"id":2337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2336,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2341,"src":"951:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2335,"name":"address","nodeType":"ElementaryTypeName","src":"951:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"950:9:12"},"scope":2413,"src":"905:85:12","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2354,"nodeType":"Block","src":"1099:96:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2345,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"1117:5:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1117:7:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2347,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"1128:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1128:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1117:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":2350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1142:34:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":2344,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1109:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1109:68:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2352,"nodeType":"ExpressionStatement","src":"1109:68:12"},{"id":2353,"nodeType":"PlaceholderStatement","src":"1187:1:12"}]},"documentation":{"id":2342,"nodeType":"StructuredDocumentation","src":"996:77:12","text":" @dev Throws if called by any account other than the owner."},"id":2355,"name":"onlyOwner","nameLocation":"1087:9:12","nodeType":"ModifierDefinition","parameters":{"id":2343,"nodeType":"ParameterList","parameters":[],"src":"1096:2:12"},"src":"1078:117:12","virtual":false,"visibility":"internal"},{"body":{"id":2368,"nodeType":"Block","src":"1591:47:12","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1628:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2363,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1620:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2362,"name":"address","nodeType":"ElementaryTypeName","src":"1620:7:12","typeDescriptions":{}}},"id":2365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1620:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2361,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2412,"src":"1601:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1601:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2367,"nodeType":"ExpressionStatement","src":"1601:30:12"}]},"documentation":{"id":2356,"nodeType":"StructuredDocumentation","src":"1201:331:12","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":2369,"implemented":true,"kind":"function","modifiers":[{"id":2359,"kind":"modifierInvocation","modifierName":{"id":2358,"name":"onlyOwner","nameLocations":["1581:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":2355,"src":"1581:9:12"},"nodeType":"ModifierInvocation","src":"1581:9:12"}],"name":"renounceOwnership","nameLocation":"1546:17:12","nodeType":"FunctionDefinition","parameters":{"id":2357,"nodeType":"ParameterList","parameters":[],"src":"1563:2:12"},"returnParameters":{"id":2360,"nodeType":"ParameterList","parameters":[],"src":"1591:0:12"},"scope":2413,"src":"1537:101:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2391,"nodeType":"Block","src":"1857:128:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2378,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2372,"src":"1875:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1895:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2380,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1887:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2379,"name":"address","nodeType":"ElementaryTypeName","src":"1887:7:12","typeDescriptions":{}}},"id":2382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1887:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1875:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":2384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1899:40:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":2377,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1867:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1867:73:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2386,"nodeType":"ExpressionStatement","src":"1867:73:12"},{"expression":{"arguments":[{"id":2388,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2372,"src":"1969:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2387,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2412,"src":"1950:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1950:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2390,"nodeType":"ExpressionStatement","src":"1950:28:12"}]},"documentation":{"id":2370,"nodeType":"StructuredDocumentation","src":"1644:138:12","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":2392,"implemented":true,"kind":"function","modifiers":[{"id":2375,"kind":"modifierInvocation","modifierName":{"id":2374,"name":"onlyOwner","nameLocations":["1847:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":2355,"src":"1847:9:12"},"nodeType":"ModifierInvocation","src":"1847:9:12"}],"name":"transferOwnership","nameLocation":"1796:17:12","nodeType":"FunctionDefinition","parameters":{"id":2373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2372,"mutability":"mutable","name":"newOwner","nameLocation":"1822:8:12","nodeType":"VariableDeclaration","scope":2392,"src":"1814:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2371,"name":"address","nodeType":"ElementaryTypeName","src":"1814:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1813:18:12"},"returnParameters":{"id":2376,"nodeType":"ParameterList","parameters":[],"src":"1857:0:12"},"scope":2413,"src":"1787:198:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2411,"nodeType":"Block","src":"2202:124:12","statements":[{"assignments":[2399],"declarations":[{"constant":false,"id":2399,"mutability":"mutable","name":"oldOwner","nameLocation":"2220:8:12","nodeType":"VariableDeclaration","scope":2411,"src":"2212:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2398,"name":"address","nodeType":"ElementaryTypeName","src":"2212:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2401,"initialValue":{"id":2400,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"2231:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2212:25:12"},{"expression":{"id":2404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2402,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"2247:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2403,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"2256:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2247:17:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2405,"nodeType":"ExpressionStatement","src":"2247:17:12"},{"eventCall":{"arguments":[{"id":2407,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"2300:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2408,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"2310:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2406,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"2279:20:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":2409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2279:40:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2410,"nodeType":"EmitStatement","src":"2274:45:12"}]},"documentation":{"id":2393,"nodeType":"StructuredDocumentation","src":"1991:143:12","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":2412,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2148:18:12","nodeType":"FunctionDefinition","parameters":{"id":2396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2395,"mutability":"mutable","name":"newOwner","nameLocation":"2175:8:12","nodeType":"VariableDeclaration","scope":2412,"src":"2167:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2394,"name":"address","nodeType":"ElementaryTypeName","src":"2167:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2166:18:12"},"returnParameters":{"id":2397,"nodeType":"ParameterList","parameters":[],"src":"2202:0:12"},"scope":2413,"src":"2139:187:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2414,"src":"606:1722:12","usedErrors":[],"usedEvents":[2332]}],"src":"33:2295:12"},"id":12}},"contracts":{"@openzeppelin/contracts/interfaces/IERC1363.sol":{"IERC1363":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approveAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"approveAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferFromAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFromAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","approveAndCall(address,uint256)":"3177029f","approveAndCall(address,uint256,bytes)":"cae9ca51","balanceOf(address)":"70a08231","supportsInterface(bytes4)":"01ffc9a7","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferAndCall(address,uint256)":"1296ee62","transferAndCall(address,uint256,bytes)":"4000aea0","transferFrom(address,address,uint256)":"23b872dd","transferFromAndCall(address,address,uint256)":"d8fbe994","transferFromAndCall(address,address,uint256,bytes)":"c1d34b89"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363]. Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"approveAndCall(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"approveAndCall(address,uint256,bytes)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `spender`.\",\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferAndCall(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferAndCall(address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFromAndCall(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFromAndCall(address,address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}}},\"title\":\"IERC1363\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":\"IERC1363\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b\",\"dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF\"]},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a\",\"dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS\"]},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba\",\"dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"currentAllowance","type":"uint256"},{"internalType":"uint256","name":"requestedDecrease","type":"uint256"}],"name":"SafeERC20FailedDecreaseAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bf1b2a33c3951be1a9db03606a5252cec79eebbb5dc8cf96212dacd9c97cf35464736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBF SHL 0x2A CALLER 0xC3 SWAP6 SHL 0xE1 0xA9 0xDB SUB PUSH1 0x6A MSTORE MSTORE 0xCE 0xC7 SWAP15 0xEB 0xBB 0x5D 0xC8 0xCF SWAP7 0x21 0x2D 0xAC 0xD9 0xC9 PUSH29 0xF35464736F6C6343000814003300000000000000000000000000000000 ","sourceMap":"750:8692:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;750:8692:4;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bf1b2a33c3951be1a9db03606a5252cec79eebbb5dc8cf96212dacd9c97cf35464736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBF SHL 0x2A CALLER 0xC3 SWAP6 SHL 0xE1 0xA9 0xDB SUB PUSH1 0x6A MSTORE MSTORE 0xCE 0xC7 SWAP15 0xEB 0xBB 0x5D 0xC8 0xCF SWAP7 0x21 0x2D 0xAC 0xD9 0xC9 PUSH29 0xF35464736F6C6343000814003300000000000000000000000000000000 ","sourceMap":"750:8692:4:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"errors\":{\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b\",\"dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF\"]},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a\",\"dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS\"]},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba\",\"dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xca2ae13e0610f6a99238dd00b97bd786bc92732dae6d6b9d61f573ec51018310\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75f8c71ce0c91c40dd5f249ace0b7d8270f8f1767231bcf71490f7157d6ba862\",\"dweb:/ipfs/QmYXgxeDyFHvz3JsXxLEYN6GNUR44ThHeFj5XkpkgMoG4w\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c78e2aa4313323cecd1ef12a8d6265b96beee1a199923abf55d9a2a9e291ad23\",\"dweb:/ipfs/QmUTs2KStXucZezzFo3EYeqYu47utu56qrF7jj1Gue65vb\"]},\"@openzeppelin/contracts/utils/Errors.sol\":{\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf\",\"dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209d342df835a6d1269e3fe73b000da4020ad48bd78db3a3badd67afeaa33f667764736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP14 CALLVALUE 0x2D 0xF8 CALLDATALOAD 0xA6 0xD1 0x26 SWAP15 EXTCODEHASH 0xE7 EXTCODESIZE STOP 0xD LOG4 MUL EXP 0xD4 DUP12 0xD7 DUP14 0xB3 LOG3 0xBA 0xDD PUSH8 0xAFEAA33F66776473 PUSH16 0x6C634300081400330000000000000000 ","sourceMap":"233:5799:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;233:5799:5;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209d342df835a6d1269e3fe73b000da4020ad48bd78db3a3badd67afeaa33f667764736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP14 CALLVALUE 0x2D 0xF8 CALLDATALOAD 0xA6 0xD1 0x26 SWAP15 EXTCODEHASH 0xE7 EXTCODESIZE STOP 0xD LOG4 MUL EXP 0xD4 DUP12 0xD7 DUP14 0xB3 LOG3 0xBA 0xDD PUSH8 0xAFEAA33F66776473 PUSH16 0x6C634300081400330000000000000000 ","sourceMap":"233:5799:5:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c78e2aa4313323cecd1ef12a8d6265b96beee1a199923abf55d9a2a9e291ad23\",\"dweb:/ipfs/QmUTs2KStXucZezzFo3EYeqYu47utu56qrF7jj1Gue65vb\"]},\"@openzeppelin/contracts/utils/Errors.sol\":{\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf\",\"dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/Errors.sol":{"Errors":{"abi":[{"inputs":[],"name":"FailedCall","type":"error"},{"inputs":[],"name":"FailedDeployment","type":"error"},{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"MissingPrecompile","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122027709f05cda682b16d7735cac830c09dd91defcfbd54a6f108ad7459de2153ea64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x27 PUSH17 0x9F05CDA682B16D7735CAC830C09DD91DEF 0xCF 0xBD SLOAD 0xA6 CALL ADDMOD 0xAD PUSH21 0x59DE2153EA64736F6C634300081400330000000000 ","sourceMap":"411:484:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;411:484:7;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122027709f05cda682b16d7735cac830c09dd91defcfbd54a6f108ad7459de2153ea64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x27 PUSH17 0x9F05CDA682B16D7735CAC830C09DD91DEF 0xCF 0xBD SLOAD 0xA6 CALL ADDMOD 0xAD PUSH21 0x59DE2153EA64736F6C634300081400330000000000 ","sourceMap":"411:484:7:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedDeployment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"MissingPrecompile\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of common custom errors used in multiple contracts IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library. It is recommended to avoid relying on the error API for critical functionality. _Available since v5.1._\",\"errors\":{\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"FailedDeployment()\":[{\"details\":\"The deployment failed.\"}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"MissingPrecompile(address)\":[{\"details\":\"A necessary precompile is missing.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Errors.sol\":\"Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Errors.sol\":{\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf\",\"dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"Hashes":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200939f07f27ef8664c879f4d2eba5aceafe69bca7f30d5d9941dab9a91615d3d264736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MULMOD CODECOPY CREATE PUSH32 0x27EF8664C879F4D2EBA5ACEAFE69BCA7F30D5D9941DAB9A91615D3D264736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"221:813:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;221:813:8;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200939f07f27ef8664c879f4d2eba5aceafe69bca7f30d5d9941dab9a91615d3d264736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MULMOD CODECOPY CREATE PUSH32 0x27EF8664C879F4D2EBA5ACEAFE69BCA7F30D5D9941DAB9A91615D3D264736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"221:813:8:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library of standard hash functions. _Available since v5.1._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":\"Hashes\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x631dc1958d5308bd2d9f91190bbcde4f9ffb9d9401ce8d358c17b35f1a942bb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ef16d9a6f57eae9ab275116eaba1e8de70efd3d0e3682b1585b8f069d9c3f9\",\"dweb:/ipfs/QmR3JQHAyv4sNWnRHeiC6oaz8Bqn8rtzu5sdAqAJRtBqpj\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[{"inputs":[],"name":"MerkleProofInvalidMultiproof","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220713cc22a7b971b8f4135c1eb9dbd6014f3bd70bc7884e02fe6a4c0597086ec3064736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x3CC22A7B971B8F4135C1EB9DBD6014F3BD70 0xBC PUSH25 0x84E02FE6A4C0597086EC3064736F6C63430008140033000000 ","sourceMap":"1353:22982:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1353:22982:9;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220713cc22a7b971b8f4135c1eb9dbd6014f3bd70bc7884e02fe6a4c0597086ec3064736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x3CC22A7B971B8F4135C1EB9DBD6014F3BD70 0xBC PUSH25 0x84E02FE6A4C0597086EC3064736F6C63430008140033000000 ","sourceMap":"1353:22982:9:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MerkleProofInvalidMultiproof\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box. IMPORTANT: Consider memory side-effects when using custom hashing functions that access memory in an unsafe way. NOTE: This library supports proof verification for merkle trees built using custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving leaf inclusion in trees built using non-commutative hashing functions requires additional logic that is not supported by this library.\",\"errors\":{\"MerkleProofInvalidMultiproof()\":[{\"details\":\"The multiproof provided is not valid.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x631dc1958d5308bd2d9f91190bbcde4f9ffb9d9401ce8d358c17b35f1a942bb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ef16d9a6f57eae9ab275116eaba1e8de70efd3d0e3682b1585b8f069d9c3f9\",\"dweb:/ipfs/QmR3JQHAyv4sNWnRHeiC6oaz8Bqn8rtzu5sdAqAJRtBqpj\"]},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}"}},"contracts/MultiMerkleStash.sol":{"MultiMerkleStash":{"abi":[{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"index","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"uint256","name":"update","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"update","type":"uint256"}],"name":"MerkleRootUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"},{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"}],"internalType":"struct MultiMerkleStash.claimParam[]","name":"claims","type":"tuple[]"}],"name":"claimMulti","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"isClaimed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"merkleRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"update","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"bytes32","name":"_merkleRoot","type":"bytes32"}],"name":"updateMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052600080546001600160a01b03191673f930ebbd05ef8b25b1797b9b2109ddc9b0d4306317905534801561003657600080fd5b50610e9e806100466000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063715018a611610076578063e21115861161005b578063e211158614610156578063e786818e14610176578063f2fde38b1461018957600080fd5b8063715018a6146101265780638da5cb5b1461012e57600080fd5b806312d18ed6146100a85780631c1b8772146100bd57806320ce64de146100f0578063562beba814610103575b600080fd5b6100bb6100b6366004610bb2565b61019c565b005b6100dd6100cb366004610c2a565b60026020526000908152604090205481565b6040519081526020015b60405180910390f35b6100bb6100fe366004610c45565b61045f565b610116610111366004610c98565b610538565b60405190151581526020016100e7565b6100bb6105ae565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e7565b6100dd610164366004610c2a565b60016020526000908152604090205481565b6100bb610184366004610c98565b61063b565b6100bb610197366004610c2a565b61075b565b73ffffffffffffffffffffffffffffffffffffffff8616600090815260016020526040812054900361022f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f66726f7a656e000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6102398686610538565b156102a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f44726f7020616c726561647920636c61696d65642e00000000000000000000006044820152606401610226565b60408051602081018790527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b16918101919091526054810184905260009060740160405160208183030381529060405280519060200120905061035f838380806020026020016040519081016040528093929190818152602001838360200280828437600092018290525073ffffffffffffffffffffffffffffffffffffffff8d16815260016020526040902054925085915061088b9050565b6103c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c69642070726f6f662e0000000000000000000000000000000000006044820152606401610226565b6103cf87876108a1565b6103f073ffffffffffffffffffffffffffffffffffffffff88168686610913565b73ffffffffffffffffffffffffffffffffffffffff8781166000818152600260209081526040918290205482518b815291820189905293891692917f4766921f5c59646d22d7d266a29164c8e9623684d8dfdbd931731dfdca025238910160405180910390a450505050505050565b60005b818110156105325761052283838381811061047f5761047f610cc2565b90506020028101906104919190610cf1565b61049f906020810190610c2a565b8484848181106104b1576104b1610cc2565b90506020028101906104c39190610cf1565b60200135868686868181106104da576104da610cc2565b90506020028101906104ec9190610cf1565b6040013587878781811061050257610502610cc2565b90506020028101906105149190610cf1565b6100b6906060810190610d2f565b61052b81610dc6565b9050610462565b50505050565b60008061054761010084610e2d565b9050600061055761010085610e41565b73ffffffffffffffffffffffffffffffffffffffff861660009081526003602090815260408083206002835281842054845282528083209583529490529290922054600190921b9182169091149150505b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461062f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610226565b61063960006109a5565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610226565b73ffffffffffffffffffffffffffffffffffffffff821660009081526002602052604081208054600192906106f2908490610e55565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600081815260016020908152604080832085905560029091528082205490519092849290917fbdc375de8a677af383c6ee6f8b2027dbd231c3c47453ce81d1ce8f1bcdb722dc9190a45050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610226565b73ffffffffffffffffffffffffffffffffffffffff811661087f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610226565b610888816109a5565b50565b6000826108988584610a1a565b14949350505050565b60006108af61010083610e2d565b905060006108bf61010084610e41565b73ffffffffffffffffffffffffffffffffffffffff949094166000908152600360209081526040808320600283528184205484528252808320948352939052919091208054600190941b9093179092555050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526109a0908490610a67565b505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081815b8451811015610a5f57610a4b82868381518110610a3e57610a3e610cc2565b6020026020010151610b0b565b915080610a5781610dc6565b915050610a1f565b509392505050565b600080602060008451602086016000885af180610a8a576040513d6000823e3d81fd5b50506000513d91508115610aa2578060011415610abc565b73ffffffffffffffffffffffffffffffffffffffff84163b155b15610532576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610226565b6000818310610b27576000828152602084905260409020610b36565b60008381526020839052604090205b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b6157600080fd5b919050565b60008083601f840112610b7857600080fd5b50813567ffffffffffffffff811115610b9057600080fd5b6020830191508360208260051b8501011115610bab57600080fd5b9250929050565b60008060008060008060a08789031215610bcb57600080fd5b610bd487610b3d565b955060208701359450610be960408801610b3d565b935060608701359250608087013567ffffffffffffffff811115610c0c57600080fd5b610c1889828a01610b66565b979a9699509497509295939492505050565b600060208284031215610c3c57600080fd5b610b3682610b3d565b600080600060408486031215610c5a57600080fd5b610c6384610b3d565b9250602084013567ffffffffffffffff811115610c7f57600080fd5b610c8b86828701610b66565b9497909650939450505050565b60008060408385031215610cab57600080fd5b610cb483610b3d565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81833603018112610d2557600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610d6457600080fd5b83018035915067ffffffffffffffff821115610d7f57600080fd5b6020019150600581901b3603821315610bab57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610df757610df7610d97565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082610e3c57610e3c610dfe565b500490565b600082610e5057610e50610dfe565b500690565b808201808211156105a8576105a8610d9756fea2646970667358221220f8a88173524a7dc4414f8edfb8a1eec91d3d3d4b89393e8390590989331992ef64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH20 0xF930EBBD05EF8B25B1797B9B2109DDC9B0D43063 OR SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9E DUP1 PUSH2 0x46 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x76 JUMPI DUP1 PUSH4 0xE2111586 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xE2111586 EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0xE786818E EQ PUSH2 0x176 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x189 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x12E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x12D18ED6 EQ PUSH2 0xA8 JUMPI DUP1 PUSH4 0x1C1B8772 EQ PUSH2 0xBD JUMPI DUP1 PUSH4 0x20CE64DE EQ PUSH2 0xF0 JUMPI DUP1 PUSH4 0x562BEBA8 EQ PUSH2 0x103 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBB PUSH2 0xB6 CALLDATASIZE PUSH1 0x4 PUSH2 0xBB2 JUMP JUMPDEST PUSH2 0x19C JUMP JUMPDEST STOP JUMPDEST PUSH2 0xDD PUSH2 0xCB CALLDATASIZE PUSH1 0x4 PUSH2 0xC2A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBB PUSH2 0xFE CALLDATASIZE PUSH1 0x4 PUSH2 0xC45 JUMP JUMPDEST PUSH2 0x45F JUMP JUMPDEST PUSH2 0x116 PUSH2 0x111 CALLDATASIZE PUSH1 0x4 PUSH2 0xC98 JUMP JUMPDEST PUSH2 0x538 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE7 JUMP JUMPDEST PUSH2 0xBB PUSH2 0x5AE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE7 JUMP JUMPDEST PUSH2 0xDD PUSH2 0x164 CALLDATASIZE PUSH1 0x4 PUSH2 0xC2A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xBB PUSH2 0x184 CALLDATASIZE PUSH1 0x4 PUSH2 0xC98 JUMP JUMPDEST PUSH2 0x63B JUMP JUMPDEST PUSH2 0xBB PUSH2 0x197 CALLDATASIZE PUSH1 0x4 PUSH2 0xC2A JUMP JUMPDEST PUSH2 0x75B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SUB PUSH2 0x22F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x66726F7A656E0000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x239 DUP7 DUP7 PUSH2 0x538 JUMP JUMPDEST ISZERO PUSH2 0x2A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44726F7020616C726561647920636C61696D65642E0000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x226 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP8 SWAP1 SHL AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x54 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x74 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x35F DUP4 DUP4 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP3 POP DUP6 SWAP2 POP PUSH2 0x88B SWAP1 POP JUMP JUMPDEST PUSH2 0x3C5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642070726F6F662E000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x226 JUMP JUMPDEST PUSH2 0x3CF DUP8 DUP8 PUSH2 0x8A1 JUMP JUMPDEST PUSH2 0x3F0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND DUP7 DUP7 PUSH2 0x913 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP12 DUP2 MSTORE SWAP2 DUP3 ADD DUP10 SWAP1 MSTORE SWAP4 DUP10 AND SWAP3 SWAP2 PUSH32 0x4766921F5C59646D22D7D266A29164C8E9623684D8DFDBD931731DFDCA025238 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x532 JUMPI PUSH2 0x522 DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0x47F JUMPI PUSH2 0x47F PUSH2 0xCC2 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x491 SWAP2 SWAP1 PUSH2 0xCF1 JUMP JUMPDEST PUSH2 0x49F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xC2A JUMP JUMPDEST DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0x4B1 JUMPI PUSH2 0x4B1 PUSH2 0xCC2 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x4C3 SWAP2 SWAP1 PUSH2 0xCF1 JUMP JUMPDEST PUSH1 0x20 ADD CALLDATALOAD DUP7 DUP7 DUP7 DUP7 DUP2 DUP2 LT PUSH2 0x4DA JUMPI PUSH2 0x4DA PUSH2 0xCC2 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x4EC SWAP2 SWAP1 PUSH2 0xCF1 JUMP JUMPDEST PUSH1 0x40 ADD CALLDATALOAD DUP8 DUP8 DUP8 DUP2 DUP2 LT PUSH2 0x502 JUMPI PUSH2 0x502 PUSH2 0xCC2 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x514 SWAP2 SWAP1 PUSH2 0xCF1 JUMP JUMPDEST PUSH2 0xB6 SWAP1 PUSH1 0x60 DUP2 ADD SWAP1 PUSH2 0xD2F JUMP JUMPDEST PUSH2 0x52B DUP2 PUSH2 0xDC6 JUMP JUMPDEST SWAP1 POP PUSH2 0x462 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x547 PUSH2 0x100 DUP5 PUSH2 0xE2D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x557 PUSH2 0x100 DUP6 PUSH2 0xE41 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x2 DUP4 MSTORE DUP2 DUP5 KECCAK256 SLOAD DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP6 DUP4 MSTORE SWAP5 SWAP1 MSTORE SWAP3 SWAP1 SWAP3 KECCAK256 SLOAD PUSH1 0x1 SWAP1 SWAP3 SHL SWAP2 DUP3 AND SWAP1 SWAP2 EQ SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x62F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x226 JUMP JUMPDEST PUSH2 0x639 PUSH1 0x0 PUSH2 0x9A5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x6BC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x226 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x6F2 SWAP1 DUP5 SWAP1 PUSH2 0xE55 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD SWAP1 SWAP3 DUP5 SWAP3 SWAP1 SWAP2 PUSH32 0xBDC375DE8A677AF383C6EE6F8B2027DBD231C3C47453CE81D1CE8F1BCDB722DC SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x7DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x226 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x87F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x226 JUMP JUMPDEST PUSH2 0x888 DUP2 PUSH2 0x9A5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x898 DUP6 DUP5 PUSH2 0xA1A JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AF PUSH2 0x100 DUP4 PUSH2 0xE2D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8BF PUSH2 0x100 DUP5 PUSH2 0xE41 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x2 DUP4 MSTORE DUP2 DUP5 KECCAK256 SLOAD DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP5 DUP4 MSTORE SWAP4 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP5 SHL SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x9A0 SWAP1 DUP5 SWAP1 PUSH2 0xA67 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xA5F JUMPI PUSH2 0xA4B DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA3E JUMPI PUSH2 0xA3E PUSH2 0xCC2 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xB0B JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0xA57 DUP2 PUSH2 0xDC6 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xA1F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 PUSH1 0x0 DUP5 MLOAD PUSH1 0x20 DUP7 ADD PUSH1 0x0 DUP9 GAS CALL DUP1 PUSH2 0xA8A JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST POP POP PUSH1 0x0 MLOAD RETURNDATASIZE SWAP2 POP DUP2 ISZERO PUSH2 0xAA2 JUMPI DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0xABC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x532 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x226 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xB27 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xB36 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xB61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xB78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xBAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xBCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD4 DUP8 PUSH2 0xB3D JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH2 0xBE9 PUSH1 0x40 DUP9 ADD PUSH2 0xB3D JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC18 DUP10 DUP3 DUP11 ADD PUSH2 0xB66 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB36 DUP3 PUSH2 0xB3D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC63 DUP5 PUSH2 0xB3D JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC8B DUP7 DUP3 DUP8 ADD PUSH2 0xB66 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCB4 DUP4 PUSH2 0xB3D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81 DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xD25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xD64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xD7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP PUSH1 0x5 DUP2 SWAP1 SHL CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0xBAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xDF7 JUMPI PUSH2 0xDF7 PUSH2 0xD97 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xE3C JUMPI PUSH2 0xE3C PUSH2 0xDFE JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xE50 JUMPI PUSH2 0xE50 PUSH2 0xDFE JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x5A8 JUMPI PUSH2 0x5A8 PUSH2 0xD97 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF8 0xA8 DUP2 PUSH20 0x524A7DC4414F8EDFB8A1EEC91D3D3D4B89393E83 SWAP1 MSIZE MULMOD DUP10 CALLER NOT SWAP3 0xEF PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"292:2493:11:-:0;;;649:67:12;;;-1:-1:-1;;;;;;649:67:12;674:42;649:67;;;292:2493:11;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_callOptionalReturn_536":{"entryPoint":2663,"id":536,"parameterSlots":2,"returnSlots":0},"@_efficientKeccak256_928":{"entryPoint":null,"id":928,"parameterSlots":2,"returnSlots":1},"@_msgSender_849":{"entryPoint":null,"id":849,"parameterSlots":0,"returnSlots":1},"@_setClaimed_2144":{"entryPoint":2209,"id":2144,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_2412":{"entryPoint":2469,"id":2412,"parameterSlots":1,"returnSlots":0},"@claimMulti_2266":{"entryPoint":1119,"id":2266,"parameterSlots":3,"returnSlots":0},"@claim_2223":{"entryPoint":412,"id":2223,"parameterSlots":6,"returnSlots":0},"@commutativeKeccak256_916":{"entryPoint":2827,"id":916,"parameterSlots":2,"returnSlots":1},"@isClaimed_2099":{"entryPoint":1336,"id":2099,"parameterSlots":2,"returnSlots":1},"@merkleRoot_2040":{"entryPoint":null,"id":2040,"parameterSlots":0,"returnSlots":0},"@owner_2341":{"entryPoint":null,"id":2341,"parameterSlots":0,"returnSlots":1},"@processProof_999":{"entryPoint":2586,"id":999,"parameterSlots":2,"returnSlots":1},"@renounceOwnership_2369":{"entryPoint":1454,"id":2369,"parameterSlots":0,"returnSlots":0},"@safeTransfer_214":{"entryPoint":2323,"id":214,"parameterSlots":3,"returnSlots":0},"@transferOwnership_2392":{"entryPoint":1883,"id":2392,"parameterSlots":1,"returnSlots":0},"@updateMerkleRoot_2296":{"entryPoint":1595,"id":2296,"parameterSlots":2,"returnSlots":0},"@update_2044":{"entryPoint":null,"id":2044,"parameterSlots":0,"returnSlots":0},"@verify_958":{"entryPoint":2187,"id":958,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":2877,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_bytes32_dyn_calldata":{"entryPoint":2918,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":3114,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_array$_t_struct$_claimParam_$2036_calldata_ptr_$dyn_calldata_ptr":{"entryPoint":3141,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":3224,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256t_addresst_uint256t_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":2994,"id":null,"parameterSlots":2,"returnSlots":6},"abi_encode_tuple_packed_t_uint256_t_address_t_uint256__to_t_uint256_t_address_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2d6fef2814860c16d5c1d12c83be9f1147cd08129c4dc625504ae457c4263177__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d1218620da09f6e7d360a42f242ae4d3ee7430442ec5be1555963e53ec012550__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_de1f5bb2d20d4a4d49aebff9944173f9fc2479a4c12613a76f6841cd4875ee3a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"access_calldata_tail_t_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":3375,"id":null,"parameterSlots":2,"returnSlots":2},"access_calldata_tail_t_struct$_claimParam_$2036_calldata_ptr":{"entryPoint":3313,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":3669,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":3629,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":3526,"id":null,"parameterSlots":1,"returnSlots":1},"mod_t_uint256":{"entryPoint":3649,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":3479,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":3582,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":3266,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:8242:13","statements":[{"nodeType":"YulBlock","src":"6:3:13","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:147:13","statements":[{"nodeType":"YulAssignment","src":"73:29:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:13"},"nodeType":"YulFunctionCall","src":"82:20:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:13"}]},{"body":{"nodeType":"YulBlock","src":"188:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"197:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"200:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"190:6:13"},"nodeType":"YulFunctionCall","src":"190:12:13"},"nodeType":"YulExpressionStatement","src":"190:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"142:42:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:13"},"nodeType":"YulFunctionCall","src":"131:54:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:13"},"nodeType":"YulFunctionCall","src":"121:65:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:13"},"nodeType":"YulFunctionCall","src":"114:73:13"},"nodeType":"YulIf","src":"111:93:13"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:13","type":""}],"src":"14:196:13"},{"body":{"nodeType":"YulBlock","src":"299:283:13","statements":[{"body":{"nodeType":"YulBlock","src":"348:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"357:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"360:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"350:6:13"},"nodeType":"YulFunctionCall","src":"350:12:13"},"nodeType":"YulExpressionStatement","src":"350:12:13"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"327:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"335:4:13","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"323:3:13"},"nodeType":"YulFunctionCall","src":"323:17:13"},{"name":"end","nodeType":"YulIdentifier","src":"342:3:13"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"319:3:13"},"nodeType":"YulFunctionCall","src":"319:27:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"312:6:13"},"nodeType":"YulFunctionCall","src":"312:35:13"},"nodeType":"YulIf","src":"309:55:13"},{"nodeType":"YulAssignment","src":"373:30:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"396:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"383:12:13"},"nodeType":"YulFunctionCall","src":"383:20:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"373:6:13"}]},{"body":{"nodeType":"YulBlock","src":"446:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"455:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"458:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"448:6:13"},"nodeType":"YulFunctionCall","src":"448:12:13"},"nodeType":"YulExpressionStatement","src":"448:12:13"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"418:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"426:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"415:2:13"},"nodeType":"YulFunctionCall","src":"415:30:13"},"nodeType":"YulIf","src":"412:50:13"},{"nodeType":"YulAssignment","src":"471:29:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"487:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"495:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"483:3:13"},"nodeType":"YulFunctionCall","src":"483:17:13"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"471:8:13"}]},{"body":{"nodeType":"YulBlock","src":"560:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"569:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"572:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"562:6:13"},"nodeType":"YulFunctionCall","src":"562:12:13"},"nodeType":"YulExpressionStatement","src":"562:12:13"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"523:6:13"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"535:1:13","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"538:6:13"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"531:3:13"},"nodeType":"YulFunctionCall","src":"531:14:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"519:3:13"},"nodeType":"YulFunctionCall","src":"519:27:13"},{"kind":"number","nodeType":"YulLiteral","src":"548:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"515:3:13"},"nodeType":"YulFunctionCall","src":"515:38:13"},{"name":"end","nodeType":"YulIdentifier","src":"555:3:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"512:2:13"},"nodeType":"YulFunctionCall","src":"512:47:13"},"nodeType":"YulIf","src":"509:67:13"}]},"name":"abi_decode_array_bytes32_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"262:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"270:3:13","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"278:8:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"288:6:13","type":""}],"src":"215:367:13"},{"body":{"nodeType":"YulBlock","src":"760:550:13","statements":[{"body":{"nodeType":"YulBlock","src":"807:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"816:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"819:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"809:6:13"},"nodeType":"YulFunctionCall","src":"809:12:13"},"nodeType":"YulExpressionStatement","src":"809:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"781:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"790:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"777:3:13"},"nodeType":"YulFunctionCall","src":"777:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"802:3:13","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"773:3:13"},"nodeType":"YulFunctionCall","src":"773:33:13"},"nodeType":"YulIf","src":"770:53:13"},{"nodeType":"YulAssignment","src":"832:39:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"861:9:13"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"842:18:13"},"nodeType":"YulFunctionCall","src":"842:29:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"832:6:13"}]},{"nodeType":"YulAssignment","src":"880:42:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"907:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"918:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"903:3:13"},"nodeType":"YulFunctionCall","src":"903:18:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"890:12:13"},"nodeType":"YulFunctionCall","src":"890:32:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"880:6:13"}]},{"nodeType":"YulAssignment","src":"931:48:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"964:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"975:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"960:3:13"},"nodeType":"YulFunctionCall","src":"960:18:13"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"941:18:13"},"nodeType":"YulFunctionCall","src":"941:38:13"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"931:6:13"}]},{"nodeType":"YulAssignment","src":"988:42:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1015:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"1026:2:13","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1011:3:13"},"nodeType":"YulFunctionCall","src":"1011:18:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"998:12:13"},"nodeType":"YulFunctionCall","src":"998:32:13"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"988:6:13"}]},{"nodeType":"YulVariableDeclaration","src":"1039:47:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1070:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"1081:3:13","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1066:3:13"},"nodeType":"YulFunctionCall","src":"1066:19:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1053:12:13"},"nodeType":"YulFunctionCall","src":"1053:33:13"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1043:6:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"1129:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1138:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1141:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1131:6:13"},"nodeType":"YulFunctionCall","src":"1131:12:13"},"nodeType":"YulExpressionStatement","src":"1131:12:13"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1101:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"1109:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1098:2:13"},"nodeType":"YulFunctionCall","src":"1098:30:13"},"nodeType":"YulIf","src":"1095:50:13"},{"nodeType":"YulVariableDeclaration","src":"1154:96:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1222:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"1233:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1218:3:13"},"nodeType":"YulFunctionCall","src":"1218:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1242:7:13"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nodeType":"YulIdentifier","src":"1180:37:13"},"nodeType":"YulFunctionCall","src":"1180:70:13"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"1158:8:13","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"1168:8:13","type":""}]},{"nodeType":"YulAssignment","src":"1259:18:13","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"1269:8:13"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1259:6:13"}]},{"nodeType":"YulAssignment","src":"1286:18:13","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"1296:8:13"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"1286:6:13"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_addresst_uint256t_array$_t_bytes32_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"686:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"697:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"709:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"717:6:13","type":""},{"name":"value2","nodeType":"YulTypedName","src":"725:6:13","type":""},{"name":"value3","nodeType":"YulTypedName","src":"733:6:13","type":""},{"name":"value4","nodeType":"YulTypedName","src":"741:6:13","type":""},{"name":"value5","nodeType":"YulTypedName","src":"749:6:13","type":""}],"src":"587:723:13"},{"body":{"nodeType":"YulBlock","src":"1385:116:13","statements":[{"body":{"nodeType":"YulBlock","src":"1431:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1440:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1443:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1433:6:13"},"nodeType":"YulFunctionCall","src":"1433:12:13"},"nodeType":"YulExpressionStatement","src":"1433:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1406:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"1415:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1402:3:13"},"nodeType":"YulFunctionCall","src":"1402:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1398:3:13"},"nodeType":"YulFunctionCall","src":"1398:32:13"},"nodeType":"YulIf","src":"1395:52:13"},{"nodeType":"YulAssignment","src":"1456:39:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1485:9:13"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1466:18:13"},"nodeType":"YulFunctionCall","src":"1466:29:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1456:6:13"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1351:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1362:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1374:6:13","type":""}],"src":"1315:186:13"},{"body":{"nodeType":"YulBlock","src":"1607:76:13","statements":[{"nodeType":"YulAssignment","src":"1617:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1629:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"1640:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1625:3:13"},"nodeType":"YulFunctionCall","src":"1625:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1617:4:13"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1659:9:13"},{"name":"value0","nodeType":"YulIdentifier","src":"1670:6:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1652:6:13"},"nodeType":"YulFunctionCall","src":"1652:25:13"},"nodeType":"YulExpressionStatement","src":"1652:25:13"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1576:9:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1587:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1598:4:13","type":""}],"src":"1506:177:13"},{"body":{"nodeType":"YulBlock","src":"1840:389:13","statements":[{"body":{"nodeType":"YulBlock","src":"1886:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1895:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1898:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1888:6:13"},"nodeType":"YulFunctionCall","src":"1888:12:13"},"nodeType":"YulExpressionStatement","src":"1888:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1861:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"1870:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1857:3:13"},"nodeType":"YulFunctionCall","src":"1857:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"1882:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1853:3:13"},"nodeType":"YulFunctionCall","src":"1853:32:13"},"nodeType":"YulIf","src":"1850:52:13"},{"nodeType":"YulAssignment","src":"1911:39:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1940:9:13"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1921:18:13"},"nodeType":"YulFunctionCall","src":"1921:29:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1911:6:13"}]},{"nodeType":"YulVariableDeclaration","src":"1959:46:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1990:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"2001:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1986:3:13"},"nodeType":"YulFunctionCall","src":"1986:18:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1973:12:13"},"nodeType":"YulFunctionCall","src":"1973:32:13"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1963:6:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"2048:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2057:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2060:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2050:6:13"},"nodeType":"YulFunctionCall","src":"2050:12:13"},"nodeType":"YulExpressionStatement","src":"2050:12:13"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2020:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"2028:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2017:2:13"},"nodeType":"YulFunctionCall","src":"2017:30:13"},"nodeType":"YulIf","src":"2014:50:13"},{"nodeType":"YulVariableDeclaration","src":"2073:96:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2141:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"2152:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2137:3:13"},"nodeType":"YulFunctionCall","src":"2137:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2161:7:13"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nodeType":"YulIdentifier","src":"2099:37:13"},"nodeType":"YulFunctionCall","src":"2099:70:13"},"variables":[{"name":"value1_1","nodeType":"YulTypedName","src":"2077:8:13","type":""},{"name":"value2_1","nodeType":"YulTypedName","src":"2087:8:13","type":""}]},{"nodeType":"YulAssignment","src":"2178:18:13","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"2188:8:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2178:6:13"}]},{"nodeType":"YulAssignment","src":"2205:18:13","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"2215:8:13"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2205:6:13"}]}]},"name":"abi_decode_tuple_t_addresst_array$_t_struct$_claimParam_$2036_calldata_ptr_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1790:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1801:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1813:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1821:6:13","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1829:6:13","type":""}],"src":"1688:541:13"},{"body":{"nodeType":"YulBlock","src":"2321:167:13","statements":[{"body":{"nodeType":"YulBlock","src":"2367:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2376:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2379:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2369:6:13"},"nodeType":"YulFunctionCall","src":"2369:12:13"},"nodeType":"YulExpressionStatement","src":"2369:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2342:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"2351:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2338:3:13"},"nodeType":"YulFunctionCall","src":"2338:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"2363:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2334:3:13"},"nodeType":"YulFunctionCall","src":"2334:32:13"},"nodeType":"YulIf","src":"2331:52:13"},{"nodeType":"YulAssignment","src":"2392:39:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2421:9:13"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2402:18:13"},"nodeType":"YulFunctionCall","src":"2402:29:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2392:6:13"}]},{"nodeType":"YulAssignment","src":"2440:42:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2467:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"2478:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2463:3:13"},"nodeType":"YulFunctionCall","src":"2463:18:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2450:12:13"},"nodeType":"YulFunctionCall","src":"2450:32:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2440:6:13"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2279:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2290:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2302:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2310:6:13","type":""}],"src":"2234:254:13"},{"body":{"nodeType":"YulBlock","src":"2588:92:13","statements":[{"nodeType":"YulAssignment","src":"2598:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2610:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"2621:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2606:3:13"},"nodeType":"YulFunctionCall","src":"2606:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2598:4:13"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2640:9:13"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2665:6:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2658:6:13"},"nodeType":"YulFunctionCall","src":"2658:14:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2651:6:13"},"nodeType":"YulFunctionCall","src":"2651:22:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2633:6:13"},"nodeType":"YulFunctionCall","src":"2633:41:13"},"nodeType":"YulExpressionStatement","src":"2633:41:13"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2557:9:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2568:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2579:4:13","type":""}],"src":"2493:187:13"},{"body":{"nodeType":"YulBlock","src":"2786:125:13","statements":[{"nodeType":"YulAssignment","src":"2796:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2808:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"2819:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2804:3:13"},"nodeType":"YulFunctionCall","src":"2804:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2796:4:13"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2838:9:13"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2853:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"2861:42:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2849:3:13"},"nodeType":"YulFunctionCall","src":"2849:55:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2831:6:13"},"nodeType":"YulFunctionCall","src":"2831:74:13"},"nodeType":"YulExpressionStatement","src":"2831:74:13"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2755:9:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2766:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2777:4:13","type":""}],"src":"2685:226:13"},{"body":{"nodeType":"YulBlock","src":"3017:76:13","statements":[{"nodeType":"YulAssignment","src":"3027:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3039:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"3050:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3035:3:13"},"nodeType":"YulFunctionCall","src":"3035:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3027:4:13"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3069:9:13"},{"name":"value0","nodeType":"YulIdentifier","src":"3080:6:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3062:6:13"},"nodeType":"YulFunctionCall","src":"3062:25:13"},"nodeType":"YulExpressionStatement","src":"3062:25:13"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2986:9:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2997:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3008:4:13","type":""}],"src":"2916:177:13"},{"body":{"nodeType":"YulBlock","src":"3185:167:13","statements":[{"body":{"nodeType":"YulBlock","src":"3231:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3240:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3243:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3233:6:13"},"nodeType":"YulFunctionCall","src":"3233:12:13"},"nodeType":"YulExpressionStatement","src":"3233:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3206:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"3215:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3202:3:13"},"nodeType":"YulFunctionCall","src":"3202:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"3227:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3198:3:13"},"nodeType":"YulFunctionCall","src":"3198:32:13"},"nodeType":"YulIf","src":"3195:52:13"},{"nodeType":"YulAssignment","src":"3256:39:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3285:9:13"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3266:18:13"},"nodeType":"YulFunctionCall","src":"3266:29:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3256:6:13"}]},{"nodeType":"YulAssignment","src":"3304:42:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3331:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"3342:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3327:3:13"},"nodeType":"YulFunctionCall","src":"3327:18:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3314:12:13"},"nodeType":"YulFunctionCall","src":"3314:32:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3304:6:13"}]}]},"name":"abi_decode_tuple_t_addresst_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3143:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3154:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3166:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3174:6:13","type":""}],"src":"3098:254:13"},{"body":{"nodeType":"YulBlock","src":"3531:155:13","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3548:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"3559:2:13","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3541:6:13"},"nodeType":"YulFunctionCall","src":"3541:21:13"},"nodeType":"YulExpressionStatement","src":"3541:21:13"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3582:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"3593:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3578:3:13"},"nodeType":"YulFunctionCall","src":"3578:18:13"},{"kind":"number","nodeType":"YulLiteral","src":"3598:1:13","type":"","value":"6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3571:6:13"},"nodeType":"YulFunctionCall","src":"3571:29:13"},"nodeType":"YulExpressionStatement","src":"3571:29:13"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3620:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"3631:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3616:3:13"},"nodeType":"YulFunctionCall","src":"3616:18:13"},{"hexValue":"66726f7a656e","kind":"string","nodeType":"YulLiteral","src":"3636:8:13","type":"","value":"frozen"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3609:6:13"},"nodeType":"YulFunctionCall","src":"3609:36:13"},"nodeType":"YulExpressionStatement","src":"3609:36:13"},{"nodeType":"YulAssignment","src":"3654:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3666:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"3677:2:13","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3662:3:13"},"nodeType":"YulFunctionCall","src":"3662:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3654:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_d1218620da09f6e7d360a42f242ae4d3ee7430442ec5be1555963e53ec012550__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3508:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3522:4:13","type":""}],"src":"3357:329:13"},{"body":{"nodeType":"YulBlock","src":"3865:171:13","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3882:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"3893:2:13","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3875:6:13"},"nodeType":"YulFunctionCall","src":"3875:21:13"},"nodeType":"YulExpressionStatement","src":"3875:21:13"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3916:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"3927:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3912:3:13"},"nodeType":"YulFunctionCall","src":"3912:18:13"},{"kind":"number","nodeType":"YulLiteral","src":"3932:2:13","type":"","value":"21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3905:6:13"},"nodeType":"YulFunctionCall","src":"3905:30:13"},"nodeType":"YulExpressionStatement","src":"3905:30:13"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3955:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"3966:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3951:3:13"},"nodeType":"YulFunctionCall","src":"3951:18:13"},{"hexValue":"44726f7020616c726561647920636c61696d65642e","kind":"string","nodeType":"YulLiteral","src":"3971:23:13","type":"","value":"Drop already claimed."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3944:6:13"},"nodeType":"YulFunctionCall","src":"3944:51:13"},"nodeType":"YulExpressionStatement","src":"3944:51:13"},{"nodeType":"YulAssignment","src":"4004:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4016:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"4027:2:13","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4012:3:13"},"nodeType":"YulFunctionCall","src":"4012:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4004:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_2d6fef2814860c16d5c1d12c83be9f1147cd08129c4dc625504ae457c4263177__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3842:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3856:4:13","type":""}],"src":"3691:345:13"},{"body":{"nodeType":"YulBlock","src":"4216:219:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4233:3:13"},{"name":"value0","nodeType":"YulIdentifier","src":"4238:6:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4226:6:13"},"nodeType":"YulFunctionCall","src":"4226:19:13"},"nodeType":"YulExpressionStatement","src":"4226:19:13"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4265:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"4270:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4261:3:13"},"nodeType":"YulFunctionCall","src":"4261:12:13"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4283:2:13","type":"","value":"96"},{"name":"value1","nodeType":"YulIdentifier","src":"4287:6:13"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4279:3:13"},"nodeType":"YulFunctionCall","src":"4279:15:13"},{"kind":"number","nodeType":"YulLiteral","src":"4296:66:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4275:3:13"},"nodeType":"YulFunctionCall","src":"4275:88:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4254:6:13"},"nodeType":"YulFunctionCall","src":"4254:110:13"},"nodeType":"YulExpressionStatement","src":"4254:110:13"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4384:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"4389:2:13","type":"","value":"52"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4380:3:13"},"nodeType":"YulFunctionCall","src":"4380:12:13"},{"name":"value2","nodeType":"YulIdentifier","src":"4394:6:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4373:6:13"},"nodeType":"YulFunctionCall","src":"4373:28:13"},"nodeType":"YulExpressionStatement","src":"4373:28:13"},{"nodeType":"YulAssignment","src":"4410:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4421:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"4426:2:13","type":"","value":"84"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4417:3:13"},"nodeType":"YulFunctionCall","src":"4417:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4410:3:13"}]}]},"name":"abi_encode_tuple_packed_t_uint256_t_address_t_uint256__to_t_uint256_t_address_t_uint256__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4176:3:13","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4181:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4189:6:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4197:6:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4208:3:13","type":""}],"src":"4041:394:13"},{"body":{"nodeType":"YulBlock","src":"4614:164:13","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4631:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"4642:2:13","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4624:6:13"},"nodeType":"YulFunctionCall","src":"4624:21:13"},"nodeType":"YulExpressionStatement","src":"4624:21:13"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4665:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"4676:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4661:3:13"},"nodeType":"YulFunctionCall","src":"4661:18:13"},{"kind":"number","nodeType":"YulLiteral","src":"4681:2:13","type":"","value":"14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4654:6:13"},"nodeType":"YulFunctionCall","src":"4654:30:13"},"nodeType":"YulExpressionStatement","src":"4654:30:13"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4704:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"4715:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4700:3:13"},"nodeType":"YulFunctionCall","src":"4700:18:13"},{"hexValue":"496e76616c69642070726f6f662e","kind":"string","nodeType":"YulLiteral","src":"4720:16:13","type":"","value":"Invalid proof."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4693:6:13"},"nodeType":"YulFunctionCall","src":"4693:44:13"},"nodeType":"YulExpressionStatement","src":"4693:44:13"},{"nodeType":"YulAssignment","src":"4746:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4758:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"4769:2:13","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4754:3:13"},"nodeType":"YulFunctionCall","src":"4754:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4746:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_de1f5bb2d20d4a4d49aebff9944173f9fc2479a4c12613a76f6841cd4875ee3a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4591:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4605:4:13","type":""}],"src":"4440:338:13"},{"body":{"nodeType":"YulBlock","src":"4912:119:13","statements":[{"nodeType":"YulAssignment","src":"4922:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4934:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"4945:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4930:3:13"},"nodeType":"YulFunctionCall","src":"4930:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4922:4:13"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4964:9:13"},{"name":"value0","nodeType":"YulIdentifier","src":"4975:6:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4957:6:13"},"nodeType":"YulFunctionCall","src":"4957:25:13"},"nodeType":"YulExpressionStatement","src":"4957:25:13"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5002:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"5013:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4998:3:13"},"nodeType":"YulFunctionCall","src":"4998:18:13"},{"name":"value1","nodeType":"YulIdentifier","src":"5018:6:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4991:6:13"},"nodeType":"YulFunctionCall","src":"4991:34:13"},"nodeType":"YulExpressionStatement","src":"4991:34:13"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4873:9:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4884:6:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4892:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4903:4:13","type":""}],"src":"4783:248:13"},{"body":{"nodeType":"YulBlock","src":"5068:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5085:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5088:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5078:6:13"},"nodeType":"YulFunctionCall","src":"5078:88:13"},"nodeType":"YulExpressionStatement","src":"5078:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5182:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5185:4:13","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5175:6:13"},"nodeType":"YulFunctionCall","src":"5175:15:13"},"nodeType":"YulExpressionStatement","src":"5175:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5206:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5209:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5199:6:13"},"nodeType":"YulFunctionCall","src":"5199:15:13"},"nodeType":"YulExpressionStatement","src":"5199:15:13"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"5036:184:13"},{"body":{"nodeType":"YulBlock","src":"5330:281:13","statements":[{"nodeType":"YulVariableDeclaration","src":"5340:51:13","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"5379:11:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5366:12:13"},"nodeType":"YulFunctionCall","src":"5366:25:13"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"5344:18:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"5539:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5548:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5551:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5541:6:13"},"nodeType":"YulFunctionCall","src":"5541:12:13"},"nodeType":"YulExpressionStatement","src":"5541:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"5414:18:13"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"5442:12:13"},"nodeType":"YulFunctionCall","src":"5442:14:13"},{"name":"base_ref","nodeType":"YulIdentifier","src":"5458:8:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5438:3:13"},"nodeType":"YulFunctionCall","src":"5438:29:13"},{"kind":"number","nodeType":"YulLiteral","src":"5469:66:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5434:3:13"},"nodeType":"YulFunctionCall","src":"5434:102:13"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5410:3:13"},"nodeType":"YulFunctionCall","src":"5410:127:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5403:6:13"},"nodeType":"YulFunctionCall","src":"5403:135:13"},"nodeType":"YulIf","src":"5400:155:13"},{"nodeType":"YulAssignment","src":"5564:41:13","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"5576:8:13"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"5586:18:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5572:3:13"},"nodeType":"YulFunctionCall","src":"5572:33:13"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"5564:4:13"}]}]},"name":"access_calldata_tail_t_struct$_claimParam_$2036_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"5295:8:13","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"5305:11:13","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"5321:4:13","type":""}],"src":"5225:386:13"},{"body":{"nodeType":"YulBlock","src":"5726:494:13","statements":[{"nodeType":"YulVariableDeclaration","src":"5736:51:13","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"5775:11:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5762:12:13"},"nodeType":"YulFunctionCall","src":"5762:25:13"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"5740:18:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"5935:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5944:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5947:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5937:6:13"},"nodeType":"YulFunctionCall","src":"5937:12:13"},"nodeType":"YulExpressionStatement","src":"5937:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"5810:18:13"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"5838:12:13"},"nodeType":"YulFunctionCall","src":"5838:14:13"},{"name":"base_ref","nodeType":"YulIdentifier","src":"5854:8:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5834:3:13"},"nodeType":"YulFunctionCall","src":"5834:29:13"},{"kind":"number","nodeType":"YulLiteral","src":"5865:66:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5830:3:13"},"nodeType":"YulFunctionCall","src":"5830:102:13"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5806:3:13"},"nodeType":"YulFunctionCall","src":"5806:127:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5799:6:13"},"nodeType":"YulFunctionCall","src":"5799:135:13"},"nodeType":"YulIf","src":"5796:155:13"},{"nodeType":"YulVariableDeclaration","src":"5960:47:13","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"5978:8:13"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"5988:18:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5974:3:13"},"nodeType":"YulFunctionCall","src":"5974:33:13"},"variables":[{"name":"addr_1","nodeType":"YulTypedName","src":"5964:6:13","type":""}]},{"nodeType":"YulAssignment","src":"6016:30:13","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"6039:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6026:12:13"},"nodeType":"YulFunctionCall","src":"6026:20:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6016:6:13"}]},{"body":{"nodeType":"YulBlock","src":"6089:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6098:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6101:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6091:6:13"},"nodeType":"YulFunctionCall","src":"6091:12:13"},"nodeType":"YulExpressionStatement","src":"6091:12:13"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6061:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"6069:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6058:2:13"},"nodeType":"YulFunctionCall","src":"6058:30:13"},"nodeType":"YulIf","src":"6055:50:13"},{"nodeType":"YulAssignment","src":"6114:25:13","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"6126:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"6134:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6122:3:13"},"nodeType":"YulFunctionCall","src":"6122:17:13"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"6114:4:13"}]},{"body":{"nodeType":"YulBlock","src":"6198:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6207:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6210:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6200:6:13"},"nodeType":"YulFunctionCall","src":"6200:12:13"},"nodeType":"YulExpressionStatement","src":"6200:12:13"}]},"condition":{"arguments":[{"name":"addr","nodeType":"YulIdentifier","src":"6155:4:13"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"6165:12:13"},"nodeType":"YulFunctionCall","src":"6165:14:13"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6185:1:13","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"6188:6:13"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6181:3:13"},"nodeType":"YulFunctionCall","src":"6181:14:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6161:3:13"},"nodeType":"YulFunctionCall","src":"6161:35:13"}],"functionName":{"name":"sgt","nodeType":"YulIdentifier","src":"6151:3:13"},"nodeType":"YulFunctionCall","src":"6151:46:13"},"nodeType":"YulIf","src":"6148:66:13"}]},"name":"access_calldata_tail_t_array$_t_bytes32_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"5683:8:13","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"5693:11:13","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"5709:4:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"5715:6:13","type":""}],"src":"5616:604:13"},{"body":{"nodeType":"YulBlock","src":"6257:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6274:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6277:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6267:6:13"},"nodeType":"YulFunctionCall","src":"6267:88:13"},"nodeType":"YulExpressionStatement","src":"6267:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6371:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6374:4:13","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6364:6:13"},"nodeType":"YulFunctionCall","src":"6364:15:13"},"nodeType":"YulExpressionStatement","src":"6364:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6395:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6398:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6388:6:13"},"nodeType":"YulFunctionCall","src":"6388:15:13"},"nodeType":"YulExpressionStatement","src":"6388:15:13"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"6225:184:13"},{"body":{"nodeType":"YulBlock","src":"6461:148:13","statements":[{"body":{"nodeType":"YulBlock","src":"6552:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6554:16:13"},"nodeType":"YulFunctionCall","src":"6554:18:13"},"nodeType":"YulExpressionStatement","src":"6554:18:13"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6477:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"6484:66:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6474:2:13"},"nodeType":"YulFunctionCall","src":"6474:77:13"},"nodeType":"YulIf","src":"6471:103:13"},{"nodeType":"YulAssignment","src":"6583:20:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6594:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"6601:1:13","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6590:3:13"},"nodeType":"YulFunctionCall","src":"6590:13:13"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"6583:3:13"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6443:5:13","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"6453:3:13","type":""}],"src":"6414:195:13"},{"body":{"nodeType":"YulBlock","src":"6646:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6663:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6666:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6656:6:13"},"nodeType":"YulFunctionCall","src":"6656:88:13"},"nodeType":"YulExpressionStatement","src":"6656:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6760:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6763:4:13","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6753:6:13"},"nodeType":"YulFunctionCall","src":"6753:15:13"},"nodeType":"YulExpressionStatement","src":"6753:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6784:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6787:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6777:6:13"},"nodeType":"YulFunctionCall","src":"6777:15:13"},"nodeType":"YulExpressionStatement","src":"6777:15:13"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"6614:184:13"},{"body":{"nodeType":"YulBlock","src":"6849:74:13","statements":[{"body":{"nodeType":"YulBlock","src":"6872:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"6874:16:13"},"nodeType":"YulFunctionCall","src":"6874:18:13"},"nodeType":"YulExpressionStatement","src":"6874:18:13"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6869:1:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6862:6:13"},"nodeType":"YulFunctionCall","src":"6862:9:13"},"nodeType":"YulIf","src":"6859:35:13"},{"nodeType":"YulAssignment","src":"6903:14:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6912:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"6915:1:13"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6908:3:13"},"nodeType":"YulFunctionCall","src":"6908:9:13"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6903:1:13"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6834:1:13","type":""},{"name":"y","nodeType":"YulTypedName","src":"6837:1:13","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"6843:1:13","type":""}],"src":"6803:120:13"},{"body":{"nodeType":"YulBlock","src":"6966:74:13","statements":[{"body":{"nodeType":"YulBlock","src":"6989:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"6991:16:13"},"nodeType":"YulFunctionCall","src":"6991:18:13"},"nodeType":"YulExpressionStatement","src":"6991:18:13"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6986:1:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6979:6:13"},"nodeType":"YulFunctionCall","src":"6979:9:13"},"nodeType":"YulIf","src":"6976:35:13"},{"nodeType":"YulAssignment","src":"7020:14:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7029:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"7032:1:13"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"7025:3:13"},"nodeType":"YulFunctionCall","src":"7025:9:13"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7020:1:13"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6951:1:13","type":""},{"name":"y","nodeType":"YulTypedName","src":"6954:1:13","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"6960:1:13","type":""}],"src":"6928:112:13"},{"body":{"nodeType":"YulBlock","src":"7219:182:13","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7236:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"7247:2:13","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7229:6:13"},"nodeType":"YulFunctionCall","src":"7229:21:13"},"nodeType":"YulExpressionStatement","src":"7229:21:13"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7270:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"7281:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7266:3:13"},"nodeType":"YulFunctionCall","src":"7266:18:13"},{"kind":"number","nodeType":"YulLiteral","src":"7286:2:13","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7259:6:13"},"nodeType":"YulFunctionCall","src":"7259:30:13"},"nodeType":"YulExpressionStatement","src":"7259:30:13"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7309:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"7320:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7305:3:13"},"nodeType":"YulFunctionCall","src":"7305:18:13"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"7325:34:13","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7298:6:13"},"nodeType":"YulFunctionCall","src":"7298:62:13"},"nodeType":"YulExpressionStatement","src":"7298:62:13"},{"nodeType":"YulAssignment","src":"7369:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7381:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"7392:2:13","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7377:3:13"},"nodeType":"YulFunctionCall","src":"7377:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7369:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7196:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7210:4:13","type":""}],"src":"7045:356:13"},{"body":{"nodeType":"YulBlock","src":"7454:77:13","statements":[{"nodeType":"YulAssignment","src":"7464:16:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7475:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"7478:1:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7471:3:13"},"nodeType":"YulFunctionCall","src":"7471:9:13"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"7464:3:13"}]},{"body":{"nodeType":"YulBlock","src":"7503:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"7505:16:13"},"nodeType":"YulFunctionCall","src":"7505:18:13"},"nodeType":"YulExpressionStatement","src":"7505:18:13"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7495:1:13"},{"name":"sum","nodeType":"YulIdentifier","src":"7498:3:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7492:2:13"},"nodeType":"YulFunctionCall","src":"7492:10:13"},"nodeType":"YulIf","src":"7489:36:13"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"7437:1:13","type":""},{"name":"y","nodeType":"YulTypedName","src":"7440:1:13","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"7446:3:13","type":""}],"src":"7406:125:13"},{"body":{"nodeType":"YulBlock","src":"7710:228:13","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7727:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"7738:2:13","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7720:6:13"},"nodeType":"YulFunctionCall","src":"7720:21:13"},"nodeType":"YulExpressionStatement","src":"7720:21:13"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7761:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"7772:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7757:3:13"},"nodeType":"YulFunctionCall","src":"7757:18:13"},{"kind":"number","nodeType":"YulLiteral","src":"7777:2:13","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7750:6:13"},"nodeType":"YulFunctionCall","src":"7750:30:13"},"nodeType":"YulExpressionStatement","src":"7750:30:13"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7800:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"7811:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7796:3:13"},"nodeType":"YulFunctionCall","src":"7796:18:13"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"7816:34:13","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7789:6:13"},"nodeType":"YulFunctionCall","src":"7789:62:13"},"nodeType":"YulExpressionStatement","src":"7789:62:13"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7871:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"7882:2:13","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7867:3:13"},"nodeType":"YulFunctionCall","src":"7867:18:13"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"7887:8:13","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7860:6:13"},"nodeType":"YulFunctionCall","src":"7860:36:13"},"nodeType":"YulExpressionStatement","src":"7860:36:13"},{"nodeType":"YulAssignment","src":"7905:27:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7917:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"7928:3:13","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7913:3:13"},"nodeType":"YulFunctionCall","src":"7913:19:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7905:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7687:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7701:4:13","type":""}],"src":"7536:402:13"},{"body":{"nodeType":"YulBlock","src":"8072:168:13","statements":[{"nodeType":"YulAssignment","src":"8082:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8094:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"8105:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8090:3:13"},"nodeType":"YulFunctionCall","src":"8090:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8082:4:13"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8124:9:13"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8139:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"8147:42:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8135:3:13"},"nodeType":"YulFunctionCall","src":"8135:55:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8117:6:13"},"nodeType":"YulFunctionCall","src":"8117:74:13"},"nodeType":"YulExpressionStatement","src":"8117:74:13"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8211:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"8222:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8207:3:13"},"nodeType":"YulFunctionCall","src":"8207:18:13"},{"name":"value1","nodeType":"YulIdentifier","src":"8227:6:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8200:6:13"},"nodeType":"YulFunctionCall","src":"8200:34:13"},"nodeType":"YulExpressionStatement","src":"8200:34:13"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8033:9:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8044:6:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8052:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8063:4:13","type":""}],"src":"7943:297:13"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_array_bytes32_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256t_addresst_uint256t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := abi_decode_address(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_array$_t_struct$_claimParam_$2036_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_bytes32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_d1218620da09f6e7d360a42f242ae4d3ee7430442ec5be1555963e53ec012550__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 6)\n        mstore(add(headStart, 64), \"frozen\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2d6fef2814860c16d5c1d12c83be9f1147cd08129c4dc625504ae457c4263177__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Drop already claimed.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_uint256_t_address_t_uint256__to_t_uint256_t_address_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), and(shl(96, value1), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        mstore(add(pos, 52), value2)\n        end := add(pos, 84)\n    }\n    function abi_encode_tuple_t_stringliteral_de1f5bb2d20d4a4d49aebff9944173f9fc2479a4c12613a76f6841cd4875ee3a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Invalid proof.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function access_calldata_tail_t_struct$_claimParam_$2036_calldata_ptr(base_ref, ptr_to_tail) -> addr\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81))) { revert(0, 0) }\n        addr := add(base_ref, rel_offset_of_tail)\n    }\n    function access_calldata_tail_t_array$_t_bytes32_$dyn_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), shl(5, length))) { revert(0, 0) }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n}","id":13,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100a35760003560e01c8063715018a611610076578063e21115861161005b578063e211158614610156578063e786818e14610176578063f2fde38b1461018957600080fd5b8063715018a6146101265780638da5cb5b1461012e57600080fd5b806312d18ed6146100a85780631c1b8772146100bd57806320ce64de146100f0578063562beba814610103575b600080fd5b6100bb6100b6366004610bb2565b61019c565b005b6100dd6100cb366004610c2a565b60026020526000908152604090205481565b6040519081526020015b60405180910390f35b6100bb6100fe366004610c45565b61045f565b610116610111366004610c98565b610538565b60405190151581526020016100e7565b6100bb6105ae565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e7565b6100dd610164366004610c2a565b60016020526000908152604090205481565b6100bb610184366004610c98565b61063b565b6100bb610197366004610c2a565b61075b565b73ffffffffffffffffffffffffffffffffffffffff8616600090815260016020526040812054900361022f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f66726f7a656e000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6102398686610538565b156102a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f44726f7020616c726561647920636c61696d65642e00000000000000000000006044820152606401610226565b60408051602081018790527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b16918101919091526054810184905260009060740160405160208183030381529060405280519060200120905061035f838380806020026020016040519081016040528093929190818152602001838360200280828437600092018290525073ffffffffffffffffffffffffffffffffffffffff8d16815260016020526040902054925085915061088b9050565b6103c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c69642070726f6f662e0000000000000000000000000000000000006044820152606401610226565b6103cf87876108a1565b6103f073ffffffffffffffffffffffffffffffffffffffff88168686610913565b73ffffffffffffffffffffffffffffffffffffffff8781166000818152600260209081526040918290205482518b815291820189905293891692917f4766921f5c59646d22d7d266a29164c8e9623684d8dfdbd931731dfdca025238910160405180910390a450505050505050565b60005b818110156105325761052283838381811061047f5761047f610cc2565b90506020028101906104919190610cf1565b61049f906020810190610c2a565b8484848181106104b1576104b1610cc2565b90506020028101906104c39190610cf1565b60200135868686868181106104da576104da610cc2565b90506020028101906104ec9190610cf1565b6040013587878781811061050257610502610cc2565b90506020028101906105149190610cf1565b6100b6906060810190610d2f565b61052b81610dc6565b9050610462565b50505050565b60008061054761010084610e2d565b9050600061055761010085610e41565b73ffffffffffffffffffffffffffffffffffffffff861660009081526003602090815260408083206002835281842054845282528083209583529490529290922054600190921b9182169091149150505b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461062f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610226565b61063960006109a5565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610226565b73ffffffffffffffffffffffffffffffffffffffff821660009081526002602052604081208054600192906106f2908490610e55565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600081815260016020908152604080832085905560029091528082205490519092849290917fbdc375de8a677af383c6ee6f8b2027dbd231c3c47453ce81d1ce8f1bcdb722dc9190a45050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610226565b73ffffffffffffffffffffffffffffffffffffffff811661087f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610226565b610888816109a5565b50565b6000826108988584610a1a565b14949350505050565b60006108af61010083610e2d565b905060006108bf61010084610e41565b73ffffffffffffffffffffffffffffffffffffffff949094166000908152600360209081526040808320600283528184205484528252808320948352939052919091208054600190941b9093179092555050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526109a0908490610a67565b505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081815b8451811015610a5f57610a4b82868381518110610a3e57610a3e610cc2565b6020026020010151610b0b565b915080610a5781610dc6565b915050610a1f565b509392505050565b600080602060008451602086016000885af180610a8a576040513d6000823e3d81fd5b50506000513d91508115610aa2578060011415610abc565b73ffffffffffffffffffffffffffffffffffffffff84163b155b15610532576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610226565b6000818310610b27576000828152602084905260409020610b36565b60008381526020839052604090205b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b6157600080fd5b919050565b60008083601f840112610b7857600080fd5b50813567ffffffffffffffff811115610b9057600080fd5b6020830191508360208260051b8501011115610bab57600080fd5b9250929050565b60008060008060008060a08789031215610bcb57600080fd5b610bd487610b3d565b955060208701359450610be960408801610b3d565b935060608701359250608087013567ffffffffffffffff811115610c0c57600080fd5b610c1889828a01610b66565b979a9699509497509295939492505050565b600060208284031215610c3c57600080fd5b610b3682610b3d565b600080600060408486031215610c5a57600080fd5b610c6384610b3d565b9250602084013567ffffffffffffffff811115610c7f57600080fd5b610c8b86828701610b66565b9497909650939450505050565b60008060408385031215610cab57600080fd5b610cb483610b3d565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81833603018112610d2557600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610d6457600080fd5b83018035915067ffffffffffffffff821115610d7f57600080fd5b6020019150600581901b3603821315610bab57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610df757610df7610d97565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082610e3c57610e3c610dfe565b500490565b600082610e5057610e50610dfe565b500690565b808201808211156105a8576105a8610d9756fea2646970667358221220f8a88173524a7dc4414f8edfb8a1eec91d3d3d4b89393e8390590989331992ef64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x76 JUMPI DUP1 PUSH4 0xE2111586 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xE2111586 EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0xE786818E EQ PUSH2 0x176 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x189 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x12E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x12D18ED6 EQ PUSH2 0xA8 JUMPI DUP1 PUSH4 0x1C1B8772 EQ PUSH2 0xBD JUMPI DUP1 PUSH4 0x20CE64DE EQ PUSH2 0xF0 JUMPI DUP1 PUSH4 0x562BEBA8 EQ PUSH2 0x103 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBB PUSH2 0xB6 CALLDATASIZE PUSH1 0x4 PUSH2 0xBB2 JUMP JUMPDEST PUSH2 0x19C JUMP JUMPDEST STOP JUMPDEST PUSH2 0xDD PUSH2 0xCB CALLDATASIZE PUSH1 0x4 PUSH2 0xC2A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBB PUSH2 0xFE CALLDATASIZE PUSH1 0x4 PUSH2 0xC45 JUMP JUMPDEST PUSH2 0x45F JUMP JUMPDEST PUSH2 0x116 PUSH2 0x111 CALLDATASIZE PUSH1 0x4 PUSH2 0xC98 JUMP JUMPDEST PUSH2 0x538 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE7 JUMP JUMPDEST PUSH2 0xBB PUSH2 0x5AE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE7 JUMP JUMPDEST PUSH2 0xDD PUSH2 0x164 CALLDATASIZE PUSH1 0x4 PUSH2 0xC2A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xBB PUSH2 0x184 CALLDATASIZE PUSH1 0x4 PUSH2 0xC98 JUMP JUMPDEST PUSH2 0x63B JUMP JUMPDEST PUSH2 0xBB PUSH2 0x197 CALLDATASIZE PUSH1 0x4 PUSH2 0xC2A JUMP JUMPDEST PUSH2 0x75B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SUB PUSH2 0x22F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x66726F7A656E0000000000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x239 DUP7 DUP7 PUSH2 0x538 JUMP JUMPDEST ISZERO PUSH2 0x2A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44726F7020616C726561647920636C61696D65642E0000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x226 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP8 SWAP1 SHL AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x54 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x74 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x35F DUP4 DUP4 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP3 POP DUP6 SWAP2 POP PUSH2 0x88B SWAP1 POP JUMP JUMPDEST PUSH2 0x3C5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642070726F6F662E000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x226 JUMP JUMPDEST PUSH2 0x3CF DUP8 DUP8 PUSH2 0x8A1 JUMP JUMPDEST PUSH2 0x3F0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND DUP7 DUP7 PUSH2 0x913 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP12 DUP2 MSTORE SWAP2 DUP3 ADD DUP10 SWAP1 MSTORE SWAP4 DUP10 AND SWAP3 SWAP2 PUSH32 0x4766921F5C59646D22D7D266A29164C8E9623684D8DFDBD931731DFDCA025238 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x532 JUMPI PUSH2 0x522 DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0x47F JUMPI PUSH2 0x47F PUSH2 0xCC2 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x491 SWAP2 SWAP1 PUSH2 0xCF1 JUMP JUMPDEST PUSH2 0x49F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xC2A JUMP JUMPDEST DUP5 DUP5 DUP5 DUP2 DUP2 LT PUSH2 0x4B1 JUMPI PUSH2 0x4B1 PUSH2 0xCC2 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x4C3 SWAP2 SWAP1 PUSH2 0xCF1 JUMP JUMPDEST PUSH1 0x20 ADD CALLDATALOAD DUP7 DUP7 DUP7 DUP7 DUP2 DUP2 LT PUSH2 0x4DA JUMPI PUSH2 0x4DA PUSH2 0xCC2 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x4EC SWAP2 SWAP1 PUSH2 0xCF1 JUMP JUMPDEST PUSH1 0x40 ADD CALLDATALOAD DUP8 DUP8 DUP8 DUP2 DUP2 LT PUSH2 0x502 JUMPI PUSH2 0x502 PUSH2 0xCC2 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x514 SWAP2 SWAP1 PUSH2 0xCF1 JUMP JUMPDEST PUSH2 0xB6 SWAP1 PUSH1 0x60 DUP2 ADD SWAP1 PUSH2 0xD2F JUMP JUMPDEST PUSH2 0x52B DUP2 PUSH2 0xDC6 JUMP JUMPDEST SWAP1 POP PUSH2 0x462 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x547 PUSH2 0x100 DUP5 PUSH2 0xE2D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x557 PUSH2 0x100 DUP6 PUSH2 0xE41 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x2 DUP4 MSTORE DUP2 DUP5 KECCAK256 SLOAD DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP6 DUP4 MSTORE SWAP5 SWAP1 MSTORE SWAP3 SWAP1 SWAP3 KECCAK256 SLOAD PUSH1 0x1 SWAP1 SWAP3 SHL SWAP2 DUP3 AND SWAP1 SWAP2 EQ SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x62F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x226 JUMP JUMPDEST PUSH2 0x639 PUSH1 0x0 PUSH2 0x9A5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x6BC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x226 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x6F2 SWAP1 DUP5 SWAP1 PUSH2 0xE55 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD SWAP1 SWAP3 DUP5 SWAP3 SWAP1 SWAP2 PUSH32 0xBDC375DE8A677AF383C6EE6F8B2027DBD231C3C47453CE81D1CE8F1BCDB722DC SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x7DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x226 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x87F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x226 JUMP JUMPDEST PUSH2 0x888 DUP2 PUSH2 0x9A5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x898 DUP6 DUP5 PUSH2 0xA1A JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AF PUSH2 0x100 DUP4 PUSH2 0xE2D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8BF PUSH2 0x100 DUP5 PUSH2 0xE41 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x2 DUP4 MSTORE DUP2 DUP5 KECCAK256 SLOAD DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP5 DUP4 MSTORE SWAP4 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP5 SHL SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x9A0 SWAP1 DUP5 SWAP1 PUSH2 0xA67 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xA5F JUMPI PUSH2 0xA4B DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA3E JUMPI PUSH2 0xA3E PUSH2 0xCC2 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xB0B JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0xA57 DUP2 PUSH2 0xDC6 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xA1F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 PUSH1 0x0 DUP5 MLOAD PUSH1 0x20 DUP7 ADD PUSH1 0x0 DUP9 GAS CALL DUP1 PUSH2 0xA8A JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST POP POP PUSH1 0x0 MLOAD RETURNDATASIZE SWAP2 POP DUP2 ISZERO PUSH2 0xAA2 JUMPI DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0xABC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x532 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x226 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xB27 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xB36 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xB61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xB78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xBAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xBCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD4 DUP8 PUSH2 0xB3D JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH2 0xBE9 PUSH1 0x40 DUP9 ADD PUSH2 0xB3D JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC18 DUP10 DUP3 DUP11 ADD PUSH2 0xB66 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB36 DUP3 PUSH2 0xB3D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC63 DUP5 PUSH2 0xB3D JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC8B DUP7 DUP3 DUP8 ADD PUSH2 0xB66 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCB4 DUP4 PUSH2 0xB3D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF81 DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xD25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xD64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xD7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP PUSH1 0x5 DUP2 SWAP1 SHL CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0xBAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xDF7 JUMPI PUSH2 0xDF7 PUSH2 0xD97 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xE3C JUMPI PUSH2 0xE3C PUSH2 0xDFE JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xE50 JUMPI PUSH2 0xE50 PUSH2 0xDFE JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x5A8 JUMPI PUSH2 0x5A8 PUSH2 0xD97 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF8 0xA8 DUP2 PUSH20 0x524A7DC4414F8EDFB8A1EEC91D3D3D4B89393E83 SWAP1 MSIZE MULMOD DUP10 CALLER NOT SWAP3 0xEF PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"292:2493:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1393:573;;;;;;:::i;:::-;;:::i;:::-;;582:41;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1652:25:13;;;1640:2;1625:18;582:41:11;;;;;;;;1970:227;;;;;;:::i;:::-;;:::i;763:331::-;;;;;;:::i;:::-;;:::i;:::-;;;2658:14:13;;2651:22;2633:41;;2621:2;2606:18;763:331:11;2493:187:13;1537:101:12;;;:::i;905:85::-;951:7;977:6;905:85;;977:6;;;;2831:74:13;;2819:2;2804:18;905:85:12;2685:226:13;533:45:11;;;;;;:::i;:::-;;;;;;;;;;;;;;2230:315;;;;;;:::i;:::-;;:::i;1787:198:12:-;;;;;;:::i;:::-;;:::i;1393:573:11:-;1524:17;;;;;;;:10;:17;;;;;;:22;;1516:41;;;;;;;3559:2:13;1516:41:11;;;3541:21:13;3598:1;3578:18;;;3571:29;3636:8;3616:18;;;3609:36;3662:18;;1516:41:11;;;;;;;;;1572:23;1582:5;1589;1572:9;:23::i;:::-;1571:24;1563:58;;;;;;;3893:2:13;1563:58:11;;;3875:21:13;3932:2;3912:18;;;3905:30;3971:23;3951:18;;;3944:51;4012:18;;1563:58:11;3691:345:13;1563:58:11;1685:40;;;;;;4226:19:13;;;4296:66;4283:2;4279:15;;;4275:88;4261:12;;;4254:110;;;;4380:12;;;4373:28;;;1660:12:11;;4417::13;;1685:40:11;;;;;;;;;;;;1675:51;;;;;;1660:66;;1740:56;1759:11;;1740:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1772:17:11;;;;;:10;:17;;;;;;;-1:-1:-1;1791:4:11;;-1:-1:-1;1740:18:11;;-1:-1:-1;1740:56:11:i;:::-;1732:83;;;;;;;4642:2:13;1732:83:11;;;4624:21:13;4681:2;4661:18;;;4654:30;4720:16;4700:18;;;4693:44;4754:18;;1732:83:11;4440:338:13;1732:83:11;1822:25;1834:5;1841;1822:11;:25::i;:::-;1853:43;:26;;;1880:7;1889:6;1853:26;:43::i;:::-;1947:13;;;;;;;;:6;:13;;;;;;;;;;1908:53;;4957:25:13;;;4998:18;;;4991:34;;;1947:13:11;1908:53;;;1947:13;1908:53;;4930:18:13;1908:53:11;;;;;;;1510:456;1393:573;;;;;;:::o;1970:227::-;2056:9;2052:141;2068:15;;;2052:141;;;2097:89;2103:6;;2110:1;2103:9;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:15;;;;;;;:::i;:::-;2120:6;;2127:1;2120:9;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:15;;;2137:7;2146:6;;2153:1;2146:9;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:16;;;2164:6;;2171:1;2164:9;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:21;;;;;;;:::i;2097:89::-;2084:3;;;:::i;:::-;;;2052:141;;;;1970:227;;;:::o;763:331::-;833:4;;872:11;880:3;872:5;:11;:::i;:::-;845:38;-1:-1:-1;889:23:11;915:11;923:3;915:5;:11;:::i;:::-;954:20;;;932:19;954:20;;;:13;:20;;;;;;;;975:6;:13;;;;;;954:35;;;;;;;:53;;;;;;;;;;;1029:1;:20;;;1063:18;;;:26;;;;-1:-1:-1;;763:331:11;;;;;:::o;1537:101:12:-;951:7;977:6;1117:23;977:6;735:10:6;1117:23:12;1109:68;;;;;;;7247:2:13;1109:68:12;;;7229:21:13;;;7266:18;;;7259:30;7325:34;7305:18;;;7298:62;7377:18;;1109:68:12;7045:356:13;1109:68:12;1601:30:::1;1628:1;1601:18;:30::i;:::-;1537:101::o:0;2230:315:11:-;951:7:12;977:6;1117:23;977:6;735:10:6;1117:23:12;1109:68;;;;;;;7247:2:13;1109:68:12;;;7229:21:13;;;7266:18;;;7259:30;7325:34;7305:18;;;7298:62;7377:18;;1109:68:12;7045:356:13;1109:68:12;2390:13:11::1;::::0;::::1;;::::0;;;:6:::1;:13;::::0;;;;:18;;2407:1:::1;::::0;2390:13;:18:::1;::::0;2407:1;;2390:18:::1;:::i;:::-;::::0;;;-1:-1:-1;;2445:17:11::1;::::0;::::1;;::::0;;;:10:::1;:17;::::0;;;;;;;:31;;;2526:6:::1;:13:::0;;;;;;;2488:52;;2526:13;;2465:11;;2445:17;;2488:52:::1;::::0;2445:17;2488:52:::1;2230:315:::0;;:::o;1787:198:12:-;951:7;977:6;1117:23;977:6;735:10:6;1117:23:12;1109:68;;;;;;;7247:2:13;1109:68:12;;;7229:21:13;;;7266:18;;;7259:30;7325:34;7305:18;;;7298:62;7377:18;;1109:68:12;7045:356:13;1109:68:12;1875:22:::1;::::0;::::1;1867:73;;;::::0;::::1;::::0;;7738:2:13;1867:73:12::1;::::0;::::1;7720:21:13::0;7777:2;7757:18;;;7750:30;7816:34;7796:18;;;7789:62;7887:8;7867:18;;;7860:36;7913:19;;1867:73:12::1;7536:402:13::0;1867:73:12::1;1950:28;1969:8;1950:18;:28::i;:::-;1787:198:::0;:::o;1902:154:9:-;1993:4;2045;2016:25;2029:5;2036:4;2016:12;:25::i;:::-;:33;;1902:154;-1:-1:-1;;;;1902:154:9:o;1098:291:11:-;1163:24;1190:11;1198:3;1190:5;:11;:::i;:::-;1163:38;-1:-1:-1;1207:23:11;1233:11;1241:3;1233:5;:11;:::i;:::-;1306:20;;;;;;;;;:13;:20;;;;;;;;1327:6;:13;;;;;;1306:35;;;;;;;:53;;;;;;;;;;;;1363:1;:20;;;1306:78;;;1250:134;;;-1:-1:-1;;1098:291:11:o;1271:160:4:-;1380:43;;;1395:14;8135:55:13;;1380:43:4;;;8117:74:13;8207:18;;;;8200:34;;;1380:43:4;;;;;;;;;;8090:18:13;;;;1380:43:4;;;;;;;;;;;;;;1353:71;;1373:5;;1353:19;:71::i;:::-;1271:160;;;:::o;2139:187:12:-;2212:16;2231:6;;;2247:17;;;;;;;;;;2279:40;;2231:6;;;;;;;2279:40;;2212:16;2279:40;2202:124;2139:187;:::o;2457:308:9:-;2540:7;2582:4;2540:7;2596:134;2620:5;:12;2616:1;:16;2596:134;;;2668:51;2696:12;2710:5;2716:1;2710:8;;;;;;;;:::i;:::-;;;;;;;2668:27;:51::i;:::-;2653:66;-1:-1:-1;2634:3:9;;;;:::i;:::-;;;;2596:134;;;-1:-1:-1;2746:12:9;2457:308;-1:-1:-1;;;2457:308:9:o;7738:720:4:-;7818:18;7846:19;7984:4;7981:1;7974:4;7968:11;7961:4;7955;7951:15;7948:1;7941:5;7934;7929:60;8041:7;8031:176;;8085:4;8079:11;8130:16;8127:1;8122:3;8107:40;8176:16;8171:3;8164:29;8031:176;-1:-1:-1;;8284:1:4;8278:8;8234:16;;-1:-1:-1;8310:15:4;;:68;;8362:11;8377:1;8362:16;;8310:68;;;8328:26;;;;:31;8310:68;8306:146;;;8401:40;;;;;2861:42:13;2849:55;;8401:40:4;;;2831:74:13;2804:18;;8401:40:4;2685:226:13;504:169:8;579:7;609:1;605;:5;:61;;866:13;930:15;;;965:4;958:15;;;1011:4;995:21;;605:61;;;866:13;930:15;;;965:4;958:15;;;1011:4;995:21;;613:25;598:68;504:169;-1:-1:-1;;;504:169:8:o;14:196:13:-;82:20;;142:42;131:54;;121:65;;111:93;;200:1;197;190:12;111:93;14:196;;;:::o;215:367::-;278:8;288:6;342:3;335:4;327:6;323:17;319:27;309:55;;360:1;357;350:12;309:55;-1:-1:-1;383:20:13;;426:18;415:30;;412:50;;;458:1;455;448:12;412:50;495:4;487:6;483:17;471:29;;555:3;548:4;538:6;535:1;531:14;523:6;519:27;515:38;512:47;509:67;;;572:1;569;562:12;509:67;215:367;;;;;:::o;587:723::-;709:6;717;725;733;741;749;802:3;790:9;781:7;777:23;773:33;770:53;;;819:1;816;809:12;770:53;842:29;861:9;842:29;:::i;:::-;832:39;;918:2;907:9;903:18;890:32;880:42;;941:38;975:2;964:9;960:18;941:38;:::i;:::-;931:48;;1026:2;1015:9;1011:18;998:32;988:42;;1081:3;1070:9;1066:19;1053:33;1109:18;1101:6;1098:30;1095:50;;;1141:1;1138;1131:12;1095:50;1180:70;1242:7;1233:6;1222:9;1218:22;1180:70;:::i;:::-;587:723;;;;-1:-1:-1;587:723:13;;-1:-1:-1;587:723:13;;1269:8;;587:723;-1:-1:-1;;;587:723:13:o;1315:186::-;1374:6;1427:2;1415:9;1406:7;1402:23;1398:32;1395:52;;;1443:1;1440;1433:12;1395:52;1466:29;1485:9;1466:29;:::i;1688:541::-;1813:6;1821;1829;1882:2;1870:9;1861:7;1857:23;1853:32;1850:52;;;1898:1;1895;1888:12;1850:52;1921:29;1940:9;1921:29;:::i;:::-;1911:39;;2001:2;1990:9;1986:18;1973:32;2028:18;2020:6;2017:30;2014:50;;;2060:1;2057;2050:12;2014:50;2099:70;2161:7;2152:6;2141:9;2137:22;2099:70;:::i;:::-;1688:541;;2188:8;;-1:-1:-1;2073:96:13;;-1:-1:-1;;;;1688:541:13:o;2234:254::-;2302:6;2310;2363:2;2351:9;2342:7;2338:23;2334:32;2331:52;;;2379:1;2376;2369:12;2331:52;2402:29;2421:9;2402:29;:::i;:::-;2392:39;2478:2;2463:18;;;;2450:32;;-1:-1:-1;;;2234:254:13:o;5036:184::-;5088:77;5085:1;5078:88;5185:4;5182:1;5175:15;5209:4;5206:1;5199:15;5225:386;5321:4;5379:11;5366:25;5469:66;5458:8;5442:14;5438:29;5434:102;5414:18;5410:127;5400:155;;5551:1;5548;5541:12;5400:155;5572:33;;;;;5225:386;-1:-1:-1;;5225:386:13:o;5616:604::-;5709:4;5715:6;5775:11;5762:25;5865:66;5854:8;5838:14;5834:29;5830:102;5810:18;5806:127;5796:155;;5947:1;5944;5937:12;5796:155;5974:33;;6026:20;;;-1:-1:-1;6069:18:13;6058:30;;6055:50;;;6101:1;6098;6091:12;6055:50;6134:4;6122:17;;-1:-1:-1;6185:1:13;6181:14;;;6165;6161:35;6151:46;;6148:66;;;6210:1;6207;6200:12;6225:184;6277:77;6274:1;6267:88;6374:4;6371:1;6364:15;6398:4;6395:1;6388:15;6414:195;6453:3;6484:66;6477:5;6474:77;6471:103;;6554:18;;:::i;:::-;-1:-1:-1;6601:1:13;6590:13;;6414:195::o;6614:184::-;6666:77;6663:1;6656:88;6763:4;6760:1;6753:15;6787:4;6784:1;6777:15;6803:120;6843:1;6869;6859:35;;6874:18;;:::i;:::-;-1:-1:-1;6908:9:13;;6803:120::o;6928:112::-;6960:1;6986;6976:35;;6991:18;;:::i;:::-;-1:-1:-1;7025:9:13;;6928:112::o;7406:125::-;7471:9;;;7492:10;;;7489:36;;;7505:18;;:::i"},"methodIdentifiers":{"claim(address,uint256,address,uint256,bytes32[])":"12d18ed6","claimMulti(address,(address,uint256,uint256,bytes32[])[])":"20ce64de","isClaimed(address,uint256)":"562beba8","merkleRoot(address)":"e2111586","owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b","update(address)":"1c1b8772","updateMerkleRoot(address,bytes32)":"e786818e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"update\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"update\",\"type\":\"uint256\"}],\"name\":\"MerkleRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MultiMerkleStash.claimParam[]\",\"name\":\"claims\",\"type\":\"tuple[]\"}],\"name\":\"claimMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"updateMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MultiMerkleStash.sol\":\"MultiMerkleStash\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b\",\"dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF\"]},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a\",\"dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS\"]},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba\",\"dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xca2ae13e0610f6a99238dd00b97bd786bc92732dae6d6b9d61f573ec51018310\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75f8c71ce0c91c40dd5f249ace0b7d8270f8f1767231bcf71490f7157d6ba862\",\"dweb:/ipfs/QmYXgxeDyFHvz3JsXxLEYN6GNUR44ThHeFj5XkpkgMoG4w\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c78e2aa4313323cecd1ef12a8d6265b96beee1a199923abf55d9a2a9e291ad23\",\"dweb:/ipfs/QmUTs2KStXucZezzFo3EYeqYu47utu56qrF7jj1Gue65vb\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Errors.sol\":{\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf\",\"dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB\"]},\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x631dc1958d5308bd2d9f91190bbcde4f9ffb9d9401ce8d358c17b35f1a942bb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ef16d9a6f57eae9ab275116eaba1e8de70efd3d0e3682b1585b8f069d9c3f9\",\"dweb:/ipfs/QmR3JQHAyv4sNWnRHeiC6oaz8Bqn8rtzu5sdAqAJRtBqpj\"]},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]},\"contracts/MultiMerkleStash.sol\":{\"keccak256\":\"0x25d8468a41c18e9b158925e2a1d4488f0f2e5386a7a9862779a4f6a435a80b3b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d80b89a372a715882096be5c32266f470d8918c251b65afc0608380c5923f0c0\",\"dweb:/ipfs/QmcqVs9UHJYkipYtUCZY3LbJmmWb8FSMV6o6Xq8xrbR6ob\"]},\"contracts/Ownable.sol\":{\"keccak256\":\"0xbff0a96854c176ed00e05c8d980527652773902bfa2d57170d677170aa810bea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bfda99426cb0339d4ff3dd0171909304d35b013c2abd1737009065813e98db19\",\"dweb:/ipfs/QmVm3XZLd2AuRmAZPfKPgrFuPcxoo7ERmCCYQgMBEkNxMH\"]}},\"version\":1}"}},"contracts/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"contracts/Ownable.sol\":{\"keccak256\":\"0xbff0a96854c176ed00e05c8d980527652773902bfa2d57170d677170aa810bea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bfda99426cb0339d4ff3dd0171909304d35b013c2abd1737009065813e98db19\",\"dweb:/ipfs/QmVm3XZLd2AuRmAZPfKPgrFuPcxoo7ERmCCYQgMBEkNxMH\"]}},\"version\":1}"}}}}}