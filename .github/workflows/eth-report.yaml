name: "[sdTokens] Generate - Weekly Reports"

on:
  schedule:
    - cron: '0 10 * * 1'  # Monday at 10:00 UTC
  workflow_dispatch:
    inputs:
      action_type:
        description: 'Type of report to generate'
        required: true
        type: choice
        options:
        - normal
        - otc
        default: 'normal'
      protocol:
        description: 'Protocol to process (only for normal reports)'
        required: false
        type: choice
        options:
        - all
        - curve
        - balancer
        - fxn
        - frax
        - pendle
        - votium
        default: 'all'

jobs:
  generate-reports:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        env:
          GIT_ACCESS_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20.5.1"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.12.3

      - name: Install node dependencies
        run: pnpm install

      - name: Set default values for scheduled runs
        if: github.event_name == 'schedule'
        run: |
          echo "ACTION_TYPE=normal" >> $GITHUB_ENV
          echo "PROTOCOL=all" >> $GITHUB_ENV

      - name: Set manual input values
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "ACTION_TYPE=${{ github.event.inputs.action_type }}" >> $GITHUB_ENV
          echo "PROTOCOL=${{ github.event.inputs.protocol }}" >> $GITHUB_ENV

      - name: Run generateReport for Curve
        if: env.ACTION_TYPE == 'normal' && (env.PROTOCOL == 'all' || env.PROTOCOL == 'curve')
        run: pnpm tsx script/reports/generateReport.ts curve
        env:
          EXPLORER_KEY: ${{ secrets.ETHERSCAN_TOKEN }}
          WEB3_ALCHEMY_API_KEY: ${{ secrets.WEB3_ALCHEMY_API_KEY}}

      - name: Run generateReport for Balancer
        if: env.ACTION_TYPE == 'normal' && (env.PROTOCOL == 'all' || env.PROTOCOL == 'balancer')
        run: pnpm tsx script/reports/generateReport.ts balancer
        env:
          EXPLORER_KEY: ${{ secrets.ETHERSCAN_TOKEN }}
          WEB3_ALCHEMY_API_KEY: ${{ secrets.WEB3_ALCHEMY_API_KEY}}

      - name: Run generateReport for FXN
        if: env.ACTION_TYPE == 'normal' && (env.PROTOCOL == 'all' || env.PROTOCOL == 'fxn')
        run: pnpm tsx script/reports/generateReport.ts fxn
        env:
          EXPLORER_KEY: ${{ secrets.ETHERSCAN_TOKEN }}
          WEB3_ALCHEMY_API_KEY: ${{ secrets.WEB3_ALCHEMY_API_KEY}}

      - name: Run generateReport for Frax
        if: env.ACTION_TYPE == 'normal' && (env.PROTOCOL == 'all' || env.PROTOCOL == 'frax')
        run: pnpm tsx script/reports/generateReportFrax.ts
        env:
          EXPLORER_KEY: ${{ secrets.ETHERSCAN_TOKEN }}
          WEB3_ALCHEMY_API_KEY: ${{ secrets.WEB3_ALCHEMY_API_KEY}}

      - name: Run generatePendleReport script
        if: env.ACTION_TYPE == 'normal' && env.PROTOCOL == 'pendle'
        run: |
          pnpm tsx script/reports/generatePendleReport.ts
        env:
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_TOKEN}}
          WEB3_ALCHEMY_API_KEY: ${{ secrets.WEB3_ALCHEMY_API_KEY}}
          GIT_ACCESS_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Run generateVotiumReport script
        if: env.ACTION_TYPE == 'normal' && (env.PROTOCOL == 'all' || env.PROTOCOL == 'votium')
        run: |
          pnpm tsx script/vlCVX/claims/generateConvexVotium.ts
        env:
          EXPLORER_KEY: ${{ secrets.ETHERSCAN_TOKEN}}
          WEB3_ALCHEMY_API_KEY: ${{ secrets.WEB3_ALCHEMY_API_KEY}}
          TELEGRAM_VERIF_API_KEY: ${{ secrets.TELEGRAM_VERIF_API_KEY }}
          TELEGRAM_VERIF_CHAT_ID: ${{ secrets.TELEGRAM_VERIF_CHAT_ID }}

      - name: Run generateOTCReport script (curve)
        if: env.ACTION_TYPE == 'otc' && env.PROTOCOL == 'curve'
        run: |
          pnpm tsx script/reports/generateOTCReport.ts curve
        env:
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_TOKEN}}
          WEB3_ALCHEMY_API_KEY: ${{ secrets.WEB3_ALCHEMY_API_KEY}}
      
      - name: Run generateOTCReport script (balancer)
        if: env.ACTION_TYPE == 'otc' && env.PROTOCOL == 'balancer'
        run: |
          pnpm tsx script/reports/generateOTCReport.ts balancer
        env:
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_TOKEN}}
          WEB3_ALCHEMY_API_KEY: ${{ secrets.WEB3_ALCHEMY_API_KEY}}

      - name: Run generateOTCReport script (fxn)
        if: env.ACTION_TYPE == 'otc' && env.PROTOCOL == 'fxn'
        run: |
          pnpm tsx script/reports/generateOTCReport.ts fxn
        env:
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_TOKEN}}
          WEB3_ALCHEMY_API_KEY: ${{ secrets.WEB3_ALCHEMY_API_KEY}}


      - name: Run generateOTCReport script (frax)
        if: env.ACTION_TYPE == 'otc' && env.PROTOCOL == 'frax'
        run: |
          pnpm tsx script/reports/generateOTCReport.ts frax
        env:
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_TOKEN}}
          WEB3_ALCHEMY_API_KEY: ${{ secrets.WEB3_ALCHEMY_API_KEY}}

      - name: Run generateOTCReport script (pendle)
        if: env.ACTION_TYPE == 'otc' && env.PROTOCOL == 'pendle'
        run: |
          pnpm tsx script/reports/generateOTCReport.ts pendle
        env:
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_TOKEN}}
          WEB3_ALCHEMY_API_KEY: ${{ secrets.WEB3_ALCHEMY_API_KEY}}

      - name: Pull latest changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git pull origin main --rebase

      - uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "chore: Update weekly bounties and OTC reports"
          commit_user_name: github-actions[bot]
          commit_user_email: 41898282+github-actions[bot]@users.noreply.github.com
          commit_author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>

      - name: Trigger reports-checker workflow
        if: env.ACTION_TYPE == 'normal'
        run: |
          curl -X POST -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/json" \
          https://api.github.com/repos/${{ github.repository }}/actions/workflows/reports-checker.yaml/dispatches \
          -d '{
            "ref": "main",
            "inputs": {
              "protocol": "${{ env.PROTOCOL }}"
            }
          }'

      - name: Send error notification to Telegram
        if: failure()
        uses: appleboy/telegram-action@v1.0.1
        with:
          to: -1002354704686
          token: ${{ secrets.TG_API_KEY_BOT_ERROR }}
          format: html
          message: |
            ‚ùå <b>Workflow failed</b>
            ‚Ä¢ <b>Workflow:</b> ${{ github.workflow }}
            ‚Ä¢ <b>Job:</b> generate-report
            ‚Ä¢ <b>Protocol:</b> ${{ env.PROTOCOL }}
            ‚Ä¢ <b>Action Type:</b> ${{ env.ACTION_TYPE }}
            ‚Ä¢ <b>Trigger:</b> ${{ github.event_name }}
            ‚Ä¢ <b>Status:</b> ${{ job.status }}
            üìã <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">View workflow logs</a>
